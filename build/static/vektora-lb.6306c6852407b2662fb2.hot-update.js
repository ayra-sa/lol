webpackHotUpdate("vektora-lb",{

/***/ "./packages/lb/src/components/images/icons/star-rating.svg":
/*!*****************************************************************!*\
  !*** ./packages/lb/src/components/images/icons/star-rating.svg ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (__webpack_require__.p + \"images/star-rating.svg\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9sYi9zcmMvY29tcG9uZW50cy9pbWFnZXMvaWNvbnMvc3Rhci1yYXRpbmcuc3ZnPzU3NDMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBZSxvRkFBdUIsMkJBQTJCIiwiZmlsZSI6Ii4vcGFja2FnZXMvbGIvc3JjL2NvbXBvbmVudHMvaW1hZ2VzL2ljb25zL3N0YXItcmF0aW5nLnN2Zy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWFnZXMvc3Rhci1yYXRpbmcuc3ZnXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./packages/lb/src/components/images/icons/star-rating.svg\n");

/***/ }),

/***/ "./packages/lb/src/components/product/product-slider.js":
/*!**************************************************************!*\
  !*** ./packages/lb/src/components/product/product-slider.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _other_divider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../other/divider */ \"./packages/lb/src/components/other/divider.js\");\n/* harmony import */ var _sidebar_nav__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../sidebar-nav */ \"./packages/lb/src/components/sidebar-nav.js\");\n/* harmony import */ var _typography_main_tag__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../typography/main-tag */ \"./packages/lb/src/components/typography/main-tag.js\");\n/* harmony import */ var _typography_text__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../typography/text */ \"./packages/lb/src/components/typography/text.js\");\n/* harmony import */ var _images_star_rating_png__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../images/star-rating.png */ \"./packages/lb/src/components/images/star-rating.png\");\n/* harmony import */ var _images_Trustpilot_png__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../images/Trustpilot.png */ \"./packages/lb/src/components/images/Trustpilot.png\");\n/* harmony import */ var _buttons_button_container__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../buttons/button-container */ \"./packages/lb/src/components/buttons/button-container.js\");\n/* harmony import */ var _typography_center__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../typography/center */ \"./packages/lb/src/components/typography/center.js\");\n/* harmony import */ var _buttons_button_primary__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../buttons/button-primary */ \"./packages/lb/src/components/buttons/button-primary.js\");\n/* harmony import */ var _images_order_item_png__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../images/order/item.png */ \"./packages/lb/src/components/images/order/item.png\");\n/* harmony import */ var _form_input__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../form/input */ \"./packages/lb/src/components/form/input.js\");\n/* harmony import */ var _images_slider_what_svg__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../images/slider/what.svg */ \"./packages/lb/src/components/images/slider/what.svg\");\n/* harmony import */ var _images_slider_card_count_png__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../images/slider/card-count.png */ \"./packages/lb/src/components/images/slider/card-count.png\");\n/* harmony import */ var _images_icons_verified_svg__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../images/icons/verified.svg */ \"./packages/lb/src/components/images/icons/verified.svg\");\n/* harmony import */ var _images_icons_star_rating_svg__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../images/icons/star-rating.svg */ \"./packages/lb/src/components/images/icons/star-rating.svg\");\n/* harmony import */ var _images_slider_bg_basket_png__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../images/slider/bg-basket.png */ \"./packages/lb/src/components/images/slider/bg-basket.png\");\n/* harmony import */ var _breadcrumbs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../breadcrumbs */ \"./packages/lb/src/components/breadcrumbs.js\");\n/* harmony import */ var _contianer_small_container__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../contianer/small-container */ \"./packages/lb/src/components/contianer/small-container.js\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}const ProductSlider=()=>{return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"Fragment\"],{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_sidebar_nav__WEBPACK_IMPORTED_MODULE_3__[\"default\"],{}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(MainRight,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(\"div\",{className:\"container\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(\"section\",{className:\"section\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_breadcrumbs__WEBPACK_IMPORTED_MODULE_18__[\"default\"],{}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading2\"],{children:\"We offer to buy booster for your account\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Body3\"],{children:[\"Lol Boosting provides cheap WoW boosting of all types: character or PvP boosting, raid or dungeons carry, Powerleveling, farming & many more to save your time. Book a slot in our live chat and enjoy WoW boost!\",\" \"]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(ContentSlide,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(Positions,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(Position,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading4\"],{children:\"Current Position\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"img\",{src:_images_order_item_png__WEBPACK_IMPORTED_MODULE_11__[\"default\"],alt:\"item\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Select\"],{name:\"position\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Option\"],{value:\"iron\",children:\"Iron\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Option\"],{value:\"platinum\",children:\"Platinum\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Select\"],{name:\"division\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Option\"],{value:\"division 4\",children:\"Division 4\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Option\"],{value:\"division 5\",children:\"Division 5\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Select\"],{name:\"LP\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Option\"],{value:\"lp 20\",children:\"LP 0-20\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Option\"],{value:\"lp 30\",children:\"LP 0-30\"})]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(Position,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading4\"],{children:\"Desired Position\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"img\",{src:_images_order_item_png__WEBPACK_IMPORTED_MODULE_11__[\"default\"],alt:\"item\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Select\"],{name:\"position\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Option\"],{value:\"platinum\",children:\"Platinum\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Option\"],{value:\"iron\",children:\"Iron\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Select\"],{name:\"division\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Option\"],{value:\"division 4\",children:\"Division 4\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Option\"],{value:\"division 5\",children:\"Division 5\"})]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(Position,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading4\"],{children:\"Select Server\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"img\",{src:_images_order_item_png__WEBPACK_IMPORTED_MODULE_11__[\"default\"],alt:\"item\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Select\"],{name:\"server\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Option\"],{value:\"euw\",children:\"EUW\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Option\"],{value:\"eus\",children:\"EUS\"})]})]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(Basket,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(Header,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading4\"],{children:\"My Order\"})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(BasketBody,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(BBInfo,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(BBTitle,{children:\"Completion Time\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading6\"],{children:\"1 Day\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(BBInfo,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(BBTitle,{children:\"Extra Options\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading6\"],{children:\"Champion ($5)\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading6\"],{children:\"Champion ($5)\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(BBInfo,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(BBTitle,{children:\"You Earn\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading6\"],{children:\"12 Fox Coins (1.4$)\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(BBDetail,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(BBTitle,{children:\"Final Price\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading3\"],{children:\"$34\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_buttons_button_container__WEBPACK_IMPORTED_MODULE_8__[\"ButtonContainer\"],{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_buttons_button_primary__WEBPACK_IMPORTED_MODULE_10__[\"BtnPrimary\"],{children:\"Rank Up\"})})]})]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_other_divider__WEBPACK_IMPORTED_MODULE_2__[\"Divider\"],{})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(_contianer_small_container__WEBPACK_IMPORTED_MODULE_19__[\"SmallContainer\"],{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(\"section\",{className:\"section\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_typography_main_tag__WEBPACK_IMPORTED_MODULE_4__[\"MainTag\"],{children:\"Some addings for you \"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading3\"],{children:\"Extra Options\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Body3\"],{children:[\"Lol Boosting provides cheap WoW boosting of all types: character or PvP boosting, raid or dungeons carry, Powerleveling, farming & many more to save your time. Book a slot in our live chat and enjoy WoW boost!\",\" \"]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(ExtraOptions,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(Extra,{children:\"Spell Buttons\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(Extra,{children:\"Spell Buttons\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(Extra,{children:\"Spell Buttons\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(Extra,{children:\"Spell Buttons\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(Extra,{children:\"Spell Buttons\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(ExtraInfo,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Body3\"],{children:\"This option +10% to final price \"})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Body3\"],{children:\"Would you like to see how a Challenger player plays on your account in your elo? By enabling this option we will set up a private stream specifically for you! Your booster will also be able to chat with you, provide you rank up images and send you VODs / recordings of the games played. Your replays will be sent to you after order completion on your e-mail. If you wish us to send them to you, please write it in the notes or notify us before we initiate your order.\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(\"section\",{className:\"section\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_typography_main_tag__WEBPACK_IMPORTED_MODULE_4__[\"MainTag\"],{children:\"Some addings for you \"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading3\"],{children:\"What You Will Get\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(WhatYouWrap,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(WhatYou,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"img\",{src:_images_slider_what_svg__WEBPACK_IMPORTED_MODULE_13__[\"default\"],alt:\"icon\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading4\"],{children:\"Pre Ranked\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Body3\"],{children:\"Lol Boosting provides cheap WoW boosting of all types: character or PvP boosting, raid or dungeons carry, Powerleveling, farming & many more\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(WhatYou,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"img\",{src:_images_slider_what_svg__WEBPACK_IMPORTED_MODULE_13__[\"default\"],alt:\"icon\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading4\"],{children:\"Pre Ranked\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Body3\"],{children:\"Lol Boosting provides cheap WoW boosting of all types: character or PvP boosting, raid or dungeons carry, Powerleveling, farming & many more\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(WhatYou,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"img\",{src:_images_slider_what_svg__WEBPACK_IMPORTED_MODULE_13__[\"default\"],alt:\"icon\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading4\"],{children:\"Pre Ranked\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Body3\"],{children:\"Lol Boosting provides cheap WoW boosting of all types: character or PvP boosting, raid or dungeons carry, Powerleveling, farming & many more\"})]})]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(\"section\",{className:\"section\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_typography_main_tag__WEBPACK_IMPORTED_MODULE_4__[\"MainTag\"],{children:\"Ordering procedure\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading3\"],{children:\"How It Works\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(How,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(HowList,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Body3\"],{children:\"Place an order choosing options you need\"})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(HowList,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Body3\"],{children:\"We will contact you via our live chat or by sending an email. All the details will be discussed beforehand and the start time will be set according to your schedule.\"})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(HowList,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Body3\"],{children:\"Place an order choosing options you need\"})})]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(\"section\",{className:\"section\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_typography_main_tag__WEBPACK_IMPORTED_MODULE_4__[\"MainTag\"],{children:\"About this item\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading3\"],{children:\"Product Description\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(Desc,{children:[\"The last boss of every raid in WoW is usually very difficult to defeat even in Normal mode. However, with proper gear and an experienced team, it is more than real. To defeat Sylvanas Windrunner you need to get through 3 phases and bring Sylvanas health down to 50%. At mythic difficulty SoD Sylvanas Windrunner kill will be counted at 45% of her health.\",\" \"]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(Desc,{children:[\"The last boss of every raid in WoW is usually very difficult to defeat even in Normal mode. However, with proper gear and an experienced team, it is more than real. To defeat Sylvanas Windrunner you need to get through 3 phases and bring Sylvanas health down to 50%. At mythic difficulty SoD Sylvanas Windrunner kill will be counted at 45% of her health.\",\" \"]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(Desc,{children:[\"The last boss of every raid in WoW is usually very difficult to defeat even in Normal mode. However, with proper gear and an experienced team, it is more than real. To defeat Sylvanas Windrunner you need to get through 3 phases and bring Sylvanas health down to 50%. At mythic difficulty SoD Sylvanas Windrunner kill will be counted at 45% of her health.\",\" \"]})]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(Feedback,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(_typography_center__WEBPACK_IMPORTED_MODULE_9__[\"Center\"],{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_typography_main_tag__WEBPACK_IMPORTED_MODULE_4__[\"MainTag\"],{children:\"Review and Feedback\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading2\"],{children:\"Leave us a feedback\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Body3\"],{children:\"You can leave here feedback and read user\\u2019s reviews\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(Rating,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"p\",{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading2\"],{children:\"4.9\"})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"img\",{src:_images_star_rating_png__WEBPACK_IMPORTED_MODULE_6__[\"default\"],alt:\"star\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"img\",{src:_images_Trustpilot_png__WEBPACK_IMPORTED_MODULE_7__[\"default\"],alt:\"\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(Reviews,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(TellUs,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(ReviewTitle,{children:\"Tell us about your experience\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Body4\"],{children:\"Your overall rating\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(RatingInput,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"img\",{src:_images_icons_star_rating_svg__WEBPACK_IMPORTED_MODULE_16__[\"default\"],alt:\"icon\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"img\",{src:_images_icons_star_rating_svg__WEBPACK_IMPORTED_MODULE_16__[\"default\"],alt:\"icon\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"img\",{src:_images_icons_star_rating_svg__WEBPACK_IMPORTED_MODULE_16__[\"default\"],alt:\"icon\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"img\",{src:_images_icons_star_rating_svg__WEBPACK_IMPORTED_MODULE_16__[\"default\"],alt:\"icon\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"img\",{src:_images_icons_star_rating_svg__WEBPACK_IMPORTED_MODULE_16__[\"default\"],alt:\"icon\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(ReviewForm,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Input\"],{placeholder:\"Title\",type:\"text\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Input\"],{placeholder:\"Name\",type:\"text\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Input\"],{placeholder:\"Email\",type:\"email\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(Message,{placeholder:\"Review text\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_buttons_button_container__WEBPACK_IMPORTED_MODULE_8__[\"ButtonContainer\"],{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(BtnSubmit,{children:\"Send Review\"})})]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(ReviewTotal,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(ReviewTitle,{children:\"2 of 132 Reviews\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(ReviewCard,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading6\"],{children:\"Fantastic Job\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Body3\"],{children:\"Good purchase Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(Verified,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"img\",{src:_images_icons_verified_svg__WEBPACK_IMPORTED_MODULE_15__[\"default\"],alt:\"icon\"}),\" Verified purchased\"]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(ReviewCard,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading6\"],{children:\"Fantastic Job\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Body3\"],{children:\"Good purchase Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsxs\"])(Verified,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__[\"jsx\"])(\"img\",{src:_images_icons_verified_svg__WEBPACK_IMPORTED_MODULE_15__[\"default\"],alt:\"icon\"}),\" Verified purchased\"]})]})]})]})]})]})})]});};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"connect\"])(ProductSlider));const MainRight=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1iq9jn929\",label:\"MainRight\"})( false?undefined:{name:\"177ogk6\",styles:\"margin-left:375px;width:calc(100% - 375px);& input{width:100%;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const ContentSlide=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1iq9jn928\",label:\"ContentSlide\"})( false?undefined:{name:\"5kov97\",styles:\"display:flex;flex-wrap:wrap\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Positions=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1iq9jn927\",label:\"Positions\"})( false?undefined:{name:\"1c3sbh7\",styles:\"display:flex;gap:20px;margin-top:40px;& select{margin-bottom:10px;width:100%;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Position=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1iq9jn926\",label:\"Position\"})( false?undefined:{name:\"189mkdu\",styles:\"display:flex;flex-direction:column;align-items:center;width:300px;& img{margin:40px 0 50px 0;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Basket=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1iq9jn925\",label:\"Basket\"})( false?undefined:{name:\"sqxxqu\",styles:\"border-radius:12px;box-shadow:0px 4px 30px 0px #3232321a;min-width:300px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Header=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1iq9jn924\",label:\"Header\"})(\"background:url(\",_images_slider_bg_basket_png__WEBPACK_IMPORTED_MODULE_17__[\"default\"],\") no-repeat;background-size:cover;padding:20px;color:#fff;border-radius:12px;\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const BasketBody=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1iq9jn923\",label:\"BasketBody\"})( false?undefined:{name:\"1yjx7km\",styles:\"padding:20px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const BBInfo=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1iq9jn922\",label:\"BBInfo\"})( false?undefined:{name:\"10ji5kt\",styles:\"padding-bottom:10px;border-bottom:1px solid #ebeff8;text-align:center;& h6{color:var(--text-dark);}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const BBTitle=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading7\"], false?undefined:{target:\"e1iq9jn921\",label:\"BBTitle\"})( false?undefined:{name:\"l6yj11\",styles:\"margin-bottom:6px;color:var(--primary-pressed)\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const BBDetail=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1iq9jn920\",label:\"BBDetail\"})( false?undefined:{name:\"47ywsc\",styles:\"display:flex;justify-content:space-between;align-items:center;margin-top:10px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const ExtraOptions=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1iq9jn919\",label:\"ExtraOptions\"})( false?undefined:{name:\"s3977d\",styles:\"display:flex;gap:14px;margin:20px 0\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Extra=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"span\", false?undefined:{target:\"e1iq9jn918\",label:\"Extra\"})( false?undefined:{name:\"12hjnkb\",styles:\"padding:16px 26px;border-radius:12px;background:#ebeff8;white-space:nowrap\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const ExtraInfo=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1iq9jn917\",label:\"ExtraInfo\"})( false?undefined:{name:\"hwl8e3\",styles:\"margin-bottom:20px;display:flex\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const WhatYouWrap=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1iq9jn916\",label:\"WhatYouWrap\"})( false?undefined:{name:\"1yj7lir\",styles:\"display:flex;gap:70px;margin-top:20px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const WhatYou=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1iq9jn915\",label:\"WhatYou\"})( false?undefined:{name:\"nlibun\",styles:\"& img{margin-bottom:20px;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const How=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"ul\", false?undefined:{target:\"e1iq9jn914\",label:\"How\"})( false?undefined:{name:\"oizis2\",styles:\"margin-top:20px;counter-reset:counter-list;position:relative;padding:0\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const HowList=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"li\", false?undefined:{target:\"e1iq9jn913\",label:\"HowList\"})(\"margin:0 0 20px 40px;list-style:none;&::before{counter-increment:counter-list;content:counter(counter-list);position:absolute;left:0;background:url(\",_images_slider_card_count_png__WEBPACK_IMPORTED_MODULE_14__[\"default\"],\");border-radius:8px;width:26px;height:26px;display:flex;justify-content:center;font-weight:700;color:#5479e5;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const Desc=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Body3\"], false?undefined:{target:\"e1iq9jn912\",label:\"Desc\"})( false?undefined:{name:\"118vlvy\",styles:\"margin-top:20px;display:block\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Feedback=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"section\", false?undefined:{target:\"e1iq9jn911\",label:\"Feedback\"})( false?undefined:{name:\"1glwqyb\",styles:\"margin-top:120px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Rating=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1iq9jn910\",label:\"Rating\"})( false?undefined:{name:\"silwi0\",styles:\"background:linear-gradient(\\n    104.22deg,\\n    #ebf3ff 8.44%,\\n    rgba(255, 255, 255, 0.2) 59.55%,\\n    #f4e6ff 103.63%\\n  );backdrop-filter:blur(30px);border-radius:30px;padding:20px;text-align:center;width:400px;display:flex;flex-direction:column;align-items:center;gap:20px;margin:40px auto\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Reviews=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1iq9jn99\",label:\"Reviews\"})( false?undefined:{name:\"er7k5y\",styles:\"display:flex;gap:90px;margin-top:40px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const TellUs=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1iq9jn98\",label:\"TellUs\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");const RatingInput=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1iq9jn97\",label:\"RatingInput\"})( false?undefined:{name:\"1bfgogi\",styles:\"display:flex;gap:5px;align-items:center\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const ReviewTitle=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading4\"], false?undefined:{target:\"e1iq9jn96\",label:\"ReviewTitle\"})( false?undefined:{name:\"1azpx8r\",styles:\"margin-bottom:20px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const ReviewForm=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"form\", false?undefined:{target:\"e1iq9jn95\",label:\"ReviewForm\"})( false?undefined:{name:\"iqoq9n\",styles:\"margin-top:20px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Message=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"textarea\", false?undefined:{target:\"e1iq9jn94\",label:\"Message\"})( false?undefined:{name:\"1bysje7\",styles:\"border:none;width:100%;background:#ebeff8;border-radius:6px;padding:10px;font-family:inherit\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const BtnSubmit=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(_buttons_button_primary__WEBPACK_IMPORTED_MODULE_10__[\"BtnPrimary\"], false?undefined:{target:\"e1iq9jn93\",label:\"BtnSubmit\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");const ReviewTotal=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(TellUs, false?undefined:{target:\"e1iq9jn92\",label:\"ReviewTotal\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rcHJvL0RvY3VtZW50cy9Qcm9qZWN0cy92ZWt0b3JhLWxiL3BhY2thZ2VzL2xiL3NyYy9jb21wb25lbnRzL3Byb2R1Y3QvcHJvZHVjdC1zbGlkZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNmZrQyIsImZpbGUiOiIvVXNlcnMvbWFjYm9va3Byby9Eb2N1bWVudHMvUHJvamVjdHMvdmVrdG9yYS1sYi9wYWNrYWdlcy9sYi9zcmMvY29tcG9uZW50cy9wcm9kdWN0L3Byb2R1Y3Qtc2xpZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29ubmVjdCwgc3R5bGVkIH0gZnJvbSBcImZyb250aXR5XCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBEaXZpZGVyIH0gZnJvbSBcIi4uL290aGVyL2RpdmlkZXJcIjtcbmltcG9ydCBTaWRlYmFyTmF2IGZyb20gXCIuLi9zaWRlYmFyLW5hdlwiO1xuaW1wb3J0IHsgTWFpblRhZyB9IGZyb20gXCIuLi90eXBvZ3JhcGh5L21haW4tdGFnXCI7XG5pbXBvcnQge1xuICBCb2R5MixcbiAgQm9keTMsXG4gIEJvZHk0LFxuICBIZWFkaW5nMixcbiAgSGVhZGluZzMsXG4gIEhlYWRpbmc0LFxuICBIZWFkaW5nNixcbiAgSGVhZGluZzcsXG59IGZyb20gXCIuLi90eXBvZ3JhcGh5L3RleHRcIjtcbmltcG9ydCBzdGFyIGZyb20gXCIuLi9pbWFnZXMvc3Rhci1yYXRpbmcucG5nXCI7XG5pbXBvcnQgcmF0aW5nTG9nbyBmcm9tIFwiLi4vaW1hZ2VzL1RydXN0cGlsb3QucG5nXCI7XG5pbXBvcnQgeyBCdXR0b25Db250YWluZXIgfSBmcm9tIFwiLi4vYnV0dG9ucy9idXR0b24tY29udGFpbmVyXCI7XG5pbXBvcnQgeyBDZW50ZXIgfSBmcm9tIFwiLi4vdHlwb2dyYXBoeS9jZW50ZXJcIjtcbmltcG9ydCB7IEJ0blByaW1hcnkgfSBmcm9tIFwiLi4vYnV0dG9ucy9idXR0b24tcHJpbWFyeVwiO1xuaW1wb3J0IGl0ZW1JbWcgZnJvbSBcIi4uL2ltYWdlcy9vcmRlci9pdGVtLnBuZ1wiO1xuaW1wb3J0IHsgSW5wdXQsIE9wdGlvbiwgU2VsZWN0IH0gZnJvbSBcIi4uL2Zvcm0vaW5wdXRcIjtcbmltcG9ydCB3aGF0IGZyb20gXCIuLi9pbWFnZXMvc2xpZGVyL3doYXQuc3ZnXCI7XG5pbXBvcnQgY291bnQgZnJvbSBcIi4uL2ltYWdlcy9zbGlkZXIvY2FyZC1jb3VudC5wbmdcIjtcbmltcG9ydCBjaGVjayBmcm9tIFwiLi4vaW1hZ2VzL2ljb25zL3ZlcmlmaWVkLnN2Z1wiO1xuaW1wb3J0IHJhdGluZ1N0YXIgZnJvbSBcIi4uL2ltYWdlcy9pY29ucy9zdGFyLXJhdGluZy5zdmdcIjtcbmltcG9ydCBiZ0Jhc2tldCBmcm9tIFwiLi4vaW1hZ2VzL3NsaWRlci9iZy1iYXNrZXQucG5nXCI7XG5pbXBvcnQgQnJlYWRjcnVtYnMgZnJvbSBcIi4uL2JyZWFkY3J1bWJzXCI7XG5pbXBvcnQgeyBTbWFsbENvbnRhaW5lciB9IGZyb20gXCIuLi9jb250aWFuZXIvc21hbGwtY29udGFpbmVyXCI7XG5cbmNvbnN0IFByb2R1Y3RTbGlkZXIgPSAoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxTaWRlYmFyTmF2IC8+XG5cbiAgICAgIDxNYWluUmlnaHQ+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyXCI+XG4gICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwic2VjdGlvblwiPlxuICAgICAgICAgICAgPEJyZWFkY3J1bWJzIC8+XG4gICAgICAgICAgICA8SGVhZGluZzI+V2Ugb2ZmZXIgdG8gYnV5IGJvb3N0ZXIgZm9yIHlvdXIgYWNjb3VudDwvSGVhZGluZzI+XG4gICAgICAgICAgICA8Qm9keTM+XG4gICAgICAgICAgICAgIExvbCBCb29zdGluZyBwcm92aWRlcyBjaGVhcCBXb1cgYm9vc3Rpbmcgb2YgYWxsIHR5cGVzOiBjaGFyYWN0ZXJcbiAgICAgICAgICAgICAgb3IgUHZQIGJvb3N0aW5nLCByYWlkIG9yIGR1bmdlb25zIGNhcnJ5LCBQb3dlcmxldmVsaW5nLCBmYXJtaW5nICZcbiAgICAgICAgICAgICAgbWFueSBtb3JlIHRvIHNhdmUgeW91ciB0aW1lLiBCb29rIGEgc2xvdCBpbiBvdXIgbGl2ZSBjaGF0IGFuZFxuICAgICAgICAgICAgICBlbmpveSBXb1cgYm9vc3Qhe1wiIFwifVxuICAgICAgICAgICAgPC9Cb2R5Mz5cblxuICAgICAgICAgICAgPENvbnRlbnRTbGlkZT5cbiAgICAgICAgICAgICAgPFBvc2l0aW9ucz5cbiAgICAgICAgICAgICAgICA8UG9zaXRpb24+XG4gICAgICAgICAgICAgICAgICA8SGVhZGluZzQ+Q3VycmVudCBQb3NpdGlvbjwvSGVhZGluZzQ+XG4gICAgICAgICAgICAgICAgICA8aW1nIHNyYz17aXRlbUltZ30gYWx0PVwiaXRlbVwiIC8+XG4gICAgICAgICAgICAgICAgICA8U2VsZWN0IG5hbWU9XCJwb3NpdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPVwiaXJvblwiPklyb248L09wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgPE9wdGlvbiB2YWx1ZT1cInBsYXRpbnVtXCI+UGxhdGludW08L09wdGlvbj5cbiAgICAgICAgICAgICAgICAgIDwvU2VsZWN0PlxuICAgICAgICAgICAgICAgICAgPFNlbGVjdCBuYW1lPVwiZGl2aXNpb25cIj5cbiAgICAgICAgICAgICAgICAgICAgPE9wdGlvbiB2YWx1ZT1cImRpdmlzaW9uIDRcIj5EaXZpc2lvbiA0PC9PcHRpb24+XG4gICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9XCJkaXZpc2lvbiA1XCI+RGl2aXNpb24gNTwvT3B0aW9uPlxuICAgICAgICAgICAgICAgICAgPC9TZWxlY3Q+XG4gICAgICAgICAgICAgICAgICA8U2VsZWN0IG5hbWU9XCJMUFwiPlxuICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPVwibHAgMjBcIj5MUCAwLTIwPC9PcHRpb24+XG4gICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9XCJscCAzMFwiPkxQIDAtMzA8L09wdGlvbj5cbiAgICAgICAgICAgICAgICAgIDwvU2VsZWN0PlxuICAgICAgICAgICAgICAgIDwvUG9zaXRpb24+XG4gICAgICAgICAgICAgICAgPFBvc2l0aW9uPlxuICAgICAgICAgICAgICAgICAgPEhlYWRpbmc0PkRlc2lyZWQgUG9zaXRpb248L0hlYWRpbmc0PlxuICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e2l0ZW1JbWd9IGFsdD1cIml0ZW1cIiAvPlxuICAgICAgICAgICAgICAgICAgPFNlbGVjdCBuYW1lPVwicG9zaXRpb25cIj5cbiAgICAgICAgICAgICAgICAgICAgPE9wdGlvbiB2YWx1ZT1cInBsYXRpbnVtXCI+UGxhdGludW08L09wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgPE9wdGlvbiB2YWx1ZT1cImlyb25cIj5Jcm9uPC9PcHRpb24+XG4gICAgICAgICAgICAgICAgICA8L1NlbGVjdD5cbiAgICAgICAgICAgICAgICAgIDxTZWxlY3QgbmFtZT1cImRpdmlzaW9uXCI+XG4gICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9XCJkaXZpc2lvbiA0XCI+RGl2aXNpb24gNDwvT3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPVwiZGl2aXNpb24gNVwiPkRpdmlzaW9uIDU8L09wdGlvbj5cbiAgICAgICAgICAgICAgICAgIDwvU2VsZWN0PlxuICAgICAgICAgICAgICAgIDwvUG9zaXRpb24+XG4gICAgICAgICAgICAgICAgPFBvc2l0aW9uPlxuICAgICAgICAgICAgICAgICAgPEhlYWRpbmc0PlNlbGVjdCBTZXJ2ZXI8L0hlYWRpbmc0PlxuICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e2l0ZW1JbWd9IGFsdD1cIml0ZW1cIiAvPlxuICAgICAgICAgICAgICAgICAgPFNlbGVjdCBuYW1lPVwic2VydmVyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9XCJldXdcIj5FVVc8L09wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgPE9wdGlvbiB2YWx1ZT1cImV1c1wiPkVVUzwvT3B0aW9uPlxuICAgICAgICAgICAgICAgICAgPC9TZWxlY3Q+XG4gICAgICAgICAgICAgICAgPC9Qb3NpdGlvbj5cbiAgICAgICAgICAgICAgPC9Qb3NpdGlvbnM+XG5cbiAgICAgICAgICAgICAgPEJhc2tldD5cbiAgICAgICAgICAgICAgICA8SGVhZGVyPlxuICAgICAgICAgICAgICAgICAgPEhlYWRpbmc0Pk15IE9yZGVyPC9IZWFkaW5nND5cbiAgICAgICAgICAgICAgICA8L0hlYWRlcj5cbiAgICAgICAgICAgICAgICA8QmFza2V0Qm9keT5cbiAgICAgICAgICAgICAgICAgIDxCQkluZm8+XG4gICAgICAgICAgICAgICAgICAgIDxCQlRpdGxlPkNvbXBsZXRpb24gVGltZTwvQkJUaXRsZT5cbiAgICAgICAgICAgICAgICAgICAgPEhlYWRpbmc2PjEgRGF5PC9IZWFkaW5nNj5cbiAgICAgICAgICAgICAgICAgIDwvQkJJbmZvPlxuICAgICAgICAgICAgICAgICAgPEJCSW5mbz5cbiAgICAgICAgICAgICAgICAgICAgPEJCVGl0bGU+RXh0cmEgT3B0aW9uczwvQkJUaXRsZT5cbiAgICAgICAgICAgICAgICAgICAgPEhlYWRpbmc2PkNoYW1waW9uICgkNSk8L0hlYWRpbmc2PlxuICAgICAgICAgICAgICAgICAgICA8SGVhZGluZzY+Q2hhbXBpb24gKCQ1KTwvSGVhZGluZzY+XG4gICAgICAgICAgICAgICAgICA8L0JCSW5mbz5cbiAgICAgICAgICAgICAgICAgIDxCQkluZm8+XG4gICAgICAgICAgICAgICAgICAgIDxCQlRpdGxlPllvdSBFYXJuPC9CQlRpdGxlPlxuICAgICAgICAgICAgICAgICAgICA8SGVhZGluZzY+MTIgRm94IENvaW5zICgxLjQkKTwvSGVhZGluZzY+XG4gICAgICAgICAgICAgICAgICA8L0JCSW5mbz5cbiAgICAgICAgICAgICAgICAgIDxCQkRldGFpbD5cbiAgICAgICAgICAgICAgICAgICAgPEJCVGl0bGU+RmluYWwgUHJpY2U8L0JCVGl0bGU+XG4gICAgICAgICAgICAgICAgICAgIDxIZWFkaW5nMz4kMzQ8L0hlYWRpbmczPlxuICAgICAgICAgICAgICAgICAgPC9CQkRldGFpbD5cbiAgICAgICAgICAgICAgICAgIDxCdXR0b25Db250YWluZXI+XG4gICAgICAgICAgICAgICAgICAgIDxCdG5QcmltYXJ5PlJhbmsgVXA8L0J0blByaW1hcnk+XG4gICAgICAgICAgICAgICAgICA8L0J1dHRvbkNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICA8L0Jhc2tldEJvZHk+XG4gICAgICAgICAgICAgIDwvQmFza2V0PlxuICAgICAgICAgICAgPC9Db250ZW50U2xpZGU+XG5cbiAgICAgICAgICAgIDxEaXZpZGVyIC8+XG4gICAgICAgICAgPC9zZWN0aW9uPlxuXG4gICAgICAgICAgPFNtYWxsQ29udGFpbmVyPlxuXG4gICAgICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJzZWN0aW9uXCI+XG4gICAgICAgICAgICAgIDxNYWluVGFnPlNvbWUgYWRkaW5ncyBmb3IgeW91IDwvTWFpblRhZz5cbiAgICAgICAgICAgICAgPEhlYWRpbmczPkV4dHJhIE9wdGlvbnM8L0hlYWRpbmczPlxuICAgICAgICAgICAgICA8Qm9keTM+XG4gICAgICAgICAgICAgICAgTG9sIEJvb3N0aW5nIHByb3ZpZGVzIGNoZWFwIFdvVyBib29zdGluZyBvZiBhbGwgdHlwZXM6IGNoYXJhY3RlclxuICAgICAgICAgICAgICAgIG9yIFB2UCBib29zdGluZywgcmFpZCBvciBkdW5nZW9ucyBjYXJyeSwgUG93ZXJsZXZlbGluZywgZmFybWluZyAmXG4gICAgICAgICAgICAgICAgbWFueSBtb3JlIHRvIHNhdmUgeW91ciB0aW1lLiBCb29rIGEgc2xvdCBpbiBvdXIgbGl2ZSBjaGF0IGFuZFxuICAgICAgICAgICAgICAgIGVuam95IFdvVyBib29zdCF7XCIgXCJ9XG4gICAgICAgICAgICAgIDwvQm9keTM+XG5cbiAgICAgICAgICAgICAgPEV4dHJhT3B0aW9ucz5cbiAgICAgICAgICAgICAgICA8RXh0cmE+U3BlbGwgQnV0dG9uczwvRXh0cmE+XG4gICAgICAgICAgICAgICAgPEV4dHJhPlNwZWxsIEJ1dHRvbnM8L0V4dHJhPlxuICAgICAgICAgICAgICAgIDxFeHRyYT5TcGVsbCBCdXR0b25zPC9FeHRyYT5cbiAgICAgICAgICAgICAgICA8RXh0cmE+U3BlbGwgQnV0dG9uczwvRXh0cmE+XG4gICAgICAgICAgICAgICAgPEV4dHJhPlNwZWxsIEJ1dHRvbnM8L0V4dHJhPlxuICAgICAgICAgICAgICA8L0V4dHJhT3B0aW9ucz5cblxuICAgICAgICAgICAgICA8RXh0cmFJbmZvPlxuICAgICAgICAgICAgICAgIDxCb2R5Mz5UaGlzIG9wdGlvbiArMTAlIHRvIGZpbmFsIHByaWNlIDwvQm9keTM+XG4gICAgICAgICAgICAgIDwvRXh0cmFJbmZvPlxuXG4gICAgICAgICAgICAgIDxCb2R5Mz5cbiAgICAgICAgICAgICAgICBXb3VsZCB5b3UgbGlrZSB0byBzZWUgaG93IGEgQ2hhbGxlbmdlciBwbGF5ZXIgcGxheXMgb24geW91clxuICAgICAgICAgICAgICAgIGFjY291bnQgaW4geW91ciBlbG8/IEJ5IGVuYWJsaW5nIHRoaXMgb3B0aW9uIHdlIHdpbGwgc2V0IHVwIGFcbiAgICAgICAgICAgICAgICBwcml2YXRlIHN0cmVhbSBzcGVjaWZpY2FsbHkgZm9yIHlvdSEgWW91ciBib29zdGVyIHdpbGwgYWxzbyBiZVxuICAgICAgICAgICAgICAgIGFibGUgdG8gY2hhdCB3aXRoIHlvdSwgcHJvdmlkZSB5b3UgcmFuayB1cCBpbWFnZXMgYW5kIHNlbmQgeW91XG4gICAgICAgICAgICAgICAgVk9EcyAvIHJlY29yZGluZ3Mgb2YgdGhlIGdhbWVzIHBsYXllZC4gWW91ciByZXBsYXlzIHdpbGwgYmUgc2VudFxuICAgICAgICAgICAgICAgIHRvIHlvdSBhZnRlciBvcmRlciBjb21wbGV0aW9uIG9uIHlvdXIgZS1tYWlsLiBJZiB5b3Ugd2lzaCB1cyB0b1xuICAgICAgICAgICAgICAgIHNlbmQgdGhlbSB0byB5b3UsIHBsZWFzZSB3cml0ZSBpdCBpbiB0aGUgbm90ZXMgb3Igbm90aWZ5IHVzIGJlZm9yZVxuICAgICAgICAgICAgICAgIHdlIGluaXRpYXRlIHlvdXIgb3JkZXIuXG4gICAgICAgICAgICAgIDwvQm9keTM+XG4gICAgICAgICAgICA8L3NlY3Rpb24+XG5cbiAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cInNlY3Rpb25cIj5cbiAgICAgICAgICAgICAgPE1haW5UYWc+U29tZSBhZGRpbmdzIGZvciB5b3UgPC9NYWluVGFnPlxuICAgICAgICAgICAgICA8SGVhZGluZzM+V2hhdCBZb3UgV2lsbCBHZXQ8L0hlYWRpbmczPlxuXG4gICAgICAgICAgICAgIDxXaGF0WW91V3JhcD5cbiAgICAgICAgICAgICAgICA8V2hhdFlvdT5cbiAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXt3aGF0fSBhbHQ9XCJpY29uXCIgLz5cbiAgICAgICAgICAgICAgICAgIDxIZWFkaW5nND5QcmUgUmFua2VkPC9IZWFkaW5nND5cbiAgICAgICAgICAgICAgICAgIDxCb2R5Mz5cbiAgICAgICAgICAgICAgICAgICAgTG9sIEJvb3N0aW5nIHByb3ZpZGVzIGNoZWFwIFdvVyBib29zdGluZyBvZiBhbGwgdHlwZXM6XG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlciBvciBQdlAgYm9vc3RpbmcsIHJhaWQgb3IgZHVuZ2VvbnMgY2FycnksXG4gICAgICAgICAgICAgICAgICAgIFBvd2VybGV2ZWxpbmcsIGZhcm1pbmcgJiBtYW55IG1vcmVcbiAgICAgICAgICAgICAgICAgIDwvQm9keTM+XG4gICAgICAgICAgICAgICAgPC9XaGF0WW91PlxuICAgICAgICAgICAgICAgIDxXaGF0WW91PlxuICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e3doYXR9IGFsdD1cImljb25cIiAvPlxuICAgICAgICAgICAgICAgICAgPEhlYWRpbmc0PlByZSBSYW5rZWQ8L0hlYWRpbmc0PlxuICAgICAgICAgICAgICAgICAgPEJvZHkzPlxuICAgICAgICAgICAgICAgICAgICBMb2wgQm9vc3RpbmcgcHJvdmlkZXMgY2hlYXAgV29XIGJvb3N0aW5nIG9mIGFsbCB0eXBlczpcbiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyIG9yIFB2UCBib29zdGluZywgcmFpZCBvciBkdW5nZW9ucyBjYXJyeSxcbiAgICAgICAgICAgICAgICAgICAgUG93ZXJsZXZlbGluZywgZmFybWluZyAmIG1hbnkgbW9yZVxuICAgICAgICAgICAgICAgICAgPC9Cb2R5Mz5cbiAgICAgICAgICAgICAgICA8L1doYXRZb3U+XG4gICAgICAgICAgICAgICAgPFdoYXRZb3U+XG4gICAgICAgICAgICAgICAgICA8aW1nIHNyYz17d2hhdH0gYWx0PVwiaWNvblwiIC8+XG4gICAgICAgICAgICAgICAgICA8SGVhZGluZzQ+UHJlIFJhbmtlZDwvSGVhZGluZzQ+XG4gICAgICAgICAgICAgICAgICA8Qm9keTM+XG4gICAgICAgICAgICAgICAgICAgIExvbCBCb29zdGluZyBwcm92aWRlcyBjaGVhcCBXb1cgYm9vc3Rpbmcgb2YgYWxsIHR5cGVzOlxuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXIgb3IgUHZQIGJvb3N0aW5nLCByYWlkIG9yIGR1bmdlb25zIGNhcnJ5LFxuICAgICAgICAgICAgICAgICAgICBQb3dlcmxldmVsaW5nLCBmYXJtaW5nICYgbWFueSBtb3JlXG4gICAgICAgICAgICAgICAgICA8L0JvZHkzPlxuICAgICAgICAgICAgICAgIDwvV2hhdFlvdT5cbiAgICAgICAgICAgICAgPC9XaGF0WW91V3JhcD5cbiAgICAgICAgICAgIDwvc2VjdGlvbj5cblxuICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwic2VjdGlvblwiPlxuICAgICAgICAgICAgICA8TWFpblRhZz5PcmRlcmluZyBwcm9jZWR1cmU8L01haW5UYWc+XG4gICAgICAgICAgICAgIDxIZWFkaW5nMz5Ib3cgSXQgV29ya3M8L0hlYWRpbmczPlxuICAgICAgICAgICAgICA8SG93PlxuICAgICAgICAgICAgICAgIDxIb3dMaXN0PlxuICAgICAgICAgICAgICAgICAgPEJvZHkzPlBsYWNlIGFuIG9yZGVyIGNob29zaW5nIG9wdGlvbnMgeW91IG5lZWQ8L0JvZHkzPlxuICAgICAgICAgICAgICAgIDwvSG93TGlzdD5cbiAgICAgICAgICAgICAgICA8SG93TGlzdD5cbiAgICAgICAgICAgICAgICAgIDxCb2R5Mz5cbiAgICAgICAgICAgICAgICAgICAgV2Ugd2lsbCBjb250YWN0IHlvdSB2aWEgb3VyIGxpdmUgY2hhdCBvciBieSBzZW5kaW5nIGFuIGVtYWlsLlxuICAgICAgICAgICAgICAgICAgICBBbGwgdGhlIGRldGFpbHMgd2lsbCBiZSBkaXNjdXNzZWQgYmVmb3JlaGFuZCBhbmQgdGhlIHN0YXJ0XG4gICAgICAgICAgICAgICAgICAgIHRpbWUgd2lsbCBiZSBzZXQgYWNjb3JkaW5nIHRvIHlvdXIgc2NoZWR1bGUuXG4gICAgICAgICAgICAgICAgICA8L0JvZHkzPlxuICAgICAgICAgICAgICAgIDwvSG93TGlzdD5cbiAgICAgICAgICAgICAgICA8SG93TGlzdD5cbiAgICAgICAgICAgICAgICAgIDxCb2R5Mz5QbGFjZSBhbiBvcmRlciBjaG9vc2luZyBvcHRpb25zIHlvdSBuZWVkPC9Cb2R5Mz5cbiAgICAgICAgICAgICAgICA8L0hvd0xpc3Q+XG4gICAgICAgICAgICAgIDwvSG93PlxuICAgICAgICAgICAgPC9zZWN0aW9uPlxuXG4gICAgICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJzZWN0aW9uXCI+XG4gICAgICAgICAgICAgIDxNYWluVGFnPkFib3V0IHRoaXMgaXRlbTwvTWFpblRhZz5cbiAgICAgICAgICAgICAgPEhlYWRpbmczPlByb2R1Y3QgRGVzY3JpcHRpb248L0hlYWRpbmczPlxuICAgICAgICAgICAgICA8RGVzYz5cbiAgICAgICAgICAgICAgICBUaGUgbGFzdCBib3NzIG9mIGV2ZXJ5IHJhaWQgaW4gV29XIGlzIHVzdWFsbHkgdmVyeSBkaWZmaWN1bHQgdG9cbiAgICAgICAgICAgICAgICBkZWZlYXQgZXZlbiBpbiBOb3JtYWwgbW9kZS4gSG93ZXZlciwgd2l0aCBwcm9wZXIgZ2VhciBhbmQgYW5cbiAgICAgICAgICAgICAgICBleHBlcmllbmNlZCB0ZWFtLCBpdCBpcyBtb3JlIHRoYW4gcmVhbC4gVG8gZGVmZWF0IFN5bHZhbmFzXG4gICAgICAgICAgICAgICAgV2luZHJ1bm5lciB5b3UgbmVlZCB0byBnZXQgdGhyb3VnaCAzIHBoYXNlcyBhbmQgYnJpbmcgU3lsdmFuYXNcbiAgICAgICAgICAgICAgICBoZWFsdGggZG93biB0byA1MCUuIEF0IG15dGhpYyBkaWZmaWN1bHR5IFNvRCBTeWx2YW5hcyBXaW5kcnVubmVyXG4gICAgICAgICAgICAgICAga2lsbCB3aWxsIGJlIGNvdW50ZWQgYXQgNDUlIG9mIGhlciBoZWFsdGgue1wiIFwifVxuICAgICAgICAgICAgICA8L0Rlc2M+XG4gICAgICAgICAgICAgIDxEZXNjPlxuICAgICAgICAgICAgICAgIFRoZSBsYXN0IGJvc3Mgb2YgZXZlcnkgcmFpZCBpbiBXb1cgaXMgdXN1YWxseSB2ZXJ5IGRpZmZpY3VsdCB0b1xuICAgICAgICAgICAgICAgIGRlZmVhdCBldmVuIGluIE5vcm1hbCBtb2RlLiBIb3dldmVyLCB3aXRoIHByb3BlciBnZWFyIGFuZCBhblxuICAgICAgICAgICAgICAgIGV4cGVyaWVuY2VkIHRlYW0sIGl0IGlzIG1vcmUgdGhhbiByZWFsLiBUbyBkZWZlYXQgU3lsdmFuYXNcbiAgICAgICAgICAgICAgICBXaW5kcnVubmVyIHlvdSBuZWVkIHRvIGdldCB0aHJvdWdoIDMgcGhhc2VzIGFuZCBicmluZyBTeWx2YW5hc1xuICAgICAgICAgICAgICAgIGhlYWx0aCBkb3duIHRvIDUwJS4gQXQgbXl0aGljIGRpZmZpY3VsdHkgU29EIFN5bHZhbmFzIFdpbmRydW5uZXJcbiAgICAgICAgICAgICAgICBraWxsIHdpbGwgYmUgY291bnRlZCBhdCA0NSUgb2YgaGVyIGhlYWx0aC57XCIgXCJ9XG4gICAgICAgICAgICAgIDwvRGVzYz5cbiAgICAgICAgICAgICAgPERlc2M+XG4gICAgICAgICAgICAgICAgVGhlIGxhc3QgYm9zcyBvZiBldmVyeSByYWlkIGluIFdvVyBpcyB1c3VhbGx5IHZlcnkgZGlmZmljdWx0IHRvXG4gICAgICAgICAgICAgICAgZGVmZWF0IGV2ZW4gaW4gTm9ybWFsIG1vZGUuIEhvd2V2ZXIsIHdpdGggcHJvcGVyIGdlYXIgYW5kIGFuXG4gICAgICAgICAgICAgICAgZXhwZXJpZW5jZWQgdGVhbSwgaXQgaXMgbW9yZSB0aGFuIHJlYWwuIFRvIGRlZmVhdCBTeWx2YW5hc1xuICAgICAgICAgICAgICAgIFdpbmRydW5uZXIgeW91IG5lZWQgdG8gZ2V0IHRocm91Z2ggMyBwaGFzZXMgYW5kIGJyaW5nIFN5bHZhbmFzXG4gICAgICAgICAgICAgICAgaGVhbHRoIGRvd24gdG8gNTAlLiBBdCBteXRoaWMgZGlmZmljdWx0eSBTb0QgU3lsdmFuYXMgV2luZHJ1bm5lclxuICAgICAgICAgICAgICAgIGtpbGwgd2lsbCBiZSBjb3VudGVkIGF0IDQ1JSBvZiBoZXIgaGVhbHRoLntcIiBcIn1cbiAgICAgICAgICAgICAgPC9EZXNjPlxuICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgIDwvU21hbGxDb250YWluZXI+XG5cblxuICAgICAgICAgIDxGZWVkYmFjaz5cbiAgICAgICAgICAgIDxDZW50ZXI+XG4gICAgICAgICAgICAgIDxNYWluVGFnPlJldmlldyBhbmQgRmVlZGJhY2s8L01haW5UYWc+XG4gICAgICAgICAgICAgIDxIZWFkaW5nMj5MZWF2ZSB1cyBhIGZlZWRiYWNrPC9IZWFkaW5nMj5cbiAgICAgICAgICAgICAgPEJvZHkzPllvdSBjYW4gbGVhdmUgaGVyZSBmZWVkYmFjayBhbmQgcmVhZCB1c2Vy4oCZcyByZXZpZXdzPC9Cb2R5Mz5cbiAgICAgICAgICAgIDwvQ2VudGVyPlxuXG4gICAgICAgICAgICA8UmF0aW5nPlxuICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICA8SGVhZGluZzI+NC45PC9IZWFkaW5nMj5cbiAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICA8aW1nIHNyYz17c3Rhcn0gYWx0PVwic3RhclwiIC8+XG4gICAgICAgICAgICAgIDxpbWcgc3JjPXtyYXRpbmdMb2dvfSBhbHQ9XCJcIiAvPlxuICAgICAgICAgICAgPC9SYXRpbmc+XG5cbiAgICAgICAgICAgIDxSZXZpZXdzPlxuICAgICAgICAgICAgICA8VGVsbFVzPlxuICAgICAgICAgICAgICAgIDxSZXZpZXdUaXRsZT5UZWxsIHVzIGFib3V0IHlvdXIgZXhwZXJpZW5jZTwvUmV2aWV3VGl0bGU+XG4gICAgICAgICAgICAgICAgPEJvZHk0PllvdXIgb3ZlcmFsbCByYXRpbmc8L0JvZHk0PlxuICAgICAgICAgICAgICAgIDxSYXRpbmdJbnB1dD5cbiAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtyYXRpbmdTdGFyfSBhbHQ9J2ljb24nIC8+XG4gICAgICAgICAgICAgICAgICA8aW1nIHNyYz17cmF0aW5nU3Rhcn0gYWx0PSdpY29uJyAvPlxuICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e3JhdGluZ1N0YXJ9IGFsdD0naWNvbicgLz5cbiAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtyYXRpbmdTdGFyfSBhbHQ9J2ljb24nIC8+XG4gICAgICAgICAgICAgICAgICA8aW1nIHNyYz17cmF0aW5nU3Rhcn0gYWx0PSdpY29uJyAvPlxuICAgICAgICAgICAgICAgIDwvUmF0aW5nSW5wdXQ+XG4gICAgICAgICAgICAgICAgPFJldmlld0Zvcm0+XG4gICAgICAgICAgICAgICAgICA8SW5wdXQgcGxhY2Vob2xkZXI9XCJUaXRsZVwiIHR5cGU9XCJ0ZXh0XCIgLz5cbiAgICAgICAgICAgICAgICAgIDxJbnB1dCBwbGFjZWhvbGRlcj1cIk5hbWVcIiB0eXBlPVwidGV4dFwiIC8+XG4gICAgICAgICAgICAgICAgICA8SW5wdXQgcGxhY2Vob2xkZXI9XCJFbWFpbFwiIHR5cGU9XCJlbWFpbFwiIC8+XG4gICAgICAgICAgICAgICAgICA8TWVzc2FnZSBwbGFjZWhvbGRlcj1cIlJldmlldyB0ZXh0XCIgLz5cbiAgICAgICAgICAgICAgICAgIDxCdXR0b25Db250YWluZXI+XG4gICAgICAgICAgICAgICAgICAgIDxCdG5TdWJtaXQ+U2VuZCBSZXZpZXc8L0J0blN1Ym1pdD5cbiAgICAgICAgICAgICAgICAgIDwvQnV0dG9uQ29udGFpbmVyPlxuICAgICAgICAgICAgICAgIDwvUmV2aWV3Rm9ybT5cbiAgICAgICAgICAgICAgPC9UZWxsVXM+XG5cbiAgICAgICAgICAgICAgPFJldmlld1RvdGFsPlxuICAgICAgICAgICAgICAgIDxSZXZpZXdUaXRsZT4yIG9mIDEzMiBSZXZpZXdzPC9SZXZpZXdUaXRsZT5cblxuICAgICAgICAgICAgICAgIDxSZXZpZXdDYXJkPlxuICAgICAgICAgICAgICAgICAgPEhlYWRpbmc2PkZhbnRhc3RpYyBKb2I8L0hlYWRpbmc2PlxuICAgICAgICAgICAgICAgICAgPEJvZHkzPlxuICAgICAgICAgICAgICAgICAgICBHb29kIHB1cmNoYXNlIExvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1clxuICAgICAgICAgICAgICAgICAgICBhZGlwaXNjaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kIHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZVxuICAgICAgICAgICAgICAgICAgICBldCBkb2xvcmUgbWFnbmEgYWxpcXVhLlxuICAgICAgICAgICAgICAgICAgPC9Cb2R5Mz5cbiAgICAgICAgICAgICAgICAgIDxWZXJpZmllZD5cbiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e2NoZWNrfSBhbHQ9XCJpY29uXCIgLz4gVmVyaWZpZWQgcHVyY2hhc2VkXG4gICAgICAgICAgICAgICAgICA8L1ZlcmlmaWVkPlxuICAgICAgICAgICAgICAgIDwvUmV2aWV3Q2FyZD5cbiAgICAgICAgICAgICAgICA8UmV2aWV3Q2FyZD5cbiAgICAgICAgICAgICAgICAgIDxIZWFkaW5nNj5GYW50YXN0aWMgSm9iPC9IZWFkaW5nNj5cbiAgICAgICAgICAgICAgICAgIDxCb2R5Mz5cbiAgICAgICAgICAgICAgICAgICAgR29vZCBwdXJjaGFzZSBMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXJcbiAgICAgICAgICAgICAgICAgICAgYWRpcGlzY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZCB0ZW1wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmVcbiAgICAgICAgICAgICAgICAgICAgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS5cbiAgICAgICAgICAgICAgICAgIDwvQm9keTM+XG4gICAgICAgICAgICAgICAgICA8VmVyaWZpZWQ+XG4gICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtjaGVja30gYWx0PVwiaWNvblwiIC8+IFZlcmlmaWVkIHB1cmNoYXNlZFxuICAgICAgICAgICAgICAgICAgPC9WZXJpZmllZD5cbiAgICAgICAgICAgICAgICA8L1Jldmlld0NhcmQ+XG4gICAgICAgICAgICAgIDwvUmV2aWV3VG90YWw+XG4gICAgICAgICAgICA8L1Jldmlld3M+XG4gICAgICAgICAgPC9GZWVkYmFjaz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L01haW5SaWdodD5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoUHJvZHVjdFNsaWRlcik7XG5cbmNvbnN0IE1haW5SaWdodCA9IHN0eWxlZC5kaXZgXG4gIG1hcmdpbi1sZWZ0OiAzNzVweDtcbiAgd2lkdGg6IGNhbGMoMTAwJSAtIDM3NXB4KTtcblxuICAmIGlucHV0IHtcbiAgICB3aWR0aDogMTAwJTtcbiAgfVxuYDtcblxuY29uc3QgQ29udGVudFNsaWRlID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC13cmFwOiB3cmFwO1xuYDtcblxuY29uc3QgUG9zaXRpb25zID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZ2FwOiAyMHB4O1xuICBtYXJnaW4tdG9wOiA0MHB4O1xuXG4gICYgc2VsZWN0IHtcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgIHdpZHRoOiAxMDAlO1xuICB9XG5gO1xuXG5jb25zdCBQb3NpdGlvbiA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIHdpZHRoOiAzMDBweDtcblxuICAmIGltZyB7XG4gICAgbWFyZ2luOiA0MHB4IDAgNTBweCAwO1xuICB9XG5gO1xuXG5jb25zdCBCYXNrZXQgPSBzdHlsZWQuZGl2YFxuICBib3JkZXItcmFkaXVzOiAxMnB4O1xuICBib3gtc2hhZG93OiAwcHggNHB4IDMwcHggMHB4ICMzMjMyMzIxYTtcbiAgbWluLXdpZHRoOiAzMDBweDtcbmA7XG5cbmNvbnN0IEhlYWRlciA9IHN0eWxlZC5kaXZgXG4gIGJhY2tncm91bmQ6IHVybCgke2JnQmFza2V0fSkgbm8tcmVwZWF0O1xuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xuICBwYWRkaW5nOiAyMHB4O1xuICBjb2xvcjogI2ZmZjtcbiAgYm9yZGVyLXJhZGl1czogMTJweDtcbmA7XG5cbmNvbnN0IEJhc2tldEJvZHkgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiAyMHB4O1xuYDtcblxuY29uc3QgQkJJbmZvID0gc3R5bGVkLmRpdmBcbiAgcGFkZGluZy1ib3R0b206IDEwcHg7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZWJlZmY4O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5cbiAgJiBoNiB7XG4gICAgY29sb3I6IHZhcigtLXRleHQtZGFyayk7XG4gIH1cbmA7XG5cbmNvbnN0IEJCVGl0bGUgPSBzdHlsZWQoSGVhZGluZzcpYFxuICBtYXJnaW4tYm90dG9tOiA2cHg7XG4gIGNvbG9yOiB2YXIoLS1wcmltYXJ5LXByZXNzZWQpO1xuYDtcblxuY29uc3QgQkJEZXRhaWwgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIG1hcmdpbi10b3A6IDEwcHg7XG5gO1xuXG5jb25zdCBFeHRyYU9wdGlvbnMgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBnYXA6IDE0cHg7XG4gIG1hcmdpbjogMjBweCAwO1xuYDtcblxuY29uc3QgRXh0cmEgPSBzdHlsZWQuc3BhbmBcbiAgcGFkZGluZzogMTZweCAyNnB4O1xuICBib3JkZXItcmFkaXVzOiAxMnB4O1xuICBiYWNrZ3JvdW5kOiAjZWJlZmY4O1xuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuYDtcblxuY29uc3QgRXh0cmFJbmZvID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgZGlzcGxheTogZmxleDtcbmA7XG5cbmNvbnN0IFdoYXRZb3VXcmFwID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZ2FwOiA3MHB4O1xuICBtYXJnaW4tdG9wOiAyMHB4O1xuYDtcblxuY29uc3QgV2hhdFlvdSA9IHN0eWxlZC5kaXZgXG4gICYgaW1nIHtcbiAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICB9XG5gO1xuXG5jb25zdCBIb3cgPSBzdHlsZWQudWxgXG4gIG1hcmdpbi10b3A6IDIwcHg7XG4gIGNvdW50ZXItcmVzZXQ6IGNvdW50ZXItbGlzdDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBwYWRkaW5nOiAwO1xuYDtcblxuY29uc3QgSG93TGlzdCA9IHN0eWxlZC5saWBcbiAgbWFyZ2luOiAwIDAgMjBweCA0MHB4O1xuICBsaXN0LXN0eWxlOiBub25lO1xuXG4gICY6OmJlZm9yZSB7XG4gICAgY291bnRlci1pbmNyZW1lbnQ6IGNvdW50ZXItbGlzdDtcbiAgICBjb250ZW50OiBjb3VudGVyKGNvdW50ZXItbGlzdCk7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGxlZnQ6IDA7XG4gICAgYmFja2dyb3VuZDogdXJsKCR7Y291bnR9KTtcbiAgICBib3JkZXItcmFkaXVzOiA4cHg7XG4gICAgd2lkdGg6IDI2cHg7XG4gICAgaGVpZ2h0OiAyNnB4O1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgICBjb2xvcjogIzU0NzllNTtcbiAgfVxuYDtcblxuY29uc3QgRGVzYyA9IHN0eWxlZChCb2R5MylgXG4gIG1hcmdpbi10b3A6IDIwcHg7XG4gIGRpc3BsYXk6IGJsb2NrO1xuYDtcblxuY29uc3QgRmVlZGJhY2sgPSBzdHlsZWQuc2VjdGlvbmBcbiAgbWFyZ2luLXRvcDogMTIwcHg7XG5gO1xuXG5jb25zdCBSYXRpbmcgPSBzdHlsZWQuZGl2YFxuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoXG4gICAgMTA0LjIyZGVnLFxuICAgICNlYmYzZmYgOC40NCUsXG4gICAgcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpIDU5LjU1JSxcbiAgICAjZjRlNmZmIDEwMy42MyVcbiAgKTtcbiAgYmFja2Ryb3AtZmlsdGVyOiBibHVyKDMwcHgpO1xuICAvKiBOb3RlOiBiYWNrZHJvcC1maWx0ZXIgaGFzIG1pbmltYWwgYnJvd3NlciBzdXBwb3J0ICovXG4gIGJvcmRlci1yYWRpdXM6IDMwcHg7XG4gIHBhZGRpbmc6IDIwcHg7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgd2lkdGg6IDQwMHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBnYXA6IDIwcHg7XG4gIG1hcmdpbjogNDBweCBhdXRvO1xuYDtcblxuY29uc3QgUmV2aWV3cyA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGdhcDogOTBweDtcbiAgbWFyZ2luLXRvcDogNDBweDtcbmA7XG5cbmNvbnN0IFRlbGxVcyA9IHN0eWxlZC5kaXZgYDtcblxuY29uc3QgUmF0aW5nSW5wdXQgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBnYXA6IDVweDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbmBcblxuY29uc3QgUmV2aWV3VGl0bGUgPSBzdHlsZWQoSGVhZGluZzQpYFxuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuYDtcblxuY29uc3QgUmV2aWV3Rm9ybSA9IHN0eWxlZC5mb3JtYFxuICBtYXJnaW4tdG9wOiAyMHB4O1xuYDtcblxuY29uc3QgTWVzc2FnZSA9IHN0eWxlZC50ZXh0YXJlYWBcbiAgYm9yZGVyOiBub25lO1xuICB3aWR0aDogMTAwJTtcbiAgYmFja2dyb3VuZDogI2ViZWZmODtcbiAgYm9yZGVyLXJhZGl1czogNnB4O1xuICBwYWRkaW5nOiAxMHB4O1xuICBmb250LWZhbWlseTogaW5oZXJpdDtcbmA7XG5cbmNvbnN0IEJ0blN1Ym1pdCA9IHN0eWxlZChCdG5QcmltYXJ5KWBgO1xuXG5jb25zdCBSZXZpZXdUb3RhbCA9IHN0eWxlZChUZWxsVXMpYGA7XG5cbmNvbnN0IFJldmlld0NhcmQgPSBzdHlsZWQuZGl2YFxuICBtYXJnaW4tYm90dG9tOiAzMHB4O1xuYDtcblxuY29uc3QgVmVyaWZpZWQgPSBzdHlsZWQuZGl2YFxuICBjb2xvcjogIzE2OTY0OTtcbiAgbWFyZ2luLXRvcDogMTBweDtcbiAgZGlzcGxheTogZmxleDtcbiAgZ2FwOiAxMHB4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuYDtcbiJdfQ== */\");const ReviewCard=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1iq9jn91\",label:\"ReviewCard\"})( false?undefined:{name:\"g46w8s\",styles:\"margin-bottom:30px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Verified=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1iq9jn90\",label:\"Verified\"})( false?undefined:{name:\"puvu8e\",styles:\"color:#169649;margin-top:10px;display:flex;gap:10px;align-items:center\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/lb/src/components/product/product-slider.js\n");

/***/ })

})