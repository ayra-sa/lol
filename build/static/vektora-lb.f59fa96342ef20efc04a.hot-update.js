webpackHotUpdate("vektora-lb",{

/***/ "./packages/lb/src/components/blog/blog-detail.js":
/*!********************************************************!*\
  !*** ./packages/lb/src/components/blog/blog-detail.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _typography_text__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../typography/text */ \"./packages/lb/src/components/typography/text.js\");\n/* harmony import */ var _images_latest_img_png__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../images/latest-img.png */ \"./packages/lb/src/components/images/latest-img.png\");\n/* harmony import */ var _buttons_button_primary__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../buttons/button-primary */ \"./packages/lb/src/components/buttons/button-primary.js\");\n/* harmony import */ var _typography_main_tag__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../typography/main-tag */ \"./packages/lb/src/components/typography/main-tag.js\");\n/* harmony import */ var _buttons_button_container__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../buttons/button-container */ \"./packages/lb/src/components/buttons/button-container.js\");\n/* harmony import */ var _other_divider__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../other/divider */ \"./packages/lb/src/components/other/divider.js\");\n/* harmony import */ var _images_icons_like_svg__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../images/icons/like.svg */ \"./packages/lb/src/components/images/icons/like.svg\");\n/* harmony import */ var _images_icons_unlike_svg__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../images/icons/unlike.svg */ \"./packages/lb/src/components/images/icons/unlike.svg\");\n/* harmony import */ var _frontity_components_link__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @frontity/components/link */ \"./node_modules/@frontity/components/link/index.tsx\");\n/* harmony import */ var _typography_special_tag__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../typography/special-tag */ \"./packages/lb/src/components/typography/special-tag.js\");\n/* harmony import */ var _queries__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../queries */ \"./packages/lb/src/components/queries.js\");\n/* harmony import */ var _contianer_wrap__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../contianer/wrap */ \"./packages/lb/src/components/contianer/wrap.js\");\n/* harmony import */ var _typography_decor_title__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../typography/decor-title */ \"./packages/lb/src/components/typography/decor-title.js\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}// import { BsChatSquareFill } from \"react-icons/bs\";\nconst BlogDetail=()=>{return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"Fragment\"],{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(BlogDetailWrap,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Heading2\"],{children:\"Get the Baby Murloc Satch-Shells Transmog with the Purchase of a 6-Month Subscription!\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Body1\"],{children:\"Introducing the eggcelent Baby Murloc Satch-Shells transmog \\u2014 now available to add to your collection! You\\u2019ll be able to carry this adorable back-slot transmog item everywhere you go when you purchase in-game or from the Blizzard Shop.\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(Info,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Date,{children:\"23.12.2021\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Author,{children:\"by James Smith\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Comment,{children:\"212\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(BDetailImage,{src:_images_latest_img_png__WEBPACK_IMPORTED_MODULE_3__[\"default\"],alt:\"blog\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Heading4\"],{children:\"A group of Activision Blizzard workers officially announced a strike fund Thursday morning following two days of walkouts in support of quality assurance\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Body3\"],{children:\"The group, called ABK Workers\\u2019 Alliance, came together in July after California\\u2019s Department of Fair Employment and Housing (DFEH) filed a lawsuit preceded by a two-year investigation into the company\\u2019s alleged \\u201Cfrat boy culture.\\u201D Activision Blizzard workers are not officially unionized, which means that the strike, initiated Thursday, will not have union protections. The group is being assisted by the Communication Workers of America, the Washington Post reported. Employees began signing union cards Thursday in an effort to get the group recognized, according to the report. It\\u2019s unclear how many workers are participating in the strike, which has been ongoing since Monday. More than 1,700 contracted workers and employees signed a petition in November demanding that CEO Bobby Kotick resign.\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(BDetailImage,{src:_images_latest_img_png__WEBPACK_IMPORTED_MODULE_3__[\"default\"],alt:\"blog\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Body3\"],{children:\"Image: Allen J. Schaben/Los Angeles Times/Getty Images\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(_other_divider__WEBPACK_IMPORTED_MODULE_7__[\"Divider\"],{}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(Content,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Heading4\"],{children:\"Where they are raising money for a strike fund, ABK Workers\\u2019 Alliance leaders said Activision Blizzard leadership has only continued to ignore demands\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Body3\"],{children:\"Some QA workers at Activision Blizzard and its subsidiaries have walked out of work each day since Monday, in protest of layoffs last week. (Activision Blizzard doesn\\u2019t characterize these job losses as layoffs, however: The company said that these people were temporary contract workers, not employees, and that it was not renewing their contracts.) Activision Blizzard is in the process of converting 500 temporary jobs to full-time status, the company said \\u2014 though the group of Raven Software QA workers were not part of that initiative.\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(Content,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Heading4\"],{children:\"\\u201CWe are all disposable to this company,\\u201D one striking worker told Polygon. \\u201CWe need to band together or we will never get anywhere. [...] If I lose my job due to unionizing, fine, but I\\u2019d rather make this place worth working here.\\u201D\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Body3\"],{children:\"The video game industry has been moving slowly toward unionization over the past few years, but no company in the United States has become officially recognized. Last year, a group of workers that write for mobile app Lovestruck: Choose Your Romance banded together for a 21-day strike \\u2014 and won. It was the first successful game worker strike in the industry history.\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(_other_divider__WEBPACK_IMPORTED_MODULE_7__[\"Divider\"],{}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(Comments,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Heading3\"],{children:\"212 comments to this article:\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(CommentBox,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Name,{children:\"Mark Jacobs\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Body3\"],{children:\"While I\\u2019m still not sure unionization will have the desired effect re: abuse of female employees(given that that\\u2019s a case of majority employees abusing a minority), it definitely will in terms of crunch and maintaining permanent positions vs. contract labor. Overall, I hope they succeed.\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(CommentAction,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Date,{children:\"23.12.2021\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(CommentReact,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(Like,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"img\",{src:_images_icons_like_svg__WEBPACK_IMPORTED_MODULE_8__[\"default\"],alt:\"icon\"}),\"212\"]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(Unlike,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"img\",{src:_images_icons_unlike_svg__WEBPACK_IMPORTED_MODULE_9__[\"default\"],alt:\"icon\"}),\"212\"]})]})]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(CommentBox,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Name,{children:\"Mark Jacobs\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Body3\"],{children:\"While I\\u2019m still not sure unionization will have the desired effect re: abuse of female employees(given that that\\u2019s a case of majority employees abusing a minority), it definitely will in terms of crunch and maintaining permanent positions vs. contract labor. Overall, I hope they succeed.\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(CommentAction,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Date,{children:\"23.12.2021\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(CommentReact,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(Like,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"img\",{src:_images_icons_like_svg__WEBPACK_IMPORTED_MODULE_8__[\"default\"],alt:\"icon\"}),\"212\"]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(Unlike,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"img\",{src:_images_icons_unlike_svg__WEBPACK_IMPORTED_MODULE_9__[\"default\"],alt:\"icon\"}),\"212\"]})]})]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(CommentBox,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Name,{children:\"Mark Jacobs\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Body3\"],{children:\"While I\\u2019m still not sure unionization will have the desired effect re: abuse of female employees(given that that\\u2019s a case of majority employees abusing a minority), it definitely will in terms of crunch and maintaining permanent positions vs. contract labor. Overall, I hope they succeed.\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(CommentAction,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Date,{children:\"23.12.2021\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(CommentReact,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(Like,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"img\",{src:_images_icons_like_svg__WEBPACK_IMPORTED_MODULE_8__[\"default\"],alt:\"icon\"}),\"212\"]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(Unlike,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"img\",{src:_images_icons_unlike_svg__WEBPACK_IMPORTED_MODULE_9__[\"default\"],alt:\"icon\"}),\"212\"]})]})]})]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(_buttons_button_container__WEBPACK_IMPORTED_MODULE_6__[\"ButtonContainer\"],{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(_buttons_button_primary__WEBPACK_IMPORTED_MODULE_4__[\"BtnPrimary\"],{children:\"load 10 more Comments\"})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(Opinion,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(_typography_main_tag__WEBPACK_IMPORTED_MODULE_5__[\"MainTag\"],{children:\"Leave your opinion\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Heading3\"],{children:\"Have something to say?\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(Form,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(TopInput,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Input,{placeholder:\"Name\",type:\"text\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Input,{placeholder:\"Email\",type:\"email\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Message,{placeholder:\"Your comment\"})]})]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"div\",{className:\"container\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(BlogBtm,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(_contianer_wrap__WEBPACK_IMPORTED_MODULE_13__[\"Wrap\"],{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(_typography_main_tag__WEBPACK_IMPORTED_MODULE_5__[\"MainTag\"],{children:\"Related articles\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(_typography_decor_title__WEBPACK_IMPORTED_MODULE_14__[\"DecorTitle2\"],{children:\"You can also like to read\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(BlogRelated,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(BlogCard,{link:\"/detail\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(BlogTop,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Label,{children:\"WOW\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(BlogImage,{src:_images_latest_img_png__WEBPACK_IMPORTED_MODULE_3__[\"default\"],alt:\"blog\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(BlogInfo,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Body2\"],{children:\"12 Nov 2021\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(CommentThumb,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"span\",{children:\"212\"})})]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(BlogDet,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Heading3\"],{children:\"Get the Baby Murloc Satch-Shells Transmog with the Purchase of a 6-Month Subscription!\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Body3\"],{children:\"Introducing the eggcelent Baby Murloc Satch-Shells transmog*\\u2014 now available to add to your collection! You\\u2019ll be able to carry this adorable...\"})]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(BlogCard,{link:\"/detail\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(BlogTop,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Label,{children:\"WOW\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(BlogImage,{src:_images_latest_img_png__WEBPACK_IMPORTED_MODULE_3__[\"default\"],alt:\"blog\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(BlogInfo,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Body2\"],{children:\"12 Nov 2021\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(CommentThumb,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"span\",{children:\"212\"})})]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(BlogDet,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Heading3\"],{children:\"Get the Baby Murloc Satch-Shells Transmog with the Purchase of a 6-Month Subscription!\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Body3\"],{children:\"Introducing the eggcelent Baby Murloc Satch-Shells transmog*\\u2014 now available to add to your collection! You\\u2019ll be able to carry this adorable...\"})]})]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(_buttons_button_container__WEBPACK_IMPORTED_MODULE_6__[\"ButtonContainer\"],{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(_buttons_button_primary__WEBPACK_IMPORTED_MODULE_4__[\"BtnPrimary\"],{children:\"Read More News\"})})]})})]});};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"connect\"])(BlogDetail));const BlogDetailWrap=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1pyb6r227\",label:\"BlogDetailWrap\"})(\"width:80%;margin-top:140px;margin-inline:auto;@media \",_queries__WEBPACK_IMPORTED_MODULE_12__[\"device\"].laptop,\"{width:50%;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const Info=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1pyb6r226\",label:\"Info\"})( false?undefined:{name:\"16c6p92\",styles:\"display:flex;align-items:center;margin-top:20px;color:#6e7687\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Date=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Body3\"], false?undefined:{target:\"e1pyb6r225\",label:\"Date\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");const Author=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Body3\"], false?undefined:{target:\"e1pyb6r224\",label:\"Author\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");const Comment=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1pyb6r223\",label:\"Comment\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");const BDetailImage=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"img\", false?undefined:{target:\"e1pyb6r222\",label:\"BDetailImage\"})( false?undefined:{name:\"nsqp27\",styles:\"margin:40px 0 20px 0;border-radius:20px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Content=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1pyb6r221\",label:\"Content\"})( false?undefined:{name:\"iqoq9n\",styles:\"margin-top:20px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Comments=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1pyb6r220\",label:\"Comments\"})( false?undefined:{name:\"1gdbrxn\",styles:\"margin:60px 0 40px 0\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const CommentBox=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1pyb6r219\",label:\"CommentBox\"})( false?undefined:{name:\"93cl9x\",styles:\"margin-top:20px;padding:20px 0;border-bottom:1px solid #d0d5df\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Name=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Heading4\"], false?undefined:{target:\"e1pyb6r218\",label:\"Name\"})( false?undefined:{name:\"1azpx8r\",styles:\"margin-bottom:20px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const CommentAction=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1pyb6r217\",label:\"CommentAction\"})( false?undefined:{name:\"6vkeaj\",styles:\"margin-top:20px;display:flex;justify-content:space-between\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const CommentReact=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1pyb6r216\",label:\"CommentReact\"})( false?undefined:{name:\"zwbqmk\",styles:\"display:flex;gap:20px;align-items:center\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Like=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1pyb6r215\",label:\"Like\"})( false?undefined:{name:\"1henvxi\",styles:\"display:flex;gap:10px;background:linear-gradient(89.67deg, #5479E6 0.26%, #6B7AFF 99.71%);-webkit-background-clip:text;-webkit-text-fill-color:transparent;background-clip:text;align-items:center\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Unlike=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(Like, false?undefined:{target:\"e1pyb6r214\",label:\"Unlike\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");const Opinion=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1pyb6r213\",label:\"Opinion\"})( false?undefined:{name:\"nofe95\",styles:\"margin-top:100px;text-align:center\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Form=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"form\", false?undefined:{target:\"e1pyb6r212\",label:\"Form\"})( false?undefined:{name:\"rw9byj\",styles:\"margin:40px 0;width:100%\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const TopInput=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1pyb6r211\",label:\"TopInput\"})( false?undefined:{name:\"yu6za6\",styles:\"display:flex;align-items:center;gap:20px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Input=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"input\", false?undefined:{target:\"e1pyb6r210\",label:\"Input\"})( false?undefined:{name:\"10i8fw\",styles:\"background:#ebeff8;border-radius:6px;padding:10px;border:none;margin-bottom:20px;width:-webkit-fill-available\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Message=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"textarea\", false?undefined:{target:\"e1pyb6r29\",label:\"Message\"})( false?undefined:{name:\"oapbud\",styles:\"background:#ebeff8;border-radius:6px;padding:10px;border:none;margin-bottom:20px;font-family:inherit;width:-webkit-fill-available\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const BlogBtm=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"section\", false?undefined:{target:\"e1pyb6r28\",label:\"BlogBtm\"})( false?undefined:{name:\"30tvht\",styles:\"margin-bottom:60px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const BlogRelated=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1pyb6r27\",label:\"BlogRelated\"})(\"margin-top:20px;display:flex;gap:90px;flex-direction:column;@media \",_queries__WEBPACK_IMPORTED_MODULE_12__[\"device\"].laptop,\"{flex-direction:row;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const BlogCard=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(_frontity_components_link__WEBPACK_IMPORTED_MODULE_10__[\"default\"], false?undefined:{target:\"e1pyb6r26\",label:\"BlogCard\"})( false?undefined:{name:\"6zqw5b\",styles:\"border-radius:20px;cursor:pointer\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const BlogTop=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1pyb6r25\",label:\"BlogTop\"})( false?undefined:{name:\"zkwklk\",styles:\"position:relative;display:flex;width:auto\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Label=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(_typography_special_tag__WEBPACK_IMPORTED_MODULE_11__[\"Special\"], false?undefined:{target:\"e1pyb6r24\",label:\"Label\"})( false?undefined:{name:\"7923ex\",styles:\"position:absolute;inset:30px auto auto 30px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const BlogImage=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"img\", false?undefined:{target:\"e1pyb6r23\",label:\"BlogImage\"})( false?undefined:{name:\"1677pwn\",styles:\"border-radius:20px;height:100%\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const BlogInfo=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1pyb6r22\",label:\"BlogInfo\"})( false?undefined:{name:\"r9gljl\",styles:\"color:#fff;position:absolute;z-index:2;inset:auto 0 0 0;padding:30px;display:flex;align-items:center;margin-top:auto;justify-content:space-between;& span,p{color:#fff;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const CommentThumb=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1pyb6r21\",label:\"CommentThumb\"})( false?undefined:{name:\"oeyoyo\",styles:\"display:flex;align-items:center;column-gap:10px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const BlogDet=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1pyb6r20\",label:\"BlogDet\"})( false?undefined:{name:\"iqoq9n\",styles:\"margin-top:20px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/lb/src/components/blog/blog-detail.js\n");

/***/ })

})