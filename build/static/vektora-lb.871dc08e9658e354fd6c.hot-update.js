webpackHotUpdate("vektora-lb",{

/***/ "./packages/lb/src/components/product/product-slider.js":
/*!**************************************************************!*\
  !*** ./packages/lb/src/components/product/product-slider.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _other_divider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../other/divider */ \"./packages/lb/src/components/other/divider.js\");\n/* harmony import */ var _sidebar_nav__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../sidebar-nav */ \"./packages/lb/src/components/sidebar-nav.js\");\n/* harmony import */ var _typography_main_tag__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../typography/main-tag */ \"./packages/lb/src/components/typography/main-tag.js\");\n/* harmony import */ var _typography_text__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../typography/text */ \"./packages/lb/src/components/typography/text.js\");\n/* harmony import */ var _images_star_rating_png__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../images/star-rating.png */ \"./packages/lb/src/components/images/star-rating.png\");\n/* harmony import */ var _images_Trustpilot_png__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../images/Trustpilot.png */ \"./packages/lb/src/components/images/Trustpilot.png\");\n/* harmony import */ var _buttons_button_container__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../buttons/button-container */ \"./packages/lb/src/components/buttons/button-container.js\");\n/* harmony import */ var _typography_center__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../typography/center */ \"./packages/lb/src/components/typography/center.js\");\n/* harmony import */ var _buttons_button_primary__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../buttons/button-primary */ \"./packages/lb/src/components/buttons/button-primary.js\");\n/* harmony import */ var _images_order_item_png__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../images/order/item.png */ \"./packages/lb/src/components/images/order/item.png\");\n/* harmony import */ var _form_input__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../form/input */ \"./packages/lb/src/components/form/input.js\");\n/* harmony import */ var _images_slider_what_svg__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../images/slider/what.svg */ \"./packages/lb/src/components/images/slider/what.svg\");\n/* harmony import */ var _images_slider_card_count_png__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../images/slider/card-count.png */ \"./packages/lb/src/components/images/slider/card-count.png\");\n/* harmony import */ var _images_icons_verified_svg__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../images/icons/verified.svg */ \"./packages/lb/src/components/images/icons/verified.svg\");\n/* harmony import */ var _images_icons_star_rating_svg__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../images/icons/star-rating.svg */ \"./packages/lb/src/components/images/icons/star-rating.svg\");\n/* harmony import */ var _images_slider_bg_basket_png__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../images/slider/bg-basket.png */ \"./packages/lb/src/components/images/slider/bg-basket.png\");\n/* harmony import */ var _breadcrumbs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../breadcrumbs */ \"./packages/lb/src/components/breadcrumbs.js\");\n/* harmony import */ var _contianer_small_container__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../contianer/small-container */ \"./packages/lb/src/components/contianer/small-container.js\");\n/* harmony import */ var _queries__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../queries */ \"./packages/lb/src/components/queries.js\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}const ProductSlider=()=>{return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"Fragment\"],{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_sidebar_nav__WEBPACK_IMPORTED_MODULE_3__[\"default\"],{}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(MainRight,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(\"div\",{className:\"container\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(\"section\",{className:\"section\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_breadcrumbs__WEBPACK_IMPORTED_MODULE_18__[\"default\"],{}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading2\"],{children:\"We offer to buy booster for your account\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Body3\"],{children:[\"Lol Boosting provides cheap WoW boosting of all types: character or PvP boosting, raid or dungeons carry, Powerleveling, farming & many more to save your time. Book a slot in our live chat and enjoy WoW boost!\",\" \"]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(ContentSlide,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(Positions,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(Position,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading4\"],{children:\"Current Position\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(\"img\",{src:_images_order_item_png__WEBPACK_IMPORTED_MODULE_11__[\"default\"],alt:\"item\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Select\"],{name:\"position\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Option\"],{value:\"iron\",children:\"Iron\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Option\"],{value:\"platinum\",children:\"Platinum\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Select\"],{name:\"division\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Option\"],{value:\"division 4\",children:\"Division 4\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Option\"],{value:\"division 5\",children:\"Division 5\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Select\"],{name:\"LP\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Option\"],{value:\"lp 20\",children:\"LP 0-20\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Option\"],{value:\"lp 30\",children:\"LP 0-30\"})]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(Position,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading4\"],{children:\"Desired Position\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(\"img\",{src:_images_order_item_png__WEBPACK_IMPORTED_MODULE_11__[\"default\"],alt:\"item\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Select\"],{name:\"position\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Option\"],{value:\"platinum\",children:\"Platinum\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Option\"],{value:\"iron\",children:\"Iron\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Select\"],{name:\"division\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Option\"],{value:\"division 4\",children:\"Division 4\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Option\"],{value:\"division 5\",children:\"Division 5\"})]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(Position,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading4\"],{children:\"Select Server\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(\"img\",{src:_images_order_item_png__WEBPACK_IMPORTED_MODULE_11__[\"default\"],alt:\"item\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Select\"],{name:\"server\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Option\"],{value:\"euw\",children:\"EUW\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Option\"],{value:\"eus\",children:\"EUS\"})]})]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(Basket,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(Header,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading4\"],{children:\"My Order\"})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(BasketBody,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(BBInfo,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(BBTitle,{children:\"Completion Time\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading6\"],{children:\"1 Day\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(BBInfo,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(BBTitle,{children:\"Extra Options\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading6\"],{children:\"Champion ($5)\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading6\"],{children:\"Champion ($5)\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(BBInfo,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(BBTitle,{children:\"You Earn\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading6\"],{children:\"12 Fox Coins (1.4$)\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(BBDetail,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(BBTitle,{children:\"Final Price\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading3\"],{children:\"$34\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_buttons_button_container__WEBPACK_IMPORTED_MODULE_8__[\"ButtonContainer\"],{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_buttons_button_primary__WEBPACK_IMPORTED_MODULE_10__[\"BtnPrimary\"],{children:\"Rank Up\"})})]})]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_other_divider__WEBPACK_IMPORTED_MODULE_2__[\"Divider\"],{})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(_contianer_small_container__WEBPACK_IMPORTED_MODULE_19__[\"SmallContainer\"],{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(\"section\",{className:\"section\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_typography_main_tag__WEBPACK_IMPORTED_MODULE_4__[\"MainTag\"],{children:\"Some addings for you \"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading3\"],{children:\"Extra Options\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Body3\"],{children:[\"Lol Boosting provides cheap WoW boosting of all types: character or PvP boosting, raid or dungeons carry, Powerleveling, farming & many more to save your time. Book a slot in our live chat and enjoy WoW boost!\",\" \"]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(ExtraOptions,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(Extra,{children:\"Spell Buttons\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(Extra,{children:\"Spell Buttons\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(Extra,{children:\"Spell Buttons\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(Extra,{children:\"Spell Buttons\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(Extra,{children:\"Spell Buttons\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(ExtraInfo,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Body3\"],{children:\"This option +10% to final price \"})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Body3\"],{children:\"Would you like to see how a Challenger player plays on your account in your elo? By enabling this option we will set up a private stream specifically for you! Your booster will also be able to chat with you, provide you rank up images and send you VODs / recordings of the games played. Your replays will be sent to you after order completion on your e-mail. If you wish us to send them to you, please write it in the notes or notify us before we initiate your order.\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(\"section\",{className:\"section\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_typography_main_tag__WEBPACK_IMPORTED_MODULE_4__[\"MainTag\"],{children:\"Some addings for you \"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading3\"],{children:\"What You Will Get\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(WhatYouWrap,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(WhatYou,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(\"img\",{src:_images_slider_what_svg__WEBPACK_IMPORTED_MODULE_13__[\"default\"],alt:\"icon\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading4\"],{children:\"Pre Ranked\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Body3\"],{children:\"Lol Boosting provides cheap WoW boosting of all types: character or PvP boosting, raid or dungeons carry, Powerleveling, farming & many more\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(WhatYou,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(\"img\",{src:_images_slider_what_svg__WEBPACK_IMPORTED_MODULE_13__[\"default\"],alt:\"icon\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading4\"],{children:\"Pre Ranked\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Body3\"],{children:\"Lol Boosting provides cheap WoW boosting of all types: character or PvP boosting, raid or dungeons carry, Powerleveling, farming & many more\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(WhatYou,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(\"img\",{src:_images_slider_what_svg__WEBPACK_IMPORTED_MODULE_13__[\"default\"],alt:\"icon\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading4\"],{children:\"Pre Ranked\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Body3\"],{children:\"Lol Boosting provides cheap WoW boosting of all types: character or PvP boosting, raid or dungeons carry, Powerleveling, farming & many more\"})]})]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(\"section\",{className:\"section\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_typography_main_tag__WEBPACK_IMPORTED_MODULE_4__[\"MainTag\"],{children:\"Ordering procedure\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading3\"],{children:\"How It Works\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(How,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(HowList,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Body3\"],{children:\"Place an order choosing options you need\"})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(HowList,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Body3\"],{children:\"We will contact you via our live chat or by sending an email. All the details will be discussed beforehand and the start time will be set according to your schedule.\"})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(HowList,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Body3\"],{children:\"Place an order choosing options you need\"})})]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(\"section\",{className:\"section\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_typography_main_tag__WEBPACK_IMPORTED_MODULE_4__[\"MainTag\"],{children:\"About this item\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading3\"],{children:\"Product Description\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(Desc,{children:[\"The last boss of every raid in WoW is usually very difficult to defeat even in Normal mode. However, with proper gear and an experienced team, it is more than real. To defeat Sylvanas Windrunner you need to get through 3 phases and bring Sylvanas health down to 50%. At mythic difficulty SoD Sylvanas Windrunner kill will be counted at 45% of her health.\",\" \"]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(Desc,{children:[\"The last boss of every raid in WoW is usually very difficult to defeat even in Normal mode. However, with proper gear and an experienced team, it is more than real. To defeat Sylvanas Windrunner you need to get through 3 phases and bring Sylvanas health down to 50%. At mythic difficulty SoD Sylvanas Windrunner kill will be counted at 45% of her health.\",\" \"]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(Desc,{children:[\"The last boss of every raid in WoW is usually very difficult to defeat even in Normal mode. However, with proper gear and an experienced team, it is more than real. To defeat Sylvanas Windrunner you need to get through 3 phases and bring Sylvanas health down to 50%. At mythic difficulty SoD Sylvanas Windrunner kill will be counted at 45% of her health.\",\" \"]})]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(Feedback,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(_typography_center__WEBPACK_IMPORTED_MODULE_9__[\"Center\"],{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_typography_main_tag__WEBPACK_IMPORTED_MODULE_4__[\"MainTag\"],{children:\"Review and Feedback\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading2\"],{children:\"Leave us a feedback\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Body3\"],{children:\"You can leave here feedback and read user\\u2019s reviews\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(Rating,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(\"p\",{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading2\"],{children:\"4.9\"})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(\"img\",{src:_images_star_rating_png__WEBPACK_IMPORTED_MODULE_6__[\"default\"],alt:\"star\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(\"img\",{src:_images_Trustpilot_png__WEBPACK_IMPORTED_MODULE_7__[\"default\"],alt:\"\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(Reviews,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(TellUs,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(ReviewTitle,{children:\"Tell us about your experience\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Body4\"],{children:\"Your overall rating\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(RatingInput,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(\"img\",{src:_images_icons_star_rating_svg__WEBPACK_IMPORTED_MODULE_16__[\"default\"],alt:\"icon\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(\"img\",{src:_images_icons_star_rating_svg__WEBPACK_IMPORTED_MODULE_16__[\"default\"],alt:\"icon\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(\"img\",{src:_images_icons_star_rating_svg__WEBPACK_IMPORTED_MODULE_16__[\"default\"],alt:\"icon\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(\"img\",{src:_images_icons_star_rating_svg__WEBPACK_IMPORTED_MODULE_16__[\"default\"],alt:\"icon\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(\"img\",{src:_images_icons_star_rating_svg__WEBPACK_IMPORTED_MODULE_16__[\"default\"],alt:\"icon\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(ReviewForm,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Input\"],{placeholder:\"Title\",type:\"text\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Input\"],{placeholder:\"Name\",type:\"text\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_form_input__WEBPACK_IMPORTED_MODULE_12__[\"Input\"],{placeholder:\"Email\",type:\"email\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(Message,{placeholder:\"Review text\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_buttons_button_container__WEBPACK_IMPORTED_MODULE_8__[\"ButtonContainer\"],{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(BtnSubmit,{children:\"Send Review\"})})]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(ReviewTotal,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(ReviewTitle,{children:\"2 of 132 Reviews\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(ReviewCard,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading6\"],{children:\"Fantastic Job\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Body3\"],{children:\"Good purchase Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(Verified,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(\"img\",{src:_images_icons_verified_svg__WEBPACK_IMPORTED_MODULE_15__[\"default\"],alt:\"icon\"}),\" Verified purchased\"]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(ReviewCard,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading6\"],{children:\"Fantastic Job\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Body3\"],{children:\"Good purchase Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsxs\"])(Verified,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_21__[\"jsx\"])(\"img\",{src:_images_icons_verified_svg__WEBPACK_IMPORTED_MODULE_15__[\"default\"],alt:\"icon\"}),\" Verified purchased\"]})]})]})]})]})]})})]});};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"connect\"])(ProductSlider));const MainRight=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1iq9jn929\",label:\"MainRight\"})(\"margin-left:375px;width:calc(100% - 375px);& input{width:100%;}@media \",_queries__WEBPACK_IMPORTED_MODULE_20__[\"device\"].tablet,\"{width:100%;margin-left:unset;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const ContentSlide=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1iq9jn928\",label:\"ContentSlide\"})( false?undefined:{name:\"5kov97\",styles:\"display:flex;flex-wrap:wrap\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Positions=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1iq9jn927\",label:\"Positions\"})(\"display:flex;gap:20px;margin-top:40px;flex-wrap:wrap;& select{margin-bottom:10px;width:100%;}@media \",_queries__WEBPACK_IMPORTED_MODULE_20__[\"device\"].laptop,\"{flex-wrap:nowrap;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const Position=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1iq9jn926\",label:\"Position\"})( false?undefined:{name:\"189mkdu\",styles:\"display:flex;flex-direction:column;align-items:center;width:300px;& img{margin:40px 0 50px 0;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Basket=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1iq9jn925\",label:\"Basket\"})( false?undefined:{name:\"sqxxqu\",styles:\"border-radius:12px;box-shadow:0px 4px 30px 0px #3232321a;min-width:300px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Header=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1iq9jn924\",label:\"Header\"})(\"background:url(\",_images_slider_bg_basket_png__WEBPACK_IMPORTED_MODULE_17__[\"default\"],\") no-repeat;background-size:cover;padding:20px;color:#fff;border-radius:12px;\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rcHJvL0RvY3VtZW50cy9Qcm9qZWN0cy92ZWt0b3JhLWxiL3BhY2thZ2VzL2xiL3NyYy9jb21wb25lbnRzL3Byb2R1Y3QvcHJvZHVjdC1zbGlkZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ1h5QiIsImZpbGUiOiIvVXNlcnMvbWFjYm9va3Byby9Eb2N1bWVudHMvUHJvamVjdHMvdmVrdG9yYS1sYi9wYWNrYWdlcy9sYi9zcmMvY29tcG9uZW50cy9wcm9kdWN0L3Byb2R1Y3Qtc2xpZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29ubmVjdCwgc3R5bGVkIH0gZnJvbSBcImZyb250aXR5XCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBEaXZpZGVyIH0gZnJvbSBcIi4uL290aGVyL2RpdmlkZXJcIjtcbmltcG9ydCBTaWRlYmFyTmF2IGZyb20gXCIuLi9zaWRlYmFyLW5hdlwiO1xuaW1wb3J0IHsgTWFpblRhZyB9IGZyb20gXCIuLi90eXBvZ3JhcGh5L21haW4tdGFnXCI7XG5pbXBvcnQge1xuICBCb2R5MixcbiAgQm9keTMsXG4gIEJvZHk0LFxuICBIZWFkaW5nMixcbiAgSGVhZGluZzMsXG4gIEhlYWRpbmc0LFxuICBIZWFkaW5nNixcbiAgSGVhZGluZzcsXG59IGZyb20gXCIuLi90eXBvZ3JhcGh5L3RleHRcIjtcbmltcG9ydCBzdGFyIGZyb20gXCIuLi9pbWFnZXMvc3Rhci1yYXRpbmcucG5nXCI7XG5pbXBvcnQgcmF0aW5nTG9nbyBmcm9tIFwiLi4vaW1hZ2VzL1RydXN0cGlsb3QucG5nXCI7XG5pbXBvcnQgeyBCdXR0b25Db250YWluZXIgfSBmcm9tIFwiLi4vYnV0dG9ucy9idXR0b24tY29udGFpbmVyXCI7XG5pbXBvcnQgeyBDZW50ZXIgfSBmcm9tIFwiLi4vdHlwb2dyYXBoeS9jZW50ZXJcIjtcbmltcG9ydCB7IEJ0blByaW1hcnkgfSBmcm9tIFwiLi4vYnV0dG9ucy9idXR0b24tcHJpbWFyeVwiO1xuaW1wb3J0IGl0ZW1JbWcgZnJvbSBcIi4uL2ltYWdlcy9vcmRlci9pdGVtLnBuZ1wiO1xuaW1wb3J0IHsgSW5wdXQsIE9wdGlvbiwgU2VsZWN0IH0gZnJvbSBcIi4uL2Zvcm0vaW5wdXRcIjtcbmltcG9ydCB3aGF0IGZyb20gXCIuLi9pbWFnZXMvc2xpZGVyL3doYXQuc3ZnXCI7XG5pbXBvcnQgY291bnQgZnJvbSBcIi4uL2ltYWdlcy9zbGlkZXIvY2FyZC1jb3VudC5wbmdcIjtcbmltcG9ydCBjaGVjayBmcm9tIFwiLi4vaW1hZ2VzL2ljb25zL3ZlcmlmaWVkLnN2Z1wiO1xuaW1wb3J0IHJhdGluZ1N0YXIgZnJvbSBcIi4uL2ltYWdlcy9pY29ucy9zdGFyLXJhdGluZy5zdmdcIjtcbmltcG9ydCBiZ0Jhc2tldCBmcm9tIFwiLi4vaW1hZ2VzL3NsaWRlci9iZy1iYXNrZXQucG5nXCI7XG5pbXBvcnQgQnJlYWRjcnVtYnMgZnJvbSBcIi4uL2JyZWFkY3J1bWJzXCI7XG5pbXBvcnQgeyBTbWFsbENvbnRhaW5lciB9IGZyb20gXCIuLi9jb250aWFuZXIvc21hbGwtY29udGFpbmVyXCI7XG5pbXBvcnQgeyBkZXZpY2UgfSBmcm9tIFwiLi4vcXVlcmllc1wiO1xuXG5jb25zdCBQcm9kdWN0U2xpZGVyID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8U2lkZWJhck5hdiAvPlxuXG4gICAgICA8TWFpblJpZ2h0PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lclwiPlxuICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cInNlY3Rpb25cIj5cbiAgICAgICAgICAgIDxCcmVhZGNydW1icyAvPlxuICAgICAgICAgICAgPEhlYWRpbmcyPldlIG9mZmVyIHRvIGJ1eSBib29zdGVyIGZvciB5b3VyIGFjY291bnQ8L0hlYWRpbmcyPlxuICAgICAgICAgICAgPEJvZHkzPlxuICAgICAgICAgICAgICBMb2wgQm9vc3RpbmcgcHJvdmlkZXMgY2hlYXAgV29XIGJvb3N0aW5nIG9mIGFsbCB0eXBlczogY2hhcmFjdGVyXG4gICAgICAgICAgICAgIG9yIFB2UCBib29zdGluZywgcmFpZCBvciBkdW5nZW9ucyBjYXJyeSwgUG93ZXJsZXZlbGluZywgZmFybWluZyAmXG4gICAgICAgICAgICAgIG1hbnkgbW9yZSB0byBzYXZlIHlvdXIgdGltZS4gQm9vayBhIHNsb3QgaW4gb3VyIGxpdmUgY2hhdCBhbmRcbiAgICAgICAgICAgICAgZW5qb3kgV29XIGJvb3N0IXtcIiBcIn1cbiAgICAgICAgICAgIDwvQm9keTM+XG5cbiAgICAgICAgICAgIDxDb250ZW50U2xpZGU+XG4gICAgICAgICAgICAgIDxQb3NpdGlvbnM+XG4gICAgICAgICAgICAgICAgPFBvc2l0aW9uPlxuICAgICAgICAgICAgICAgICAgPEhlYWRpbmc0PkN1cnJlbnQgUG9zaXRpb248L0hlYWRpbmc0PlxuICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e2l0ZW1JbWd9IGFsdD1cIml0ZW1cIiAvPlxuICAgICAgICAgICAgICAgICAgPFNlbGVjdCBuYW1lPVwicG9zaXRpb25cIj5cbiAgICAgICAgICAgICAgICAgICAgPE9wdGlvbiB2YWx1ZT1cImlyb25cIj5Jcm9uPC9PcHRpb24+XG4gICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9XCJwbGF0aW51bVwiPlBsYXRpbnVtPC9PcHRpb24+XG4gICAgICAgICAgICAgICAgICA8L1NlbGVjdD5cbiAgICAgICAgICAgICAgICAgIDxTZWxlY3QgbmFtZT1cImRpdmlzaW9uXCI+XG4gICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9XCJkaXZpc2lvbiA0XCI+RGl2aXNpb24gNDwvT3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPVwiZGl2aXNpb24gNVwiPkRpdmlzaW9uIDU8L09wdGlvbj5cbiAgICAgICAgICAgICAgICAgIDwvU2VsZWN0PlxuICAgICAgICAgICAgICAgICAgPFNlbGVjdCBuYW1lPVwiTFBcIj5cbiAgICAgICAgICAgICAgICAgICAgPE9wdGlvbiB2YWx1ZT1cImxwIDIwXCI+TFAgMC0yMDwvT3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPVwibHAgMzBcIj5MUCAwLTMwPC9PcHRpb24+XG4gICAgICAgICAgICAgICAgICA8L1NlbGVjdD5cbiAgICAgICAgICAgICAgICA8L1Bvc2l0aW9uPlxuICAgICAgICAgICAgICAgIDxQb3NpdGlvbj5cbiAgICAgICAgICAgICAgICAgIDxIZWFkaW5nND5EZXNpcmVkIFBvc2l0aW9uPC9IZWFkaW5nND5cbiAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtpdGVtSW1nfSBhbHQ9XCJpdGVtXCIgLz5cbiAgICAgICAgICAgICAgICAgIDxTZWxlY3QgbmFtZT1cInBvc2l0aW9uXCI+XG4gICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9XCJwbGF0aW51bVwiPlBsYXRpbnVtPC9PcHRpb24+XG4gICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9XCJpcm9uXCI+SXJvbjwvT3B0aW9uPlxuICAgICAgICAgICAgICAgICAgPC9TZWxlY3Q+XG4gICAgICAgICAgICAgICAgICA8U2VsZWN0IG5hbWU9XCJkaXZpc2lvblwiPlxuICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPVwiZGl2aXNpb24gNFwiPkRpdmlzaW9uIDQ8L09wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgPE9wdGlvbiB2YWx1ZT1cImRpdmlzaW9uIDVcIj5EaXZpc2lvbiA1PC9PcHRpb24+XG4gICAgICAgICAgICAgICAgICA8L1NlbGVjdD5cbiAgICAgICAgICAgICAgICA8L1Bvc2l0aW9uPlxuICAgICAgICAgICAgICAgIDxQb3NpdGlvbj5cbiAgICAgICAgICAgICAgICAgIDxIZWFkaW5nND5TZWxlY3QgU2VydmVyPC9IZWFkaW5nND5cbiAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtpdGVtSW1nfSBhbHQ9XCJpdGVtXCIgLz5cbiAgICAgICAgICAgICAgICAgIDxTZWxlY3QgbmFtZT1cInNlcnZlclwiPlxuICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPVwiZXV3XCI+RVVXPC9PcHRpb24+XG4gICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9XCJldXNcIj5FVVM8L09wdGlvbj5cbiAgICAgICAgICAgICAgICAgIDwvU2VsZWN0PlxuICAgICAgICAgICAgICAgIDwvUG9zaXRpb24+XG4gICAgICAgICAgICAgIDwvUG9zaXRpb25zPlxuXG4gICAgICAgICAgICAgIDxCYXNrZXQ+XG4gICAgICAgICAgICAgICAgPEhlYWRlcj5cbiAgICAgICAgICAgICAgICAgIDxIZWFkaW5nND5NeSBPcmRlcjwvSGVhZGluZzQ+XG4gICAgICAgICAgICAgICAgPC9IZWFkZXI+XG4gICAgICAgICAgICAgICAgPEJhc2tldEJvZHk+XG4gICAgICAgICAgICAgICAgICA8QkJJbmZvPlxuICAgICAgICAgICAgICAgICAgICA8QkJUaXRsZT5Db21wbGV0aW9uIFRpbWU8L0JCVGl0bGU+XG4gICAgICAgICAgICAgICAgICAgIDxIZWFkaW5nNj4xIERheTwvSGVhZGluZzY+XG4gICAgICAgICAgICAgICAgICA8L0JCSW5mbz5cbiAgICAgICAgICAgICAgICAgIDxCQkluZm8+XG4gICAgICAgICAgICAgICAgICAgIDxCQlRpdGxlPkV4dHJhIE9wdGlvbnM8L0JCVGl0bGU+XG4gICAgICAgICAgICAgICAgICAgIDxIZWFkaW5nNj5DaGFtcGlvbiAoJDUpPC9IZWFkaW5nNj5cbiAgICAgICAgICAgICAgICAgICAgPEhlYWRpbmc2PkNoYW1waW9uICgkNSk8L0hlYWRpbmc2PlxuICAgICAgICAgICAgICAgICAgPC9CQkluZm8+XG4gICAgICAgICAgICAgICAgICA8QkJJbmZvPlxuICAgICAgICAgICAgICAgICAgICA8QkJUaXRsZT5Zb3UgRWFybjwvQkJUaXRsZT5cbiAgICAgICAgICAgICAgICAgICAgPEhlYWRpbmc2PjEyIEZveCBDb2lucyAoMS40JCk8L0hlYWRpbmc2PlxuICAgICAgICAgICAgICAgICAgPC9CQkluZm8+XG4gICAgICAgICAgICAgICAgICA8QkJEZXRhaWw+XG4gICAgICAgICAgICAgICAgICAgIDxCQlRpdGxlPkZpbmFsIFByaWNlPC9CQlRpdGxlPlxuICAgICAgICAgICAgICAgICAgICA8SGVhZGluZzM+JDM0PC9IZWFkaW5nMz5cbiAgICAgICAgICAgICAgICAgIDwvQkJEZXRhaWw+XG4gICAgICAgICAgICAgICAgICA8QnV0dG9uQ29udGFpbmVyPlxuICAgICAgICAgICAgICAgICAgICA8QnRuUHJpbWFyeT5SYW5rIFVwPC9CdG5QcmltYXJ5PlxuICAgICAgICAgICAgICAgICAgPC9CdXR0b25Db250YWluZXI+XG4gICAgICAgICAgICAgICAgPC9CYXNrZXRCb2R5PlxuICAgICAgICAgICAgICA8L0Jhc2tldD5cbiAgICAgICAgICAgIDwvQ29udGVudFNsaWRlPlxuXG4gICAgICAgICAgICA8RGl2aWRlciAvPlxuICAgICAgICAgIDwvc2VjdGlvbj5cblxuICAgICAgICAgIDxTbWFsbENvbnRhaW5lcj5cblxuICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwic2VjdGlvblwiPlxuICAgICAgICAgICAgICA8TWFpblRhZz5Tb21lIGFkZGluZ3MgZm9yIHlvdSA8L01haW5UYWc+XG4gICAgICAgICAgICAgIDxIZWFkaW5nMz5FeHRyYSBPcHRpb25zPC9IZWFkaW5nMz5cbiAgICAgICAgICAgICAgPEJvZHkzPlxuICAgICAgICAgICAgICAgIExvbCBCb29zdGluZyBwcm92aWRlcyBjaGVhcCBXb1cgYm9vc3Rpbmcgb2YgYWxsIHR5cGVzOiBjaGFyYWN0ZXJcbiAgICAgICAgICAgICAgICBvciBQdlAgYm9vc3RpbmcsIHJhaWQgb3IgZHVuZ2VvbnMgY2FycnksIFBvd2VybGV2ZWxpbmcsIGZhcm1pbmcgJlxuICAgICAgICAgICAgICAgIG1hbnkgbW9yZSB0byBzYXZlIHlvdXIgdGltZS4gQm9vayBhIHNsb3QgaW4gb3VyIGxpdmUgY2hhdCBhbmRcbiAgICAgICAgICAgICAgICBlbmpveSBXb1cgYm9vc3Qhe1wiIFwifVxuICAgICAgICAgICAgICA8L0JvZHkzPlxuXG4gICAgICAgICAgICAgIDxFeHRyYU9wdGlvbnM+XG4gICAgICAgICAgICAgICAgPEV4dHJhPlNwZWxsIEJ1dHRvbnM8L0V4dHJhPlxuICAgICAgICAgICAgICAgIDxFeHRyYT5TcGVsbCBCdXR0b25zPC9FeHRyYT5cbiAgICAgICAgICAgICAgICA8RXh0cmE+U3BlbGwgQnV0dG9uczwvRXh0cmE+XG4gICAgICAgICAgICAgICAgPEV4dHJhPlNwZWxsIEJ1dHRvbnM8L0V4dHJhPlxuICAgICAgICAgICAgICAgIDxFeHRyYT5TcGVsbCBCdXR0b25zPC9FeHRyYT5cbiAgICAgICAgICAgICAgPC9FeHRyYU9wdGlvbnM+XG5cbiAgICAgICAgICAgICAgPEV4dHJhSW5mbz5cbiAgICAgICAgICAgICAgICA8Qm9keTM+VGhpcyBvcHRpb24gKzEwJSB0byBmaW5hbCBwcmljZSA8L0JvZHkzPlxuICAgICAgICAgICAgICA8L0V4dHJhSW5mbz5cblxuICAgICAgICAgICAgICA8Qm9keTM+XG4gICAgICAgICAgICAgICAgV291bGQgeW91IGxpa2UgdG8gc2VlIGhvdyBhIENoYWxsZW5nZXIgcGxheWVyIHBsYXlzIG9uIHlvdXJcbiAgICAgICAgICAgICAgICBhY2NvdW50IGluIHlvdXIgZWxvPyBCeSBlbmFibGluZyB0aGlzIG9wdGlvbiB3ZSB3aWxsIHNldCB1cCBhXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBzdHJlYW0gc3BlY2lmaWNhbGx5IGZvciB5b3UhIFlvdXIgYm9vc3RlciB3aWxsIGFsc28gYmVcbiAgICAgICAgICAgICAgICBhYmxlIHRvIGNoYXQgd2l0aCB5b3UsIHByb3ZpZGUgeW91IHJhbmsgdXAgaW1hZ2VzIGFuZCBzZW5kIHlvdVxuICAgICAgICAgICAgICAgIFZPRHMgLyByZWNvcmRpbmdzIG9mIHRoZSBnYW1lcyBwbGF5ZWQuIFlvdXIgcmVwbGF5cyB3aWxsIGJlIHNlbnRcbiAgICAgICAgICAgICAgICB0byB5b3UgYWZ0ZXIgb3JkZXIgY29tcGxldGlvbiBvbiB5b3VyIGUtbWFpbC4gSWYgeW91IHdpc2ggdXMgdG9cbiAgICAgICAgICAgICAgICBzZW5kIHRoZW0gdG8geW91LCBwbGVhc2Ugd3JpdGUgaXQgaW4gdGhlIG5vdGVzIG9yIG5vdGlmeSB1cyBiZWZvcmVcbiAgICAgICAgICAgICAgICB3ZSBpbml0aWF0ZSB5b3VyIG9yZGVyLlxuICAgICAgICAgICAgICA8L0JvZHkzPlxuICAgICAgICAgICAgPC9zZWN0aW9uPlxuXG4gICAgICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJzZWN0aW9uXCI+XG4gICAgICAgICAgICAgIDxNYWluVGFnPlNvbWUgYWRkaW5ncyBmb3IgeW91IDwvTWFpblRhZz5cbiAgICAgICAgICAgICAgPEhlYWRpbmczPldoYXQgWW91IFdpbGwgR2V0PC9IZWFkaW5nMz5cblxuICAgICAgICAgICAgICA8V2hhdFlvdVdyYXA+XG4gICAgICAgICAgICAgICAgPFdoYXRZb3U+XG4gICAgICAgICAgICAgICAgICA8aW1nIHNyYz17d2hhdH0gYWx0PVwiaWNvblwiIC8+XG4gICAgICAgICAgICAgICAgICA8SGVhZGluZzQ+UHJlIFJhbmtlZDwvSGVhZGluZzQ+XG4gICAgICAgICAgICAgICAgICA8Qm9keTM+XG4gICAgICAgICAgICAgICAgICAgIExvbCBCb29zdGluZyBwcm92aWRlcyBjaGVhcCBXb1cgYm9vc3Rpbmcgb2YgYWxsIHR5cGVzOlxuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXIgb3IgUHZQIGJvb3N0aW5nLCByYWlkIG9yIGR1bmdlb25zIGNhcnJ5LFxuICAgICAgICAgICAgICAgICAgICBQb3dlcmxldmVsaW5nLCBmYXJtaW5nICYgbWFueSBtb3JlXG4gICAgICAgICAgICAgICAgICA8L0JvZHkzPlxuICAgICAgICAgICAgICAgIDwvV2hhdFlvdT5cbiAgICAgICAgICAgICAgICA8V2hhdFlvdT5cbiAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXt3aGF0fSBhbHQ9XCJpY29uXCIgLz5cbiAgICAgICAgICAgICAgICAgIDxIZWFkaW5nND5QcmUgUmFua2VkPC9IZWFkaW5nND5cbiAgICAgICAgICAgICAgICAgIDxCb2R5Mz5cbiAgICAgICAgICAgICAgICAgICAgTG9sIEJvb3N0aW5nIHByb3ZpZGVzIGNoZWFwIFdvVyBib29zdGluZyBvZiBhbGwgdHlwZXM6XG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlciBvciBQdlAgYm9vc3RpbmcsIHJhaWQgb3IgZHVuZ2VvbnMgY2FycnksXG4gICAgICAgICAgICAgICAgICAgIFBvd2VybGV2ZWxpbmcsIGZhcm1pbmcgJiBtYW55IG1vcmVcbiAgICAgICAgICAgICAgICAgIDwvQm9keTM+XG4gICAgICAgICAgICAgICAgPC9XaGF0WW91PlxuICAgICAgICAgICAgICAgIDxXaGF0WW91PlxuICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e3doYXR9IGFsdD1cImljb25cIiAvPlxuICAgICAgICAgICAgICAgICAgPEhlYWRpbmc0PlByZSBSYW5rZWQ8L0hlYWRpbmc0PlxuICAgICAgICAgICAgICAgICAgPEJvZHkzPlxuICAgICAgICAgICAgICAgICAgICBMb2wgQm9vc3RpbmcgcHJvdmlkZXMgY2hlYXAgV29XIGJvb3N0aW5nIG9mIGFsbCB0eXBlczpcbiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyIG9yIFB2UCBib29zdGluZywgcmFpZCBvciBkdW5nZW9ucyBjYXJyeSxcbiAgICAgICAgICAgICAgICAgICAgUG93ZXJsZXZlbGluZywgZmFybWluZyAmIG1hbnkgbW9yZVxuICAgICAgICAgICAgICAgICAgPC9Cb2R5Mz5cbiAgICAgICAgICAgICAgICA8L1doYXRZb3U+XG4gICAgICAgICAgICAgIDwvV2hhdFlvdVdyYXA+XG4gICAgICAgICAgICA8L3NlY3Rpb24+XG5cbiAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cInNlY3Rpb25cIj5cbiAgICAgICAgICAgICAgPE1haW5UYWc+T3JkZXJpbmcgcHJvY2VkdXJlPC9NYWluVGFnPlxuICAgICAgICAgICAgICA8SGVhZGluZzM+SG93IEl0IFdvcmtzPC9IZWFkaW5nMz5cbiAgICAgICAgICAgICAgPEhvdz5cbiAgICAgICAgICAgICAgICA8SG93TGlzdD5cbiAgICAgICAgICAgICAgICAgIDxCb2R5Mz5QbGFjZSBhbiBvcmRlciBjaG9vc2luZyBvcHRpb25zIHlvdSBuZWVkPC9Cb2R5Mz5cbiAgICAgICAgICAgICAgICA8L0hvd0xpc3Q+XG4gICAgICAgICAgICAgICAgPEhvd0xpc3Q+XG4gICAgICAgICAgICAgICAgICA8Qm9keTM+XG4gICAgICAgICAgICAgICAgICAgIFdlIHdpbGwgY29udGFjdCB5b3UgdmlhIG91ciBsaXZlIGNoYXQgb3IgYnkgc2VuZGluZyBhbiBlbWFpbC5cbiAgICAgICAgICAgICAgICAgICAgQWxsIHRoZSBkZXRhaWxzIHdpbGwgYmUgZGlzY3Vzc2VkIGJlZm9yZWhhbmQgYW5kIHRoZSBzdGFydFxuICAgICAgICAgICAgICAgICAgICB0aW1lIHdpbGwgYmUgc2V0IGFjY29yZGluZyB0byB5b3VyIHNjaGVkdWxlLlxuICAgICAgICAgICAgICAgICAgPC9Cb2R5Mz5cbiAgICAgICAgICAgICAgICA8L0hvd0xpc3Q+XG4gICAgICAgICAgICAgICAgPEhvd0xpc3Q+XG4gICAgICAgICAgICAgICAgICA8Qm9keTM+UGxhY2UgYW4gb3JkZXIgY2hvb3Npbmcgb3B0aW9ucyB5b3UgbmVlZDwvQm9keTM+XG4gICAgICAgICAgICAgICAgPC9Ib3dMaXN0PlxuICAgICAgICAgICAgICA8L0hvdz5cbiAgICAgICAgICAgIDwvc2VjdGlvbj5cblxuICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwic2VjdGlvblwiPlxuICAgICAgICAgICAgICA8TWFpblRhZz5BYm91dCB0aGlzIGl0ZW08L01haW5UYWc+XG4gICAgICAgICAgICAgIDxIZWFkaW5nMz5Qcm9kdWN0IERlc2NyaXB0aW9uPC9IZWFkaW5nMz5cbiAgICAgICAgICAgICAgPERlc2M+XG4gICAgICAgICAgICAgICAgVGhlIGxhc3QgYm9zcyBvZiBldmVyeSByYWlkIGluIFdvVyBpcyB1c3VhbGx5IHZlcnkgZGlmZmljdWx0IHRvXG4gICAgICAgICAgICAgICAgZGVmZWF0IGV2ZW4gaW4gTm9ybWFsIG1vZGUuIEhvd2V2ZXIsIHdpdGggcHJvcGVyIGdlYXIgYW5kIGFuXG4gICAgICAgICAgICAgICAgZXhwZXJpZW5jZWQgdGVhbSwgaXQgaXMgbW9yZSB0aGFuIHJlYWwuIFRvIGRlZmVhdCBTeWx2YW5hc1xuICAgICAgICAgICAgICAgIFdpbmRydW5uZXIgeW91IG5lZWQgdG8gZ2V0IHRocm91Z2ggMyBwaGFzZXMgYW5kIGJyaW5nIFN5bHZhbmFzXG4gICAgICAgICAgICAgICAgaGVhbHRoIGRvd24gdG8gNTAlLiBBdCBteXRoaWMgZGlmZmljdWx0eSBTb0QgU3lsdmFuYXMgV2luZHJ1bm5lclxuICAgICAgICAgICAgICAgIGtpbGwgd2lsbCBiZSBjb3VudGVkIGF0IDQ1JSBvZiBoZXIgaGVhbHRoLntcIiBcIn1cbiAgICAgICAgICAgICAgPC9EZXNjPlxuICAgICAgICAgICAgICA8RGVzYz5cbiAgICAgICAgICAgICAgICBUaGUgbGFzdCBib3NzIG9mIGV2ZXJ5IHJhaWQgaW4gV29XIGlzIHVzdWFsbHkgdmVyeSBkaWZmaWN1bHQgdG9cbiAgICAgICAgICAgICAgICBkZWZlYXQgZXZlbiBpbiBOb3JtYWwgbW9kZS4gSG93ZXZlciwgd2l0aCBwcm9wZXIgZ2VhciBhbmQgYW5cbiAgICAgICAgICAgICAgICBleHBlcmllbmNlZCB0ZWFtLCBpdCBpcyBtb3JlIHRoYW4gcmVhbC4gVG8gZGVmZWF0IFN5bHZhbmFzXG4gICAgICAgICAgICAgICAgV2luZHJ1bm5lciB5b3UgbmVlZCB0byBnZXQgdGhyb3VnaCAzIHBoYXNlcyBhbmQgYnJpbmcgU3lsdmFuYXNcbiAgICAgICAgICAgICAgICBoZWFsdGggZG93biB0byA1MCUuIEF0IG15dGhpYyBkaWZmaWN1bHR5IFNvRCBTeWx2YW5hcyBXaW5kcnVubmVyXG4gICAgICAgICAgICAgICAga2lsbCB3aWxsIGJlIGNvdW50ZWQgYXQgNDUlIG9mIGhlciBoZWFsdGgue1wiIFwifVxuICAgICAgICAgICAgICA8L0Rlc2M+XG4gICAgICAgICAgICAgIDxEZXNjPlxuICAgICAgICAgICAgICAgIFRoZSBsYXN0IGJvc3Mgb2YgZXZlcnkgcmFpZCBpbiBXb1cgaXMgdXN1YWxseSB2ZXJ5IGRpZmZpY3VsdCB0b1xuICAgICAgICAgICAgICAgIGRlZmVhdCBldmVuIGluIE5vcm1hbCBtb2RlLiBIb3dldmVyLCB3aXRoIHByb3BlciBnZWFyIGFuZCBhblxuICAgICAgICAgICAgICAgIGV4cGVyaWVuY2VkIHRlYW0sIGl0IGlzIG1vcmUgdGhhbiByZWFsLiBUbyBkZWZlYXQgU3lsdmFuYXNcbiAgICAgICAgICAgICAgICBXaW5kcnVubmVyIHlvdSBuZWVkIHRvIGdldCB0aHJvdWdoIDMgcGhhc2VzIGFuZCBicmluZyBTeWx2YW5hc1xuICAgICAgICAgICAgICAgIGhlYWx0aCBkb3duIHRvIDUwJS4gQXQgbXl0aGljIGRpZmZpY3VsdHkgU29EIFN5bHZhbmFzIFdpbmRydW5uZXJcbiAgICAgICAgICAgICAgICBraWxsIHdpbGwgYmUgY291bnRlZCBhdCA0NSUgb2YgaGVyIGhlYWx0aC57XCIgXCJ9XG4gICAgICAgICAgICAgIDwvRGVzYz5cbiAgICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgICA8L1NtYWxsQ29udGFpbmVyPlxuXG5cbiAgICAgICAgICA8RmVlZGJhY2s+XG4gICAgICAgICAgICA8Q2VudGVyPlxuICAgICAgICAgICAgICA8TWFpblRhZz5SZXZpZXcgYW5kIEZlZWRiYWNrPC9NYWluVGFnPlxuICAgICAgICAgICAgICA8SGVhZGluZzI+TGVhdmUgdXMgYSBmZWVkYmFjazwvSGVhZGluZzI+XG4gICAgICAgICAgICAgIDxCb2R5Mz5Zb3UgY2FuIGxlYXZlIGhlcmUgZmVlZGJhY2sgYW5kIHJlYWQgdXNlcuKAmXMgcmV2aWV3czwvQm9keTM+XG4gICAgICAgICAgICA8L0NlbnRlcj5cblxuICAgICAgICAgICAgPFJhdGluZz5cbiAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgPEhlYWRpbmcyPjQuOTwvSGVhZGluZzI+XG4gICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgPGltZyBzcmM9e3N0YXJ9IGFsdD1cInN0YXJcIiAvPlxuICAgICAgICAgICAgICA8aW1nIHNyYz17cmF0aW5nTG9nb30gYWx0PVwiXCIgLz5cbiAgICAgICAgICAgIDwvUmF0aW5nPlxuXG4gICAgICAgICAgICA8UmV2aWV3cz5cbiAgICAgICAgICAgICAgPFRlbGxVcz5cbiAgICAgICAgICAgICAgICA8UmV2aWV3VGl0bGU+VGVsbCB1cyBhYm91dCB5b3VyIGV4cGVyaWVuY2U8L1Jldmlld1RpdGxlPlxuICAgICAgICAgICAgICAgIDxCb2R5ND5Zb3VyIG92ZXJhbGwgcmF0aW5nPC9Cb2R5ND5cbiAgICAgICAgICAgICAgICA8UmF0aW5nSW5wdXQ+XG4gICAgICAgICAgICAgICAgICA8aW1nIHNyYz17cmF0aW5nU3Rhcn0gYWx0PSdpY29uJyAvPlxuICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e3JhdGluZ1N0YXJ9IGFsdD0naWNvbicgLz5cbiAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtyYXRpbmdTdGFyfSBhbHQ9J2ljb24nIC8+XG4gICAgICAgICAgICAgICAgICA8aW1nIHNyYz17cmF0aW5nU3Rhcn0gYWx0PSdpY29uJyAvPlxuICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e3JhdGluZ1N0YXJ9IGFsdD0naWNvbicgLz5cbiAgICAgICAgICAgICAgICA8L1JhdGluZ0lucHV0PlxuICAgICAgICAgICAgICAgIDxSZXZpZXdGb3JtPlxuICAgICAgICAgICAgICAgICAgPElucHV0IHBsYWNlaG9sZGVyPVwiVGl0bGVcIiB0eXBlPVwidGV4dFwiIC8+XG4gICAgICAgICAgICAgICAgICA8SW5wdXQgcGxhY2Vob2xkZXI9XCJOYW1lXCIgdHlwZT1cInRleHRcIiAvPlxuICAgICAgICAgICAgICAgICAgPElucHV0IHBsYWNlaG9sZGVyPVwiRW1haWxcIiB0eXBlPVwiZW1haWxcIiAvPlxuICAgICAgICAgICAgICAgICAgPE1lc3NhZ2UgcGxhY2Vob2xkZXI9XCJSZXZpZXcgdGV4dFwiIC8+XG4gICAgICAgICAgICAgICAgICA8QnV0dG9uQ29udGFpbmVyPlxuICAgICAgICAgICAgICAgICAgICA8QnRuU3VibWl0PlNlbmQgUmV2aWV3PC9CdG5TdWJtaXQ+XG4gICAgICAgICAgICAgICAgICA8L0J1dHRvbkNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICA8L1Jldmlld0Zvcm0+XG4gICAgICAgICAgICAgIDwvVGVsbFVzPlxuXG4gICAgICAgICAgICAgIDxSZXZpZXdUb3RhbD5cbiAgICAgICAgICAgICAgICA8UmV2aWV3VGl0bGU+MiBvZiAxMzIgUmV2aWV3czwvUmV2aWV3VGl0bGU+XG5cbiAgICAgICAgICAgICAgICA8UmV2aWV3Q2FyZD5cbiAgICAgICAgICAgICAgICAgIDxIZWFkaW5nNj5GYW50YXN0aWMgSm9iPC9IZWFkaW5nNj5cbiAgICAgICAgICAgICAgICAgIDxCb2R5Mz5cbiAgICAgICAgICAgICAgICAgICAgR29vZCBwdXJjaGFzZSBMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXJcbiAgICAgICAgICAgICAgICAgICAgYWRpcGlzY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZCB0ZW1wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmVcbiAgICAgICAgICAgICAgICAgICAgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS5cbiAgICAgICAgICAgICAgICAgIDwvQm9keTM+XG4gICAgICAgICAgICAgICAgICA8VmVyaWZpZWQ+XG4gICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtjaGVja30gYWx0PVwiaWNvblwiIC8+IFZlcmlmaWVkIHB1cmNoYXNlZFxuICAgICAgICAgICAgICAgICAgPC9WZXJpZmllZD5cbiAgICAgICAgICAgICAgICA8L1Jldmlld0NhcmQ+XG4gICAgICAgICAgICAgICAgPFJldmlld0NhcmQ+XG4gICAgICAgICAgICAgICAgICA8SGVhZGluZzY+RmFudGFzdGljIEpvYjwvSGVhZGluZzY+XG4gICAgICAgICAgICAgICAgICA8Qm9keTM+XG4gICAgICAgICAgICAgICAgICAgIEdvb2QgcHVyY2hhc2UgTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyXG4gICAgICAgICAgICAgICAgICAgIGFkaXBpc2NpbmcgZWxpdCwgc2VkIGRvIGVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQgdXQgbGFib3JlXG4gICAgICAgICAgICAgICAgICAgIGV0IGRvbG9yZSBtYWduYSBhbGlxdWEuXG4gICAgICAgICAgICAgICAgICA8L0JvZHkzPlxuICAgICAgICAgICAgICAgICAgPFZlcmlmaWVkPlxuICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17Y2hlY2t9IGFsdD1cImljb25cIiAvPiBWZXJpZmllZCBwdXJjaGFzZWRcbiAgICAgICAgICAgICAgICAgIDwvVmVyaWZpZWQ+XG4gICAgICAgICAgICAgICAgPC9SZXZpZXdDYXJkPlxuICAgICAgICAgICAgICA8L1Jldmlld1RvdGFsPlxuICAgICAgICAgICAgPC9SZXZpZXdzPlxuICAgICAgICAgIDwvRmVlZGJhY2s+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9NYWluUmlnaHQ+XG4gICAgPC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFByb2R1Y3RTbGlkZXIpO1xuXG5jb25zdCBNYWluUmlnaHQgPSBzdHlsZWQuZGl2YFxuICBtYXJnaW4tbGVmdDogMzc1cHg7XG4gIHdpZHRoOiBjYWxjKDEwMCUgLSAzNzVweCk7XG5cbiAgJiBpbnB1dCB7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cblxuICBAbWVkaWEgJHtkZXZpY2UudGFibGV0fSB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWFyZ2luLWxlZnQ6IHVuc2V0O1xuICB9XG5gO1xuXG5jb25zdCBDb250ZW50U2xpZGUgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LXdyYXA6IHdyYXA7XG5gO1xuXG5jb25zdCBQb3NpdGlvbnMgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBnYXA6IDIwcHg7XG4gIG1hcmdpbi10b3A6IDQwcHg7XG4gIGZsZXgtd3JhcDogd3JhcDtcblxuICAmIHNlbGVjdCB7XG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICB3aWR0aDogMTAwJTtcbiAgfVxuXG4gIEBtZWRpYSAke2RldmljZS5sYXB0b3B9IHtcbiAgICBmbGV4LXdyYXA6IG5vd3JhcDtcbiAgfVxuICBcbmA7XG5cbmNvbnN0IFBvc2l0aW9uID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgd2lkdGg6IDMwMHB4O1xuXG4gICYgaW1nIHtcbiAgICBtYXJnaW46IDQwcHggMCA1MHB4IDA7XG4gIH1cbmA7XG5cbmNvbnN0IEJhc2tldCA9IHN0eWxlZC5kaXZgXG4gIGJvcmRlci1yYWRpdXM6IDEycHg7XG4gIGJveC1zaGFkb3c6IDBweCA0cHggMzBweCAwcHggIzMyMzIzMjFhO1xuICBtaW4td2lkdGg6IDMwMHB4O1xuYDtcblxuY29uc3QgSGVhZGVyID0gc3R5bGVkLmRpdmBcbiAgYmFja2dyb3VuZDogdXJsKCR7YmdCYXNrZXR9KSBuby1yZXBlYXQ7XG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XG4gIHBhZGRpbmc6IDIwcHg7XG4gIGNvbG9yOiAjZmZmO1xuICBib3JkZXItcmFkaXVzOiAxMnB4O1xuYDtcblxuY29uc3QgQmFza2V0Qm9keSA9IHN0eWxlZC5kaXZgXG4gIHBhZGRpbmc6IDIwcHg7XG5gO1xuXG5jb25zdCBCQkluZm8gPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nLWJvdHRvbTogMTBweDtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlYmVmZjg7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcblxuICAmIGg2IHtcbiAgICBjb2xvcjogdmFyKC0tdGV4dC1kYXJrKTtcbiAgfVxuYDtcblxuY29uc3QgQkJUaXRsZSA9IHN0eWxlZChIZWFkaW5nNylgXG4gIG1hcmdpbi1ib3R0b206IDZweDtcbiAgY29sb3I6IHZhcigtLXByaW1hcnktcHJlc3NlZCk7XG5gO1xuXG5jb25zdCBCQkRldGFpbCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgbWFyZ2luLXRvcDogMTBweDtcbmA7XG5cbmNvbnN0IEV4dHJhT3B0aW9ucyA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGdhcDogMTRweDtcbiAgbWFyZ2luOiAyMHB4IDA7XG5gO1xuXG5jb25zdCBFeHRyYSA9IHN0eWxlZC5zcGFuYFxuICBwYWRkaW5nOiAxNnB4IDI2cHg7XG4gIGJvcmRlci1yYWRpdXM6IDEycHg7XG4gIGJhY2tncm91bmQ6ICNlYmVmZjg7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG5gO1xuXG5jb25zdCBFeHRyYUluZm8gPSBzdHlsZWQuZGl2YFxuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuYDtcblxuY29uc3QgV2hhdFlvdVdyYXAgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBnYXA6IDcwcHg7XG4gIG1hcmdpbi10b3A6IDIwcHg7XG5gO1xuXG5jb25zdCBXaGF0WW91ID0gc3R5bGVkLmRpdmBcbiAgJiBpbWcge1xuICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XG4gIH1cbmA7XG5cbmNvbnN0IEhvdyA9IHN0eWxlZC51bGBcbiAgbWFyZ2luLXRvcDogMjBweDtcbiAgY291bnRlci1yZXNldDogY291bnRlci1saXN0O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHBhZGRpbmc6IDA7XG5gO1xuXG5jb25zdCBIb3dMaXN0ID0gc3R5bGVkLmxpYFxuICBtYXJnaW46IDAgMCAyMHB4IDQwcHg7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG5cbiAgJjo6YmVmb3JlIHtcbiAgICBjb3VudGVyLWluY3JlbWVudDogY291bnRlci1saXN0O1xuICAgIGNvbnRlbnQ6IGNvdW50ZXIoY291bnRlci1saXN0KTtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgbGVmdDogMDtcbiAgICBiYWNrZ3JvdW5kOiB1cmwoJHtjb3VudH0pO1xuICAgIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgICB3aWR0aDogMjZweDtcbiAgICBoZWlnaHQ6IDI2cHg7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBmb250LXdlaWdodDogNzAwO1xuICAgIGNvbG9yOiAjNTQ3OWU1O1xuICB9XG5gO1xuXG5jb25zdCBEZXNjID0gc3R5bGVkKEJvZHkzKWBcbiAgbWFyZ2luLXRvcDogMjBweDtcbiAgZGlzcGxheTogYmxvY2s7XG5gO1xuXG5jb25zdCBGZWVkYmFjayA9IHN0eWxlZC5zZWN0aW9uYFxuICBtYXJnaW4tdG9wOiAxMjBweDtcbmA7XG5cbmNvbnN0IFJhdGluZyA9IHN0eWxlZC5kaXZgXG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudChcbiAgICAxMDQuMjJkZWcsXG4gICAgI2ViZjNmZiA4LjQ0JSxcbiAgICByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMikgNTkuNTUlLFxuICAgICNmNGU2ZmYgMTAzLjYzJVxuICApO1xuICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoMzBweCk7XG4gIC8qIE5vdGU6IGJhY2tkcm9wLWZpbHRlciBoYXMgbWluaW1hbCBicm93c2VyIHN1cHBvcnQgKi9cbiAgYm9yZGVyLXJhZGl1czogMzBweDtcbiAgcGFkZGluZzogMjBweDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB3aWR0aDogNDAwcHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGdhcDogMjBweDtcbiAgbWFyZ2luOiA0MHB4IGF1dG87XG5gO1xuXG5jb25zdCBSZXZpZXdzID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZ2FwOiA5MHB4O1xuICBtYXJnaW4tdG9wOiA0MHB4O1xuYDtcblxuY29uc3QgVGVsbFVzID0gc3R5bGVkLmRpdmBgO1xuXG5jb25zdCBSYXRpbmdJbnB1dCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGdhcDogNXB4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBtYXJnaW4tdG9wOiA1cHg7XG5gXG5cbmNvbnN0IFJldmlld1RpdGxlID0gc3R5bGVkKEhlYWRpbmc0KWBcbiAgbWFyZ2luLWJvdHRvbTogMjBweDtcbmA7XG5cbmNvbnN0IFJldmlld0Zvcm0gPSBzdHlsZWQuZm9ybWBcbiAgbWFyZ2luLXRvcDogMjBweDtcbmA7XG5cbmNvbnN0IE1lc3NhZ2UgPSBzdHlsZWQudGV4dGFyZWFgXG4gIGJvcmRlcjogbm9uZTtcbiAgd2lkdGg6IDEwMCU7XG4gIGJhY2tncm91bmQ6ICNlYmVmZjg7XG4gIGJvcmRlci1yYWRpdXM6IDZweDtcbiAgcGFkZGluZzogMTBweDtcbiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XG5gO1xuXG5jb25zdCBCdG5TdWJtaXQgPSBzdHlsZWQoQnRuUHJpbWFyeSlgYDtcblxuY29uc3QgUmV2aWV3VG90YWwgPSBzdHlsZWQoVGVsbFVzKWBgO1xuXG5jb25zdCBSZXZpZXdDYXJkID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luLWJvdHRvbTogMzBweDtcbmA7XG5cbmNvbnN0IFZlcmlmaWVkID0gc3R5bGVkLmRpdmBcbiAgY29sb3I6ICMxNjk2NDk7XG4gIG1hcmdpbi10b3A6IDEwcHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGdhcDogMTBweDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbmA7XG4iXX0= */\"));const BasketBody=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1iq9jn923\",label:\"BasketBody\"})( false?undefined:{name:\"1yjx7km\",styles:\"padding:20px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rcHJvL0RvY3VtZW50cy9Qcm9qZWN0cy92ZWt0b3JhLWxiL3BhY2thZ2VzL2xiL3NyYy9jb21wb25lbnRzL3Byb2R1Y3QvcHJvZHVjdC1zbGlkZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBd1g2QiIsImZpbGUiOiIvVXNlcnMvbWFjYm9va3Byby9Eb2N1bWVudHMvUHJvamVjdHMvdmVrdG9yYS1sYi9wYWNrYWdlcy9sYi9zcmMvY29tcG9uZW50cy9wcm9kdWN0L3Byb2R1Y3Qtc2xpZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29ubmVjdCwgc3R5bGVkIH0gZnJvbSBcImZyb250aXR5XCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBEaXZpZGVyIH0gZnJvbSBcIi4uL290aGVyL2RpdmlkZXJcIjtcbmltcG9ydCBTaWRlYmFyTmF2IGZyb20gXCIuLi9zaWRlYmFyLW5hdlwiO1xuaW1wb3J0IHsgTWFpblRhZyB9IGZyb20gXCIuLi90eXBvZ3JhcGh5L21haW4tdGFnXCI7XG5pbXBvcnQge1xuICBCb2R5MixcbiAgQm9keTMsXG4gIEJvZHk0LFxuICBIZWFkaW5nMixcbiAgSGVhZGluZzMsXG4gIEhlYWRpbmc0LFxuICBIZWFkaW5nNixcbiAgSGVhZGluZzcsXG59IGZyb20gXCIuLi90eXBvZ3JhcGh5L3RleHRcIjtcbmltcG9ydCBzdGFyIGZyb20gXCIuLi9pbWFnZXMvc3Rhci1yYXRpbmcucG5nXCI7XG5pbXBvcnQgcmF0aW5nTG9nbyBmcm9tIFwiLi4vaW1hZ2VzL1RydXN0cGlsb3QucG5nXCI7XG5pbXBvcnQgeyBCdXR0b25Db250YWluZXIgfSBmcm9tIFwiLi4vYnV0dG9ucy9idXR0b24tY29udGFpbmVyXCI7XG5pbXBvcnQgeyBDZW50ZXIgfSBmcm9tIFwiLi4vdHlwb2dyYXBoeS9jZW50ZXJcIjtcbmltcG9ydCB7IEJ0blByaW1hcnkgfSBmcm9tIFwiLi4vYnV0dG9ucy9idXR0b24tcHJpbWFyeVwiO1xuaW1wb3J0IGl0ZW1JbWcgZnJvbSBcIi4uL2ltYWdlcy9vcmRlci9pdGVtLnBuZ1wiO1xuaW1wb3J0IHsgSW5wdXQsIE9wdGlvbiwgU2VsZWN0IH0gZnJvbSBcIi4uL2Zvcm0vaW5wdXRcIjtcbmltcG9ydCB3aGF0IGZyb20gXCIuLi9pbWFnZXMvc2xpZGVyL3doYXQuc3ZnXCI7XG5pbXBvcnQgY291bnQgZnJvbSBcIi4uL2ltYWdlcy9zbGlkZXIvY2FyZC1jb3VudC5wbmdcIjtcbmltcG9ydCBjaGVjayBmcm9tIFwiLi4vaW1hZ2VzL2ljb25zL3ZlcmlmaWVkLnN2Z1wiO1xuaW1wb3J0IHJhdGluZ1N0YXIgZnJvbSBcIi4uL2ltYWdlcy9pY29ucy9zdGFyLXJhdGluZy5zdmdcIjtcbmltcG9ydCBiZ0Jhc2tldCBmcm9tIFwiLi4vaW1hZ2VzL3NsaWRlci9iZy1iYXNrZXQucG5nXCI7XG5pbXBvcnQgQnJlYWRjcnVtYnMgZnJvbSBcIi4uL2JyZWFkY3J1bWJzXCI7XG5pbXBvcnQgeyBTbWFsbENvbnRhaW5lciB9IGZyb20gXCIuLi9jb250aWFuZXIvc21hbGwtY29udGFpbmVyXCI7XG5pbXBvcnQgeyBkZXZpY2UgfSBmcm9tIFwiLi4vcXVlcmllc1wiO1xuXG5jb25zdCBQcm9kdWN0U2xpZGVyID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8U2lkZWJhck5hdiAvPlxuXG4gICAgICA8TWFpblJpZ2h0PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lclwiPlxuICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cInNlY3Rpb25cIj5cbiAgICAgICAgICAgIDxCcmVhZGNydW1icyAvPlxuICAgICAgICAgICAgPEhlYWRpbmcyPldlIG9mZmVyIHRvIGJ1eSBib29zdGVyIGZvciB5b3VyIGFjY291bnQ8L0hlYWRpbmcyPlxuICAgICAgICAgICAgPEJvZHkzPlxuICAgICAgICAgICAgICBMb2wgQm9vc3RpbmcgcHJvdmlkZXMgY2hlYXAgV29XIGJvb3N0aW5nIG9mIGFsbCB0eXBlczogY2hhcmFjdGVyXG4gICAgICAgICAgICAgIG9yIFB2UCBib29zdGluZywgcmFpZCBvciBkdW5nZW9ucyBjYXJyeSwgUG93ZXJsZXZlbGluZywgZmFybWluZyAmXG4gICAgICAgICAgICAgIG1hbnkgbW9yZSB0byBzYXZlIHlvdXIgdGltZS4gQm9vayBhIHNsb3QgaW4gb3VyIGxpdmUgY2hhdCBhbmRcbiAgICAgICAgICAgICAgZW5qb3kgV29XIGJvb3N0IXtcIiBcIn1cbiAgICAgICAgICAgIDwvQm9keTM+XG5cbiAgICAgICAgICAgIDxDb250ZW50U2xpZGU+XG4gICAgICAgICAgICAgIDxQb3NpdGlvbnM+XG4gICAgICAgICAgICAgICAgPFBvc2l0aW9uPlxuICAgICAgICAgICAgICAgICAgPEhlYWRpbmc0PkN1cnJlbnQgUG9zaXRpb248L0hlYWRpbmc0PlxuICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e2l0ZW1JbWd9IGFsdD1cIml0ZW1cIiAvPlxuICAgICAgICAgICAgICAgICAgPFNlbGVjdCBuYW1lPVwicG9zaXRpb25cIj5cbiAgICAgICAgICAgICAgICAgICAgPE9wdGlvbiB2YWx1ZT1cImlyb25cIj5Jcm9uPC9PcHRpb24+XG4gICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9XCJwbGF0aW51bVwiPlBsYXRpbnVtPC9PcHRpb24+XG4gICAgICAgICAgICAgICAgICA8L1NlbGVjdD5cbiAgICAgICAgICAgICAgICAgIDxTZWxlY3QgbmFtZT1cImRpdmlzaW9uXCI+XG4gICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9XCJkaXZpc2lvbiA0XCI+RGl2aXNpb24gNDwvT3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPVwiZGl2aXNpb24gNVwiPkRpdmlzaW9uIDU8L09wdGlvbj5cbiAgICAgICAgICAgICAgICAgIDwvU2VsZWN0PlxuICAgICAgICAgICAgICAgICAgPFNlbGVjdCBuYW1lPVwiTFBcIj5cbiAgICAgICAgICAgICAgICAgICAgPE9wdGlvbiB2YWx1ZT1cImxwIDIwXCI+TFAgMC0yMDwvT3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPVwibHAgMzBcIj5MUCAwLTMwPC9PcHRpb24+XG4gICAgICAgICAgICAgICAgICA8L1NlbGVjdD5cbiAgICAgICAgICAgICAgICA8L1Bvc2l0aW9uPlxuICAgICAgICAgICAgICAgIDxQb3NpdGlvbj5cbiAgICAgICAgICAgICAgICAgIDxIZWFkaW5nND5EZXNpcmVkIFBvc2l0aW9uPC9IZWFkaW5nND5cbiAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtpdGVtSW1nfSBhbHQ9XCJpdGVtXCIgLz5cbiAgICAgICAgICAgICAgICAgIDxTZWxlY3QgbmFtZT1cInBvc2l0aW9uXCI+XG4gICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9XCJwbGF0aW51bVwiPlBsYXRpbnVtPC9PcHRpb24+XG4gICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9XCJpcm9uXCI+SXJvbjwvT3B0aW9uPlxuICAgICAgICAgICAgICAgICAgPC9TZWxlY3Q+XG4gICAgICAgICAgICAgICAgICA8U2VsZWN0IG5hbWU9XCJkaXZpc2lvblwiPlxuICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPVwiZGl2aXNpb24gNFwiPkRpdmlzaW9uIDQ8L09wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgPE9wdGlvbiB2YWx1ZT1cImRpdmlzaW9uIDVcIj5EaXZpc2lvbiA1PC9PcHRpb24+XG4gICAgICAgICAgICAgICAgICA8L1NlbGVjdD5cbiAgICAgICAgICAgICAgICA8L1Bvc2l0aW9uPlxuICAgICAgICAgICAgICAgIDxQb3NpdGlvbj5cbiAgICAgICAgICAgICAgICAgIDxIZWFkaW5nND5TZWxlY3QgU2VydmVyPC9IZWFkaW5nND5cbiAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtpdGVtSW1nfSBhbHQ9XCJpdGVtXCIgLz5cbiAgICAgICAgICAgICAgICAgIDxTZWxlY3QgbmFtZT1cInNlcnZlclwiPlxuICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPVwiZXV3XCI+RVVXPC9PcHRpb24+XG4gICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9XCJldXNcIj5FVVM8L09wdGlvbj5cbiAgICAgICAgICAgICAgICAgIDwvU2VsZWN0PlxuICAgICAgICAgICAgICAgIDwvUG9zaXRpb24+XG4gICAgICAgICAgICAgIDwvUG9zaXRpb25zPlxuXG4gICAgICAgICAgICAgIDxCYXNrZXQ+XG4gICAgICAgICAgICAgICAgPEhlYWRlcj5cbiAgICAgICAgICAgICAgICAgIDxIZWFkaW5nND5NeSBPcmRlcjwvSGVhZGluZzQ+XG4gICAgICAgICAgICAgICAgPC9IZWFkZXI+XG4gICAgICAgICAgICAgICAgPEJhc2tldEJvZHk+XG4gICAgICAgICAgICAgICAgICA8QkJJbmZvPlxuICAgICAgICAgICAgICAgICAgICA8QkJUaXRsZT5Db21wbGV0aW9uIFRpbWU8L0JCVGl0bGU+XG4gICAgICAgICAgICAgICAgICAgIDxIZWFkaW5nNj4xIERheTwvSGVhZGluZzY+XG4gICAgICAgICAgICAgICAgICA8L0JCSW5mbz5cbiAgICAgICAgICAgICAgICAgIDxCQkluZm8+XG4gICAgICAgICAgICAgICAgICAgIDxCQlRpdGxlPkV4dHJhIE9wdGlvbnM8L0JCVGl0bGU+XG4gICAgICAgICAgICAgICAgICAgIDxIZWFkaW5nNj5DaGFtcGlvbiAoJDUpPC9IZWFkaW5nNj5cbiAgICAgICAgICAgICAgICAgICAgPEhlYWRpbmc2PkNoYW1waW9uICgkNSk8L0hlYWRpbmc2PlxuICAgICAgICAgICAgICAgICAgPC9CQkluZm8+XG4gICAgICAgICAgICAgICAgICA8QkJJbmZvPlxuICAgICAgICAgICAgICAgICAgICA8QkJUaXRsZT5Zb3UgRWFybjwvQkJUaXRsZT5cbiAgICAgICAgICAgICAgICAgICAgPEhlYWRpbmc2PjEyIEZveCBDb2lucyAoMS40JCk8L0hlYWRpbmc2PlxuICAgICAgICAgICAgICAgICAgPC9CQkluZm8+XG4gICAgICAgICAgICAgICAgICA8QkJEZXRhaWw+XG4gICAgICAgICAgICAgICAgICAgIDxCQlRpdGxlPkZpbmFsIFByaWNlPC9CQlRpdGxlPlxuICAgICAgICAgICAgICAgICAgICA8SGVhZGluZzM+JDM0PC9IZWFkaW5nMz5cbiAgICAgICAgICAgICAgICAgIDwvQkJEZXRhaWw+XG4gICAgICAgICAgICAgICAgICA8QnV0dG9uQ29udGFpbmVyPlxuICAgICAgICAgICAgICAgICAgICA8QnRuUHJpbWFyeT5SYW5rIFVwPC9CdG5QcmltYXJ5PlxuICAgICAgICAgICAgICAgICAgPC9CdXR0b25Db250YWluZXI+XG4gICAgICAgICAgICAgICAgPC9CYXNrZXRCb2R5PlxuICAgICAgICAgICAgICA8L0Jhc2tldD5cbiAgICAgICAgICAgIDwvQ29udGVudFNsaWRlPlxuXG4gICAgICAgICAgICA8RGl2aWRlciAvPlxuICAgICAgICAgIDwvc2VjdGlvbj5cblxuICAgICAgICAgIDxTbWFsbENvbnRhaW5lcj5cblxuICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwic2VjdGlvblwiPlxuICAgICAgICAgICAgICA8TWFpblRhZz5Tb21lIGFkZGluZ3MgZm9yIHlvdSA8L01haW5UYWc+XG4gICAgICAgICAgICAgIDxIZWFkaW5nMz5FeHRyYSBPcHRpb25zPC9IZWFkaW5nMz5cbiAgICAgICAgICAgICAgPEJvZHkzPlxuICAgICAgICAgICAgICAgIExvbCBCb29zdGluZyBwcm92aWRlcyBjaGVhcCBXb1cgYm9vc3Rpbmcgb2YgYWxsIHR5cGVzOiBjaGFyYWN0ZXJcbiAgICAgICAgICAgICAgICBvciBQdlAgYm9vc3RpbmcsIHJhaWQgb3IgZHVuZ2VvbnMgY2FycnksIFBvd2VybGV2ZWxpbmcsIGZhcm1pbmcgJlxuICAgICAgICAgICAgICAgIG1hbnkgbW9yZSB0byBzYXZlIHlvdXIgdGltZS4gQm9vayBhIHNsb3QgaW4gb3VyIGxpdmUgY2hhdCBhbmRcbiAgICAgICAgICAgICAgICBlbmpveSBXb1cgYm9vc3Qhe1wiIFwifVxuICAgICAgICAgICAgICA8L0JvZHkzPlxuXG4gICAgICAgICAgICAgIDxFeHRyYU9wdGlvbnM+XG4gICAgICAgICAgICAgICAgPEV4dHJhPlNwZWxsIEJ1dHRvbnM8L0V4dHJhPlxuICAgICAgICAgICAgICAgIDxFeHRyYT5TcGVsbCBCdXR0b25zPC9FeHRyYT5cbiAgICAgICAgICAgICAgICA8RXh0cmE+U3BlbGwgQnV0dG9uczwvRXh0cmE+XG4gICAgICAgICAgICAgICAgPEV4dHJhPlNwZWxsIEJ1dHRvbnM8L0V4dHJhPlxuICAgICAgICAgICAgICAgIDxFeHRyYT5TcGVsbCBCdXR0b25zPC9FeHRyYT5cbiAgICAgICAgICAgICAgPC9FeHRyYU9wdGlvbnM+XG5cbiAgICAgICAgICAgICAgPEV4dHJhSW5mbz5cbiAgICAgICAgICAgICAgICA8Qm9keTM+VGhpcyBvcHRpb24gKzEwJSB0byBmaW5hbCBwcmljZSA8L0JvZHkzPlxuICAgICAgICAgICAgICA8L0V4dHJhSW5mbz5cblxuICAgICAgICAgICAgICA8Qm9keTM+XG4gICAgICAgICAgICAgICAgV291bGQgeW91IGxpa2UgdG8gc2VlIGhvdyBhIENoYWxsZW5nZXIgcGxheWVyIHBsYXlzIG9uIHlvdXJcbiAgICAgICAgICAgICAgICBhY2NvdW50IGluIHlvdXIgZWxvPyBCeSBlbmFibGluZyB0aGlzIG9wdGlvbiB3ZSB3aWxsIHNldCB1cCBhXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBzdHJlYW0gc3BlY2lmaWNhbGx5IGZvciB5b3UhIFlvdXIgYm9vc3RlciB3aWxsIGFsc28gYmVcbiAgICAgICAgICAgICAgICBhYmxlIHRvIGNoYXQgd2l0aCB5b3UsIHByb3ZpZGUgeW91IHJhbmsgdXAgaW1hZ2VzIGFuZCBzZW5kIHlvdVxuICAgICAgICAgICAgICAgIFZPRHMgLyByZWNvcmRpbmdzIG9mIHRoZSBnYW1lcyBwbGF5ZWQuIFlvdXIgcmVwbGF5cyB3aWxsIGJlIHNlbnRcbiAgICAgICAgICAgICAgICB0byB5b3UgYWZ0ZXIgb3JkZXIgY29tcGxldGlvbiBvbiB5b3VyIGUtbWFpbC4gSWYgeW91IHdpc2ggdXMgdG9cbiAgICAgICAgICAgICAgICBzZW5kIHRoZW0gdG8geW91LCBwbGVhc2Ugd3JpdGUgaXQgaW4gdGhlIG5vdGVzIG9yIG5vdGlmeSB1cyBiZWZvcmVcbiAgICAgICAgICAgICAgICB3ZSBpbml0aWF0ZSB5b3VyIG9yZGVyLlxuICAgICAgICAgICAgICA8L0JvZHkzPlxuICAgICAgICAgICAgPC9zZWN0aW9uPlxuXG4gICAgICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJzZWN0aW9uXCI+XG4gICAgICAgICAgICAgIDxNYWluVGFnPlNvbWUgYWRkaW5ncyBmb3IgeW91IDwvTWFpblRhZz5cbiAgICAgICAgICAgICAgPEhlYWRpbmczPldoYXQgWW91IFdpbGwgR2V0PC9IZWFkaW5nMz5cblxuICAgICAgICAgICAgICA8V2hhdFlvdVdyYXA+XG4gICAgICAgICAgICAgICAgPFdoYXRZb3U+XG4gICAgICAgICAgICAgICAgICA8aW1nIHNyYz17d2hhdH0gYWx0PVwiaWNvblwiIC8+XG4gICAgICAgICAgICAgICAgICA8SGVhZGluZzQ+UHJlIFJhbmtlZDwvSGVhZGluZzQ+XG4gICAgICAgICAgICAgICAgICA8Qm9keTM+XG4gICAgICAgICAgICAgICAgICAgIExvbCBCb29zdGluZyBwcm92aWRlcyBjaGVhcCBXb1cgYm9vc3Rpbmcgb2YgYWxsIHR5cGVzOlxuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXIgb3IgUHZQIGJvb3N0aW5nLCByYWlkIG9yIGR1bmdlb25zIGNhcnJ5LFxuICAgICAgICAgICAgICAgICAgICBQb3dlcmxldmVsaW5nLCBmYXJtaW5nICYgbWFueSBtb3JlXG4gICAgICAgICAgICAgICAgICA8L0JvZHkzPlxuICAgICAgICAgICAgICAgIDwvV2hhdFlvdT5cbiAgICAgICAgICAgICAgICA8V2hhdFlvdT5cbiAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXt3aGF0fSBhbHQ9XCJpY29uXCIgLz5cbiAgICAgICAgICAgICAgICAgIDxIZWFkaW5nND5QcmUgUmFua2VkPC9IZWFkaW5nND5cbiAgICAgICAgICAgICAgICAgIDxCb2R5Mz5cbiAgICAgICAgICAgICAgICAgICAgTG9sIEJvb3N0aW5nIHByb3ZpZGVzIGNoZWFwIFdvVyBib29zdGluZyBvZiBhbGwgdHlwZXM6XG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlciBvciBQdlAgYm9vc3RpbmcsIHJhaWQgb3IgZHVuZ2VvbnMgY2FycnksXG4gICAgICAgICAgICAgICAgICAgIFBvd2VybGV2ZWxpbmcsIGZhcm1pbmcgJiBtYW55IG1vcmVcbiAgICAgICAgICAgICAgICAgIDwvQm9keTM+XG4gICAgICAgICAgICAgICAgPC9XaGF0WW91PlxuICAgICAgICAgICAgICAgIDxXaGF0WW91PlxuICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e3doYXR9IGFsdD1cImljb25cIiAvPlxuICAgICAgICAgICAgICAgICAgPEhlYWRpbmc0PlByZSBSYW5rZWQ8L0hlYWRpbmc0PlxuICAgICAgICAgICAgICAgICAgPEJvZHkzPlxuICAgICAgICAgICAgICAgICAgICBMb2wgQm9vc3RpbmcgcHJvdmlkZXMgY2hlYXAgV29XIGJvb3N0aW5nIG9mIGFsbCB0eXBlczpcbiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyIG9yIFB2UCBib29zdGluZywgcmFpZCBvciBkdW5nZW9ucyBjYXJyeSxcbiAgICAgICAgICAgICAgICAgICAgUG93ZXJsZXZlbGluZywgZmFybWluZyAmIG1hbnkgbW9yZVxuICAgICAgICAgICAgICAgICAgPC9Cb2R5Mz5cbiAgICAgICAgICAgICAgICA8L1doYXRZb3U+XG4gICAgICAgICAgICAgIDwvV2hhdFlvdVdyYXA+XG4gICAgICAgICAgICA8L3NlY3Rpb24+XG5cbiAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cInNlY3Rpb25cIj5cbiAgICAgICAgICAgICAgPE1haW5UYWc+T3JkZXJpbmcgcHJvY2VkdXJlPC9NYWluVGFnPlxuICAgICAgICAgICAgICA8SGVhZGluZzM+SG93IEl0IFdvcmtzPC9IZWFkaW5nMz5cbiAgICAgICAgICAgICAgPEhvdz5cbiAgICAgICAgICAgICAgICA8SG93TGlzdD5cbiAgICAgICAgICAgICAgICAgIDxCb2R5Mz5QbGFjZSBhbiBvcmRlciBjaG9vc2luZyBvcHRpb25zIHlvdSBuZWVkPC9Cb2R5Mz5cbiAgICAgICAgICAgICAgICA8L0hvd0xpc3Q+XG4gICAgICAgICAgICAgICAgPEhvd0xpc3Q+XG4gICAgICAgICAgICAgICAgICA8Qm9keTM+XG4gICAgICAgICAgICAgICAgICAgIFdlIHdpbGwgY29udGFjdCB5b3UgdmlhIG91ciBsaXZlIGNoYXQgb3IgYnkgc2VuZGluZyBhbiBlbWFpbC5cbiAgICAgICAgICAgICAgICAgICAgQWxsIHRoZSBkZXRhaWxzIHdpbGwgYmUgZGlzY3Vzc2VkIGJlZm9yZWhhbmQgYW5kIHRoZSBzdGFydFxuICAgICAgICAgICAgICAgICAgICB0aW1lIHdpbGwgYmUgc2V0IGFjY29yZGluZyB0byB5b3VyIHNjaGVkdWxlLlxuICAgICAgICAgICAgICAgICAgPC9Cb2R5Mz5cbiAgICAgICAgICAgICAgICA8L0hvd0xpc3Q+XG4gICAgICAgICAgICAgICAgPEhvd0xpc3Q+XG4gICAgICAgICAgICAgICAgICA8Qm9keTM+UGxhY2UgYW4gb3JkZXIgY2hvb3Npbmcgb3B0aW9ucyB5b3UgbmVlZDwvQm9keTM+XG4gICAgICAgICAgICAgICAgPC9Ib3dMaXN0PlxuICAgICAgICAgICAgICA8L0hvdz5cbiAgICAgICAgICAgIDwvc2VjdGlvbj5cblxuICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwic2VjdGlvblwiPlxuICAgICAgICAgICAgICA8TWFpblRhZz5BYm91dCB0aGlzIGl0ZW08L01haW5UYWc+XG4gICAgICAgICAgICAgIDxIZWFkaW5nMz5Qcm9kdWN0IERlc2NyaXB0aW9uPC9IZWFkaW5nMz5cbiAgICAgICAgICAgICAgPERlc2M+XG4gICAgICAgICAgICAgICAgVGhlIGxhc3QgYm9zcyBvZiBldmVyeSByYWlkIGluIFdvVyBpcyB1c3VhbGx5IHZlcnkgZGlmZmljdWx0IHRvXG4gICAgICAgICAgICAgICAgZGVmZWF0IGV2ZW4gaW4gTm9ybWFsIG1vZGUuIEhvd2V2ZXIsIHdpdGggcHJvcGVyIGdlYXIgYW5kIGFuXG4gICAgICAgICAgICAgICAgZXhwZXJpZW5jZWQgdGVhbSwgaXQgaXMgbW9yZSB0aGFuIHJlYWwuIFRvIGRlZmVhdCBTeWx2YW5hc1xuICAgICAgICAgICAgICAgIFdpbmRydW5uZXIgeW91IG5lZWQgdG8gZ2V0IHRocm91Z2ggMyBwaGFzZXMgYW5kIGJyaW5nIFN5bHZhbmFzXG4gICAgICAgICAgICAgICAgaGVhbHRoIGRvd24gdG8gNTAlLiBBdCBteXRoaWMgZGlmZmljdWx0eSBTb0QgU3lsdmFuYXMgV2luZHJ1bm5lclxuICAgICAgICAgICAgICAgIGtpbGwgd2lsbCBiZSBjb3VudGVkIGF0IDQ1JSBvZiBoZXIgaGVhbHRoLntcIiBcIn1cbiAgICAgICAgICAgICAgPC9EZXNjPlxuICAgICAgICAgICAgICA8RGVzYz5cbiAgICAgICAgICAgICAgICBUaGUgbGFzdCBib3NzIG9mIGV2ZXJ5IHJhaWQgaW4gV29XIGlzIHVzdWFsbHkgdmVyeSBkaWZmaWN1bHQgdG9cbiAgICAgICAgICAgICAgICBkZWZlYXQgZXZlbiBpbiBOb3JtYWwgbW9kZS4gSG93ZXZlciwgd2l0aCBwcm9wZXIgZ2VhciBhbmQgYW5cbiAgICAgICAgICAgICAgICBleHBlcmllbmNlZCB0ZWFtLCBpdCBpcyBtb3JlIHRoYW4gcmVhbC4gVG8gZGVmZWF0IFN5bHZhbmFzXG4gICAgICAgICAgICAgICAgV2luZHJ1bm5lciB5b3UgbmVlZCB0byBnZXQgdGhyb3VnaCAzIHBoYXNlcyBhbmQgYnJpbmcgU3lsdmFuYXNcbiAgICAgICAgICAgICAgICBoZWFsdGggZG93biB0byA1MCUuIEF0IG15dGhpYyBkaWZmaWN1bHR5IFNvRCBTeWx2YW5hcyBXaW5kcnVubmVyXG4gICAgICAgICAgICAgICAga2lsbCB3aWxsIGJlIGNvdW50ZWQgYXQgNDUlIG9mIGhlciBoZWFsdGgue1wiIFwifVxuICAgICAgICAgICAgICA8L0Rlc2M+XG4gICAgICAgICAgICAgIDxEZXNjPlxuICAgICAgICAgICAgICAgIFRoZSBsYXN0IGJvc3Mgb2YgZXZlcnkgcmFpZCBpbiBXb1cgaXMgdXN1YWxseSB2ZXJ5IGRpZmZpY3VsdCB0b1xuICAgICAgICAgICAgICAgIGRlZmVhdCBldmVuIGluIE5vcm1hbCBtb2RlLiBIb3dldmVyLCB3aXRoIHByb3BlciBnZWFyIGFuZCBhblxuICAgICAgICAgICAgICAgIGV4cGVyaWVuY2VkIHRlYW0sIGl0IGlzIG1vcmUgdGhhbiByZWFsLiBUbyBkZWZlYXQgU3lsdmFuYXNcbiAgICAgICAgICAgICAgICBXaW5kcnVubmVyIHlvdSBuZWVkIHRvIGdldCB0aHJvdWdoIDMgcGhhc2VzIGFuZCBicmluZyBTeWx2YW5hc1xuICAgICAgICAgICAgICAgIGhlYWx0aCBkb3duIHRvIDUwJS4gQXQgbXl0aGljIGRpZmZpY3VsdHkgU29EIFN5bHZhbmFzIFdpbmRydW5uZXJcbiAgICAgICAgICAgICAgICBraWxsIHdpbGwgYmUgY291bnRlZCBhdCA0NSUgb2YgaGVyIGhlYWx0aC57XCIgXCJ9XG4gICAgICAgICAgICAgIDwvRGVzYz5cbiAgICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgICA8L1NtYWxsQ29udGFpbmVyPlxuXG5cbiAgICAgICAgICA8RmVlZGJhY2s+XG4gICAgICAgICAgICA8Q2VudGVyPlxuICAgICAgICAgICAgICA8TWFpblRhZz5SZXZpZXcgYW5kIEZlZWRiYWNrPC9NYWluVGFnPlxuICAgICAgICAgICAgICA8SGVhZGluZzI+TGVhdmUgdXMgYSBmZWVkYmFjazwvSGVhZGluZzI+XG4gICAgICAgICAgICAgIDxCb2R5Mz5Zb3UgY2FuIGxlYXZlIGhlcmUgZmVlZGJhY2sgYW5kIHJlYWQgdXNlcuKAmXMgcmV2aWV3czwvQm9keTM+XG4gICAgICAgICAgICA8L0NlbnRlcj5cblxuICAgICAgICAgICAgPFJhdGluZz5cbiAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgPEhlYWRpbmcyPjQuOTwvSGVhZGluZzI+XG4gICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgPGltZyBzcmM9e3N0YXJ9IGFsdD1cInN0YXJcIiAvPlxuICAgICAgICAgICAgICA8aW1nIHNyYz17cmF0aW5nTG9nb30gYWx0PVwiXCIgLz5cbiAgICAgICAgICAgIDwvUmF0aW5nPlxuXG4gICAgICAgICAgICA8UmV2aWV3cz5cbiAgICAgICAgICAgICAgPFRlbGxVcz5cbiAgICAgICAgICAgICAgICA8UmV2aWV3VGl0bGU+VGVsbCB1cyBhYm91dCB5b3VyIGV4cGVyaWVuY2U8L1Jldmlld1RpdGxlPlxuICAgICAgICAgICAgICAgIDxCb2R5ND5Zb3VyIG92ZXJhbGwgcmF0aW5nPC9Cb2R5ND5cbiAgICAgICAgICAgICAgICA8UmF0aW5nSW5wdXQ+XG4gICAgICAgICAgICAgICAgICA8aW1nIHNyYz17cmF0aW5nU3Rhcn0gYWx0PSdpY29uJyAvPlxuICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e3JhdGluZ1N0YXJ9IGFsdD0naWNvbicgLz5cbiAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtyYXRpbmdTdGFyfSBhbHQ9J2ljb24nIC8+XG4gICAgICAgICAgICAgICAgICA8aW1nIHNyYz17cmF0aW5nU3Rhcn0gYWx0PSdpY29uJyAvPlxuICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e3JhdGluZ1N0YXJ9IGFsdD0naWNvbicgLz5cbiAgICAgICAgICAgICAgICA8L1JhdGluZ0lucHV0PlxuICAgICAgICAgICAgICAgIDxSZXZpZXdGb3JtPlxuICAgICAgICAgICAgICAgICAgPElucHV0IHBsYWNlaG9sZGVyPVwiVGl0bGVcIiB0eXBlPVwidGV4dFwiIC8+XG4gICAgICAgICAgICAgICAgICA8SW5wdXQgcGxhY2Vob2xkZXI9XCJOYW1lXCIgdHlwZT1cInRleHRcIiAvPlxuICAgICAgICAgICAgICAgICAgPElucHV0IHBsYWNlaG9sZGVyPVwiRW1haWxcIiB0eXBlPVwiZW1haWxcIiAvPlxuICAgICAgICAgICAgICAgICAgPE1lc3NhZ2UgcGxhY2Vob2xkZXI9XCJSZXZpZXcgdGV4dFwiIC8+XG4gICAgICAgICAgICAgICAgICA8QnV0dG9uQ29udGFpbmVyPlxuICAgICAgICAgICAgICAgICAgICA8QnRuU3VibWl0PlNlbmQgUmV2aWV3PC9CdG5TdWJtaXQ+XG4gICAgICAgICAgICAgICAgICA8L0J1dHRvbkNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICA8L1Jldmlld0Zvcm0+XG4gICAgICAgICAgICAgIDwvVGVsbFVzPlxuXG4gICAgICAgICAgICAgIDxSZXZpZXdUb3RhbD5cbiAgICAgICAgICAgICAgICA8UmV2aWV3VGl0bGU+MiBvZiAxMzIgUmV2aWV3czwvUmV2aWV3VGl0bGU+XG5cbiAgICAgICAgICAgICAgICA8UmV2aWV3Q2FyZD5cbiAgICAgICAgICAgICAgICAgIDxIZWFkaW5nNj5GYW50YXN0aWMgSm9iPC9IZWFkaW5nNj5cbiAgICAgICAgICAgICAgICAgIDxCb2R5Mz5cbiAgICAgICAgICAgICAgICAgICAgR29vZCBwdXJjaGFzZSBMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXJcbiAgICAgICAgICAgICAgICAgICAgYWRpcGlzY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZCB0ZW1wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmVcbiAgICAgICAgICAgICAgICAgICAgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS5cbiAgICAgICAgICAgICAgICAgIDwvQm9keTM+XG4gICAgICAgICAgICAgICAgICA8VmVyaWZpZWQ+XG4gICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtjaGVja30gYWx0PVwiaWNvblwiIC8+IFZlcmlmaWVkIHB1cmNoYXNlZFxuICAgICAgICAgICAgICAgICAgPC9WZXJpZmllZD5cbiAgICAgICAgICAgICAgICA8L1Jldmlld0NhcmQ+XG4gICAgICAgICAgICAgICAgPFJldmlld0NhcmQ+XG4gICAgICAgICAgICAgICAgICA8SGVhZGluZzY+RmFudGFzdGljIEpvYjwvSGVhZGluZzY+XG4gICAgICAgICAgICAgICAgICA8Qm9keTM+XG4gICAgICAgICAgICAgICAgICAgIEdvb2QgcHVyY2hhc2UgTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyXG4gICAgICAgICAgICAgICAgICAgIGFkaXBpc2NpbmcgZWxpdCwgc2VkIGRvIGVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQgdXQgbGFib3JlXG4gICAgICAgICAgICAgICAgICAgIGV0IGRvbG9yZSBtYWduYSBhbGlxdWEuXG4gICAgICAgICAgICAgICAgICA8L0JvZHkzPlxuICAgICAgICAgICAgICAgICAgPFZlcmlmaWVkPlxuICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17Y2hlY2t9IGFsdD1cImljb25cIiAvPiBWZXJpZmllZCBwdXJjaGFzZWRcbiAgICAgICAgICAgICAgICAgIDwvVmVyaWZpZWQ+XG4gICAgICAgICAgICAgICAgPC9SZXZpZXdDYXJkPlxuICAgICAgICAgICAgICA8L1Jldmlld1RvdGFsPlxuICAgICAgICAgICAgPC9SZXZpZXdzPlxuICAgICAgICAgIDwvRmVlZGJhY2s+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9NYWluUmlnaHQ+XG4gICAgPC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFByb2R1Y3RTbGlkZXIpO1xuXG5jb25zdCBNYWluUmlnaHQgPSBzdHlsZWQuZGl2YFxuICBtYXJnaW4tbGVmdDogMzc1cHg7XG4gIHdpZHRoOiBjYWxjKDEwMCUgLSAzNzVweCk7XG5cbiAgJiBpbnB1dCB7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cblxuICBAbWVkaWEgJHtkZXZpY2UudGFibGV0fSB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWFyZ2luLWxlZnQ6IHVuc2V0O1xuICB9XG5gO1xuXG5jb25zdCBDb250ZW50U2xpZGUgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LXdyYXA6IHdyYXA7XG5gO1xuXG5jb25zdCBQb3NpdGlvbnMgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBnYXA6IDIwcHg7XG4gIG1hcmdpbi10b3A6IDQwcHg7XG4gIGZsZXgtd3JhcDogd3JhcDtcblxuICAmIHNlbGVjdCB7XG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICB3aWR0aDogMTAwJTtcbiAgfVxuXG4gIEBtZWRpYSAke2RldmljZS5sYXB0b3B9IHtcbiAgICBmbGV4LXdyYXA6IG5vd3JhcDtcbiAgfVxuICBcbmA7XG5cbmNvbnN0IFBvc2l0aW9uID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgd2lkdGg6IDMwMHB4O1xuXG4gICYgaW1nIHtcbiAgICBtYXJnaW46IDQwcHggMCA1MHB4IDA7XG4gIH1cbmA7XG5cbmNvbnN0IEJhc2tldCA9IHN0eWxlZC5kaXZgXG4gIGJvcmRlci1yYWRpdXM6IDEycHg7XG4gIGJveC1zaGFkb3c6IDBweCA0cHggMzBweCAwcHggIzMyMzIzMjFhO1xuICBtaW4td2lkdGg6IDMwMHB4O1xuYDtcblxuY29uc3QgSGVhZGVyID0gc3R5bGVkLmRpdmBcbiAgYmFja2dyb3VuZDogdXJsKCR7YmdCYXNrZXR9KSBuby1yZXBlYXQ7XG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XG4gIHBhZGRpbmc6IDIwcHg7XG4gIGNvbG9yOiAjZmZmO1xuICBib3JkZXItcmFkaXVzOiAxMnB4O1xuYDtcblxuY29uc3QgQmFza2V0Qm9keSA9IHN0eWxlZC5kaXZgXG4gIHBhZGRpbmc6IDIwcHg7XG5gO1xuXG5jb25zdCBCQkluZm8gPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nLWJvdHRvbTogMTBweDtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlYmVmZjg7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcblxuICAmIGg2IHtcbiAgICBjb2xvcjogdmFyKC0tdGV4dC1kYXJrKTtcbiAgfVxuYDtcblxuY29uc3QgQkJUaXRsZSA9IHN0eWxlZChIZWFkaW5nNylgXG4gIG1hcmdpbi1ib3R0b206IDZweDtcbiAgY29sb3I6IHZhcigtLXByaW1hcnktcHJlc3NlZCk7XG5gO1xuXG5jb25zdCBCQkRldGFpbCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgbWFyZ2luLXRvcDogMTBweDtcbmA7XG5cbmNvbnN0IEV4dHJhT3B0aW9ucyA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGdhcDogMTRweDtcbiAgbWFyZ2luOiAyMHB4IDA7XG5gO1xuXG5jb25zdCBFeHRyYSA9IHN0eWxlZC5zcGFuYFxuICBwYWRkaW5nOiAxNnB4IDI2cHg7XG4gIGJvcmRlci1yYWRpdXM6IDEycHg7XG4gIGJhY2tncm91bmQ6ICNlYmVmZjg7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG5gO1xuXG5jb25zdCBFeHRyYUluZm8gPSBzdHlsZWQuZGl2YFxuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuYDtcblxuY29uc3QgV2hhdFlvdVdyYXAgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBnYXA6IDcwcHg7XG4gIG1hcmdpbi10b3A6IDIwcHg7XG5gO1xuXG5jb25zdCBXaGF0WW91ID0gc3R5bGVkLmRpdmBcbiAgJiBpbWcge1xuICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XG4gIH1cbmA7XG5cbmNvbnN0IEhvdyA9IHN0eWxlZC51bGBcbiAgbWFyZ2luLXRvcDogMjBweDtcbiAgY291bnRlci1yZXNldDogY291bnRlci1saXN0O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHBhZGRpbmc6IDA7XG5gO1xuXG5jb25zdCBIb3dMaXN0ID0gc3R5bGVkLmxpYFxuICBtYXJnaW46IDAgMCAyMHB4IDQwcHg7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG5cbiAgJjo6YmVmb3JlIHtcbiAgICBjb3VudGVyLWluY3JlbWVudDogY291bnRlci1saXN0O1xuICAgIGNvbnRlbnQ6IGNvdW50ZXIoY291bnRlci1saXN0KTtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgbGVmdDogMDtcbiAgICBiYWNrZ3JvdW5kOiB1cmwoJHtjb3VudH0pO1xuICAgIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgICB3aWR0aDogMjZweDtcbiAgICBoZWlnaHQ6IDI2cHg7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBmb250LXdlaWdodDogNzAwO1xuICAgIGNvbG9yOiAjNTQ3OWU1O1xuICB9XG5gO1xuXG5jb25zdCBEZXNjID0gc3R5bGVkKEJvZHkzKWBcbiAgbWFyZ2luLXRvcDogMjBweDtcbiAgZGlzcGxheTogYmxvY2s7XG5gO1xuXG5jb25zdCBGZWVkYmFjayA9IHN0eWxlZC5zZWN0aW9uYFxuICBtYXJnaW4tdG9wOiAxMjBweDtcbmA7XG5cbmNvbnN0IFJhdGluZyA9IHN0eWxlZC5kaXZgXG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudChcbiAgICAxMDQuMjJkZWcsXG4gICAgI2ViZjNmZiA4LjQ0JSxcbiAgICByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMikgNTkuNTUlLFxuICAgICNmNGU2ZmYgMTAzLjYzJVxuICApO1xuICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoMzBweCk7XG4gIC8qIE5vdGU6IGJhY2tkcm9wLWZpbHRlciBoYXMgbWluaW1hbCBicm93c2VyIHN1cHBvcnQgKi9cbiAgYm9yZGVyLXJhZGl1czogMzBweDtcbiAgcGFkZGluZzogMjBweDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB3aWR0aDogNDAwcHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGdhcDogMjBweDtcbiAgbWFyZ2luOiA0MHB4IGF1dG87XG5gO1xuXG5jb25zdCBSZXZpZXdzID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZ2FwOiA5MHB4O1xuICBtYXJnaW4tdG9wOiA0MHB4O1xuYDtcblxuY29uc3QgVGVsbFVzID0gc3R5bGVkLmRpdmBgO1xuXG5jb25zdCBSYXRpbmdJbnB1dCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGdhcDogNXB4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBtYXJnaW4tdG9wOiA1cHg7XG5gXG5cbmNvbnN0IFJldmlld1RpdGxlID0gc3R5bGVkKEhlYWRpbmc0KWBcbiAgbWFyZ2luLWJvdHRvbTogMjBweDtcbmA7XG5cbmNvbnN0IFJldmlld0Zvcm0gPSBzdHlsZWQuZm9ybWBcbiAgbWFyZ2luLXRvcDogMjBweDtcbmA7XG5cbmNvbnN0IE1lc3NhZ2UgPSBzdHlsZWQudGV4dGFyZWFgXG4gIGJvcmRlcjogbm9uZTtcbiAgd2lkdGg6IDEwMCU7XG4gIGJhY2tncm91bmQ6ICNlYmVmZjg7XG4gIGJvcmRlci1yYWRpdXM6IDZweDtcbiAgcGFkZGluZzogMTBweDtcbiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XG5gO1xuXG5jb25zdCBCdG5TdWJtaXQgPSBzdHlsZWQoQnRuUHJpbWFyeSlgYDtcblxuY29uc3QgUmV2aWV3VG90YWwgPSBzdHlsZWQoVGVsbFVzKWBgO1xuXG5jb25zdCBSZXZpZXdDYXJkID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luLWJvdHRvbTogMzBweDtcbmA7XG5cbmNvbnN0IFZlcmlmaWVkID0gc3R5bGVkLmRpdmBcbiAgY29sb3I6ICMxNjk2NDk7XG4gIG1hcmdpbi10b3A6IDEwcHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGdhcDogMTBweDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbmA7XG4iXX0= */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const BBInfo=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1iq9jn922\",label:\"BBInfo\"})( false?undefined:{name:\"10ji5kt\",styles:\"padding-bottom:10px;border-bottom:1px solid #ebeff8;text-align:center;& h6{color:var(--text-dark);}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const BBTitle=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading7\"], false?undefined:{target:\"e1iq9jn921\",label:\"BBTitle\"})( false?undefined:{name:\"l6yj11\",styles:\"margin-bottom:6px;color:var(--primary-pressed)\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const BBDetail=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1iq9jn920\",label:\"BBDetail\"})( false?undefined:{name:\"47ywsc\",styles:\"display:flex;justify-content:space-between;align-items:center;margin-top:10px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const ExtraOptions=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1iq9jn919\",label:\"ExtraOptions\"})( false?undefined:{name:\"s3977d\",styles:\"display:flex;gap:14px;margin:20px 0\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Extra=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"span\", false?undefined:{target:\"e1iq9jn918\",label:\"Extra\"})( false?undefined:{name:\"12hjnkb\",styles:\"padding:16px 26px;border-radius:12px;background:#ebeff8;white-space:nowrap\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const ExtraInfo=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1iq9jn917\",label:\"ExtraInfo\"})( false?undefined:{name:\"hwl8e3\",styles:\"margin-bottom:20px;display:flex\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const WhatYouWrap=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1iq9jn916\",label:\"WhatYouWrap\"})( false?undefined:{name:\"1yj7lir\",styles:\"display:flex;gap:70px;margin-top:20px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const WhatYou=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1iq9jn915\",label:\"WhatYou\"})( false?undefined:{name:\"nlibun\",styles:\"& img{margin-bottom:20px;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const How=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"ul\", false?undefined:{target:\"e1iq9jn914\",label:\"How\"})( false?undefined:{name:\"oizis2\",styles:\"margin-top:20px;counter-reset:counter-list;position:relative;padding:0\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const HowList=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"li\", false?undefined:{target:\"e1iq9jn913\",label:\"HowList\"})(\"margin:0 0 20px 40px;list-style:none;&::before{counter-increment:counter-list;content:counter(counter-list);position:absolute;left:0;background:url(\",_images_slider_card_count_png__WEBPACK_IMPORTED_MODULE_14__[\"default\"],\");border-radius:8px;width:26px;height:26px;display:flex;justify-content:center;font-weight:700;color:#5479e5;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const Desc=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Body3\"], false?undefined:{target:\"e1iq9jn912\",label:\"Desc\"})( false?undefined:{name:\"118vlvy\",styles:\"margin-top:20px;display:block\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Feedback=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"section\", false?undefined:{target:\"e1iq9jn911\",label:\"Feedback\"})( false?undefined:{name:\"1glwqyb\",styles:\"margin-top:120px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Rating=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1iq9jn910\",label:\"Rating\"})( false?undefined:{name:\"silwi0\",styles:\"background:linear-gradient(\\n    104.22deg,\\n    #ebf3ff 8.44%,\\n    rgba(255, 255, 255, 0.2) 59.55%,\\n    #f4e6ff 103.63%\\n  );backdrop-filter:blur(30px);border-radius:30px;padding:20px;text-align:center;width:400px;display:flex;flex-direction:column;align-items:center;gap:20px;margin:40px auto\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Reviews=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1iq9jn99\",label:\"Reviews\"})( false?undefined:{name:\"er7k5y\",styles:\"display:flex;gap:90px;margin-top:40px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const TellUs=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1iq9jn98\",label:\"TellUs\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rcHJvL0RvY3VtZW50cy9Qcm9qZWN0cy92ZWt0b3JhLWxiL3BhY2thZ2VzL2xiL3NyYy9jb21wb25lbnRzL3Byb2R1Y3QvcHJvZHVjdC1zbGlkZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBOGV5QiIsImZpbGUiOiIvVXNlcnMvbWFjYm9va3Byby9Eb2N1bWVudHMvUHJvamVjdHMvdmVrdG9yYS1sYi9wYWNrYWdlcy9sYi9zcmMvY29tcG9uZW50cy9wcm9kdWN0L3Byb2R1Y3Qtc2xpZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29ubmVjdCwgc3R5bGVkIH0gZnJvbSBcImZyb250aXR5XCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBEaXZpZGVyIH0gZnJvbSBcIi4uL290aGVyL2RpdmlkZXJcIjtcbmltcG9ydCBTaWRlYmFyTmF2IGZyb20gXCIuLi9zaWRlYmFyLW5hdlwiO1xuaW1wb3J0IHsgTWFpblRhZyB9IGZyb20gXCIuLi90eXBvZ3JhcGh5L21haW4tdGFnXCI7XG5pbXBvcnQge1xuICBCb2R5MixcbiAgQm9keTMsXG4gIEJvZHk0LFxuICBIZWFkaW5nMixcbiAgSGVhZGluZzMsXG4gIEhlYWRpbmc0LFxuICBIZWFkaW5nNixcbiAgSGVhZGluZzcsXG59IGZyb20gXCIuLi90eXBvZ3JhcGh5L3RleHRcIjtcbmltcG9ydCBzdGFyIGZyb20gXCIuLi9pbWFnZXMvc3Rhci1yYXRpbmcucG5nXCI7XG5pbXBvcnQgcmF0aW5nTG9nbyBmcm9tIFwiLi4vaW1hZ2VzL1RydXN0cGlsb3QucG5nXCI7XG5pbXBvcnQgeyBCdXR0b25Db250YWluZXIgfSBmcm9tIFwiLi4vYnV0dG9ucy9idXR0b24tY29udGFpbmVyXCI7XG5pbXBvcnQgeyBDZW50ZXIgfSBmcm9tIFwiLi4vdHlwb2dyYXBoeS9jZW50ZXJcIjtcbmltcG9ydCB7IEJ0blByaW1hcnkgfSBmcm9tIFwiLi4vYnV0dG9ucy9idXR0b24tcHJpbWFyeVwiO1xuaW1wb3J0IGl0ZW1JbWcgZnJvbSBcIi4uL2ltYWdlcy9vcmRlci9pdGVtLnBuZ1wiO1xuaW1wb3J0IHsgSW5wdXQsIE9wdGlvbiwgU2VsZWN0IH0gZnJvbSBcIi4uL2Zvcm0vaW5wdXRcIjtcbmltcG9ydCB3aGF0IGZyb20gXCIuLi9pbWFnZXMvc2xpZGVyL3doYXQuc3ZnXCI7XG5pbXBvcnQgY291bnQgZnJvbSBcIi4uL2ltYWdlcy9zbGlkZXIvY2FyZC1jb3VudC5wbmdcIjtcbmltcG9ydCBjaGVjayBmcm9tIFwiLi4vaW1hZ2VzL2ljb25zL3ZlcmlmaWVkLnN2Z1wiO1xuaW1wb3J0IHJhdGluZ1N0YXIgZnJvbSBcIi4uL2ltYWdlcy9pY29ucy9zdGFyLXJhdGluZy5zdmdcIjtcbmltcG9ydCBiZ0Jhc2tldCBmcm9tIFwiLi4vaW1hZ2VzL3NsaWRlci9iZy1iYXNrZXQucG5nXCI7XG5pbXBvcnQgQnJlYWRjcnVtYnMgZnJvbSBcIi4uL2JyZWFkY3J1bWJzXCI7XG5pbXBvcnQgeyBTbWFsbENvbnRhaW5lciB9IGZyb20gXCIuLi9jb250aWFuZXIvc21hbGwtY29udGFpbmVyXCI7XG5pbXBvcnQgeyBkZXZpY2UgfSBmcm9tIFwiLi4vcXVlcmllc1wiO1xuXG5jb25zdCBQcm9kdWN0U2xpZGVyID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8U2lkZWJhck5hdiAvPlxuXG4gICAgICA8TWFpblJpZ2h0PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lclwiPlxuICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cInNlY3Rpb25cIj5cbiAgICAgICAgICAgIDxCcmVhZGNydW1icyAvPlxuICAgICAgICAgICAgPEhlYWRpbmcyPldlIG9mZmVyIHRvIGJ1eSBib29zdGVyIGZvciB5b3VyIGFjY291bnQ8L0hlYWRpbmcyPlxuICAgICAgICAgICAgPEJvZHkzPlxuICAgICAgICAgICAgICBMb2wgQm9vc3RpbmcgcHJvdmlkZXMgY2hlYXAgV29XIGJvb3N0aW5nIG9mIGFsbCB0eXBlczogY2hhcmFjdGVyXG4gICAgICAgICAgICAgIG9yIFB2UCBib29zdGluZywgcmFpZCBvciBkdW5nZW9ucyBjYXJyeSwgUG93ZXJsZXZlbGluZywgZmFybWluZyAmXG4gICAgICAgICAgICAgIG1hbnkgbW9yZSB0byBzYXZlIHlvdXIgdGltZS4gQm9vayBhIHNsb3QgaW4gb3VyIGxpdmUgY2hhdCBhbmRcbiAgICAgICAgICAgICAgZW5qb3kgV29XIGJvb3N0IXtcIiBcIn1cbiAgICAgICAgICAgIDwvQm9keTM+XG5cbiAgICAgICAgICAgIDxDb250ZW50U2xpZGU+XG4gICAgICAgICAgICAgIDxQb3NpdGlvbnM+XG4gICAgICAgICAgICAgICAgPFBvc2l0aW9uPlxuICAgICAgICAgICAgICAgICAgPEhlYWRpbmc0PkN1cnJlbnQgUG9zaXRpb248L0hlYWRpbmc0PlxuICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e2l0ZW1JbWd9IGFsdD1cIml0ZW1cIiAvPlxuICAgICAgICAgICAgICAgICAgPFNlbGVjdCBuYW1lPVwicG9zaXRpb25cIj5cbiAgICAgICAgICAgICAgICAgICAgPE9wdGlvbiB2YWx1ZT1cImlyb25cIj5Jcm9uPC9PcHRpb24+XG4gICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9XCJwbGF0aW51bVwiPlBsYXRpbnVtPC9PcHRpb24+XG4gICAgICAgICAgICAgICAgICA8L1NlbGVjdD5cbiAgICAgICAgICAgICAgICAgIDxTZWxlY3QgbmFtZT1cImRpdmlzaW9uXCI+XG4gICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9XCJkaXZpc2lvbiA0XCI+RGl2aXNpb24gNDwvT3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPVwiZGl2aXNpb24gNVwiPkRpdmlzaW9uIDU8L09wdGlvbj5cbiAgICAgICAgICAgICAgICAgIDwvU2VsZWN0PlxuICAgICAgICAgICAgICAgICAgPFNlbGVjdCBuYW1lPVwiTFBcIj5cbiAgICAgICAgICAgICAgICAgICAgPE9wdGlvbiB2YWx1ZT1cImxwIDIwXCI+TFAgMC0yMDwvT3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPVwibHAgMzBcIj5MUCAwLTMwPC9PcHRpb24+XG4gICAgICAgICAgICAgICAgICA8L1NlbGVjdD5cbiAgICAgICAgICAgICAgICA8L1Bvc2l0aW9uPlxuICAgICAgICAgICAgICAgIDxQb3NpdGlvbj5cbiAgICAgICAgICAgICAgICAgIDxIZWFkaW5nND5EZXNpcmVkIFBvc2l0aW9uPC9IZWFkaW5nND5cbiAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtpdGVtSW1nfSBhbHQ9XCJpdGVtXCIgLz5cbiAgICAgICAgICAgICAgICAgIDxTZWxlY3QgbmFtZT1cInBvc2l0aW9uXCI+XG4gICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9XCJwbGF0aW51bVwiPlBsYXRpbnVtPC9PcHRpb24+XG4gICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9XCJpcm9uXCI+SXJvbjwvT3B0aW9uPlxuICAgICAgICAgICAgICAgICAgPC9TZWxlY3Q+XG4gICAgICAgICAgICAgICAgICA8U2VsZWN0IG5hbWU9XCJkaXZpc2lvblwiPlxuICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPVwiZGl2aXNpb24gNFwiPkRpdmlzaW9uIDQ8L09wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgPE9wdGlvbiB2YWx1ZT1cImRpdmlzaW9uIDVcIj5EaXZpc2lvbiA1PC9PcHRpb24+XG4gICAgICAgICAgICAgICAgICA8L1NlbGVjdD5cbiAgICAgICAgICAgICAgICA8L1Bvc2l0aW9uPlxuICAgICAgICAgICAgICAgIDxQb3NpdGlvbj5cbiAgICAgICAgICAgICAgICAgIDxIZWFkaW5nND5TZWxlY3QgU2VydmVyPC9IZWFkaW5nND5cbiAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtpdGVtSW1nfSBhbHQ9XCJpdGVtXCIgLz5cbiAgICAgICAgICAgICAgICAgIDxTZWxlY3QgbmFtZT1cInNlcnZlclwiPlxuICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPVwiZXV3XCI+RVVXPC9PcHRpb24+XG4gICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9XCJldXNcIj5FVVM8L09wdGlvbj5cbiAgICAgICAgICAgICAgICAgIDwvU2VsZWN0PlxuICAgICAgICAgICAgICAgIDwvUG9zaXRpb24+XG4gICAgICAgICAgICAgIDwvUG9zaXRpb25zPlxuXG4gICAgICAgICAgICAgIDxCYXNrZXQ+XG4gICAgICAgICAgICAgICAgPEhlYWRlcj5cbiAgICAgICAgICAgICAgICAgIDxIZWFkaW5nND5NeSBPcmRlcjwvSGVhZGluZzQ+XG4gICAgICAgICAgICAgICAgPC9IZWFkZXI+XG4gICAgICAgICAgICAgICAgPEJhc2tldEJvZHk+XG4gICAgICAgICAgICAgICAgICA8QkJJbmZvPlxuICAgICAgICAgICAgICAgICAgICA8QkJUaXRsZT5Db21wbGV0aW9uIFRpbWU8L0JCVGl0bGU+XG4gICAgICAgICAgICAgICAgICAgIDxIZWFkaW5nNj4xIERheTwvSGVhZGluZzY+XG4gICAgICAgICAgICAgICAgICA8L0JCSW5mbz5cbiAgICAgICAgICAgICAgICAgIDxCQkluZm8+XG4gICAgICAgICAgICAgICAgICAgIDxCQlRpdGxlPkV4dHJhIE9wdGlvbnM8L0JCVGl0bGU+XG4gICAgICAgICAgICAgICAgICAgIDxIZWFkaW5nNj5DaGFtcGlvbiAoJDUpPC9IZWFkaW5nNj5cbiAgICAgICAgICAgICAgICAgICAgPEhlYWRpbmc2PkNoYW1waW9uICgkNSk8L0hlYWRpbmc2PlxuICAgICAgICAgICAgICAgICAgPC9CQkluZm8+XG4gICAgICAgICAgICAgICAgICA8QkJJbmZvPlxuICAgICAgICAgICAgICAgICAgICA8QkJUaXRsZT5Zb3UgRWFybjwvQkJUaXRsZT5cbiAgICAgICAgICAgICAgICAgICAgPEhlYWRpbmc2PjEyIEZveCBDb2lucyAoMS40JCk8L0hlYWRpbmc2PlxuICAgICAgICAgICAgICAgICAgPC9CQkluZm8+XG4gICAgICAgICAgICAgICAgICA8QkJEZXRhaWw+XG4gICAgICAgICAgICAgICAgICAgIDxCQlRpdGxlPkZpbmFsIFByaWNlPC9CQlRpdGxlPlxuICAgICAgICAgICAgICAgICAgICA8SGVhZGluZzM+JDM0PC9IZWFkaW5nMz5cbiAgICAgICAgICAgICAgICAgIDwvQkJEZXRhaWw+XG4gICAgICAgICAgICAgICAgICA8QnV0dG9uQ29udGFpbmVyPlxuICAgICAgICAgICAgICAgICAgICA8QnRuUHJpbWFyeT5SYW5rIFVwPC9CdG5QcmltYXJ5PlxuICAgICAgICAgICAgICAgICAgPC9CdXR0b25Db250YWluZXI+XG4gICAgICAgICAgICAgICAgPC9CYXNrZXRCb2R5PlxuICAgICAgICAgICAgICA8L0Jhc2tldD5cbiAgICAgICAgICAgIDwvQ29udGVudFNsaWRlPlxuXG4gICAgICAgICAgICA8RGl2aWRlciAvPlxuICAgICAgICAgIDwvc2VjdGlvbj5cblxuICAgICAgICAgIDxTbWFsbENvbnRhaW5lcj5cblxuICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwic2VjdGlvblwiPlxuICAgICAgICAgICAgICA8TWFpblRhZz5Tb21lIGFkZGluZ3MgZm9yIHlvdSA8L01haW5UYWc+XG4gICAgICAgICAgICAgIDxIZWFkaW5nMz5FeHRyYSBPcHRpb25zPC9IZWFkaW5nMz5cbiAgICAgICAgICAgICAgPEJvZHkzPlxuICAgICAgICAgICAgICAgIExvbCBCb29zdGluZyBwcm92aWRlcyBjaGVhcCBXb1cgYm9vc3Rpbmcgb2YgYWxsIHR5cGVzOiBjaGFyYWN0ZXJcbiAgICAgICAgICAgICAgICBvciBQdlAgYm9vc3RpbmcsIHJhaWQgb3IgZHVuZ2VvbnMgY2FycnksIFBvd2VybGV2ZWxpbmcsIGZhcm1pbmcgJlxuICAgICAgICAgICAgICAgIG1hbnkgbW9yZSB0byBzYXZlIHlvdXIgdGltZS4gQm9vayBhIHNsb3QgaW4gb3VyIGxpdmUgY2hhdCBhbmRcbiAgICAgICAgICAgICAgICBlbmpveSBXb1cgYm9vc3Qhe1wiIFwifVxuICAgICAgICAgICAgICA8L0JvZHkzPlxuXG4gICAgICAgICAgICAgIDxFeHRyYU9wdGlvbnM+XG4gICAgICAgICAgICAgICAgPEV4dHJhPlNwZWxsIEJ1dHRvbnM8L0V4dHJhPlxuICAgICAgICAgICAgICAgIDxFeHRyYT5TcGVsbCBCdXR0b25zPC9FeHRyYT5cbiAgICAgICAgICAgICAgICA8RXh0cmE+U3BlbGwgQnV0dG9uczwvRXh0cmE+XG4gICAgICAgICAgICAgICAgPEV4dHJhPlNwZWxsIEJ1dHRvbnM8L0V4dHJhPlxuICAgICAgICAgICAgICAgIDxFeHRyYT5TcGVsbCBCdXR0b25zPC9FeHRyYT5cbiAgICAgICAgICAgICAgPC9FeHRyYU9wdGlvbnM+XG5cbiAgICAgICAgICAgICAgPEV4dHJhSW5mbz5cbiAgICAgICAgICAgICAgICA8Qm9keTM+VGhpcyBvcHRpb24gKzEwJSB0byBmaW5hbCBwcmljZSA8L0JvZHkzPlxuICAgICAgICAgICAgICA8L0V4dHJhSW5mbz5cblxuICAgICAgICAgICAgICA8Qm9keTM+XG4gICAgICAgICAgICAgICAgV291bGQgeW91IGxpa2UgdG8gc2VlIGhvdyBhIENoYWxsZW5nZXIgcGxheWVyIHBsYXlzIG9uIHlvdXJcbiAgICAgICAgICAgICAgICBhY2NvdW50IGluIHlvdXIgZWxvPyBCeSBlbmFibGluZyB0aGlzIG9wdGlvbiB3ZSB3aWxsIHNldCB1cCBhXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBzdHJlYW0gc3BlY2lmaWNhbGx5IGZvciB5b3UhIFlvdXIgYm9vc3RlciB3aWxsIGFsc28gYmVcbiAgICAgICAgICAgICAgICBhYmxlIHRvIGNoYXQgd2l0aCB5b3UsIHByb3ZpZGUgeW91IHJhbmsgdXAgaW1hZ2VzIGFuZCBzZW5kIHlvdVxuICAgICAgICAgICAgICAgIFZPRHMgLyByZWNvcmRpbmdzIG9mIHRoZSBnYW1lcyBwbGF5ZWQuIFlvdXIgcmVwbGF5cyB3aWxsIGJlIHNlbnRcbiAgICAgICAgICAgICAgICB0byB5b3UgYWZ0ZXIgb3JkZXIgY29tcGxldGlvbiBvbiB5b3VyIGUtbWFpbC4gSWYgeW91IHdpc2ggdXMgdG9cbiAgICAgICAgICAgICAgICBzZW5kIHRoZW0gdG8geW91LCBwbGVhc2Ugd3JpdGUgaXQgaW4gdGhlIG5vdGVzIG9yIG5vdGlmeSB1cyBiZWZvcmVcbiAgICAgICAgICAgICAgICB3ZSBpbml0aWF0ZSB5b3VyIG9yZGVyLlxuICAgICAgICAgICAgICA8L0JvZHkzPlxuICAgICAgICAgICAgPC9zZWN0aW9uPlxuXG4gICAgICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJzZWN0aW9uXCI+XG4gICAgICAgICAgICAgIDxNYWluVGFnPlNvbWUgYWRkaW5ncyBmb3IgeW91IDwvTWFpblRhZz5cbiAgICAgICAgICAgICAgPEhlYWRpbmczPldoYXQgWW91IFdpbGwgR2V0PC9IZWFkaW5nMz5cblxuICAgICAgICAgICAgICA8V2hhdFlvdVdyYXA+XG4gICAgICAgICAgICAgICAgPFdoYXRZb3U+XG4gICAgICAgICAgICAgICAgICA8aW1nIHNyYz17d2hhdH0gYWx0PVwiaWNvblwiIC8+XG4gICAgICAgICAgICAgICAgICA8SGVhZGluZzQ+UHJlIFJhbmtlZDwvSGVhZGluZzQ+XG4gICAgICAgICAgICAgICAgICA8Qm9keTM+XG4gICAgICAgICAgICAgICAgICAgIExvbCBCb29zdGluZyBwcm92aWRlcyBjaGVhcCBXb1cgYm9vc3Rpbmcgb2YgYWxsIHR5cGVzOlxuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXIgb3IgUHZQIGJvb3N0aW5nLCByYWlkIG9yIGR1bmdlb25zIGNhcnJ5LFxuICAgICAgICAgICAgICAgICAgICBQb3dlcmxldmVsaW5nLCBmYXJtaW5nICYgbWFueSBtb3JlXG4gICAgICAgICAgICAgICAgICA8L0JvZHkzPlxuICAgICAgICAgICAgICAgIDwvV2hhdFlvdT5cbiAgICAgICAgICAgICAgICA8V2hhdFlvdT5cbiAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXt3aGF0fSBhbHQ9XCJpY29uXCIgLz5cbiAgICAgICAgICAgICAgICAgIDxIZWFkaW5nND5QcmUgUmFua2VkPC9IZWFkaW5nND5cbiAgICAgICAgICAgICAgICAgIDxCb2R5Mz5cbiAgICAgICAgICAgICAgICAgICAgTG9sIEJvb3N0aW5nIHByb3ZpZGVzIGNoZWFwIFdvVyBib29zdGluZyBvZiBhbGwgdHlwZXM6XG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlciBvciBQdlAgYm9vc3RpbmcsIHJhaWQgb3IgZHVuZ2VvbnMgY2FycnksXG4gICAgICAgICAgICAgICAgICAgIFBvd2VybGV2ZWxpbmcsIGZhcm1pbmcgJiBtYW55IG1vcmVcbiAgICAgICAgICAgICAgICAgIDwvQm9keTM+XG4gICAgICAgICAgICAgICAgPC9XaGF0WW91PlxuICAgICAgICAgICAgICAgIDxXaGF0WW91PlxuICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e3doYXR9IGFsdD1cImljb25cIiAvPlxuICAgICAgICAgICAgICAgICAgPEhlYWRpbmc0PlByZSBSYW5rZWQ8L0hlYWRpbmc0PlxuICAgICAgICAgICAgICAgICAgPEJvZHkzPlxuICAgICAgICAgICAgICAgICAgICBMb2wgQm9vc3RpbmcgcHJvdmlkZXMgY2hlYXAgV29XIGJvb3N0aW5nIG9mIGFsbCB0eXBlczpcbiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyIG9yIFB2UCBib29zdGluZywgcmFpZCBvciBkdW5nZW9ucyBjYXJyeSxcbiAgICAgICAgICAgICAgICAgICAgUG93ZXJsZXZlbGluZywgZmFybWluZyAmIG1hbnkgbW9yZVxuICAgICAgICAgICAgICAgICAgPC9Cb2R5Mz5cbiAgICAgICAgICAgICAgICA8L1doYXRZb3U+XG4gICAgICAgICAgICAgIDwvV2hhdFlvdVdyYXA+XG4gICAgICAgICAgICA8L3NlY3Rpb24+XG5cbiAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cInNlY3Rpb25cIj5cbiAgICAgICAgICAgICAgPE1haW5UYWc+T3JkZXJpbmcgcHJvY2VkdXJlPC9NYWluVGFnPlxuICAgICAgICAgICAgICA8SGVhZGluZzM+SG93IEl0IFdvcmtzPC9IZWFkaW5nMz5cbiAgICAgICAgICAgICAgPEhvdz5cbiAgICAgICAgICAgICAgICA8SG93TGlzdD5cbiAgICAgICAgICAgICAgICAgIDxCb2R5Mz5QbGFjZSBhbiBvcmRlciBjaG9vc2luZyBvcHRpb25zIHlvdSBuZWVkPC9Cb2R5Mz5cbiAgICAgICAgICAgICAgICA8L0hvd0xpc3Q+XG4gICAgICAgICAgICAgICAgPEhvd0xpc3Q+XG4gICAgICAgICAgICAgICAgICA8Qm9keTM+XG4gICAgICAgICAgICAgICAgICAgIFdlIHdpbGwgY29udGFjdCB5b3UgdmlhIG91ciBsaXZlIGNoYXQgb3IgYnkgc2VuZGluZyBhbiBlbWFpbC5cbiAgICAgICAgICAgICAgICAgICAgQWxsIHRoZSBkZXRhaWxzIHdpbGwgYmUgZGlzY3Vzc2VkIGJlZm9yZWhhbmQgYW5kIHRoZSBzdGFydFxuICAgICAgICAgICAgICAgICAgICB0aW1lIHdpbGwgYmUgc2V0IGFjY29yZGluZyB0byB5b3VyIHNjaGVkdWxlLlxuICAgICAgICAgICAgICAgICAgPC9Cb2R5Mz5cbiAgICAgICAgICAgICAgICA8L0hvd0xpc3Q+XG4gICAgICAgICAgICAgICAgPEhvd0xpc3Q+XG4gICAgICAgICAgICAgICAgICA8Qm9keTM+UGxhY2UgYW4gb3JkZXIgY2hvb3Npbmcgb3B0aW9ucyB5b3UgbmVlZDwvQm9keTM+XG4gICAgICAgICAgICAgICAgPC9Ib3dMaXN0PlxuICAgICAgICAgICAgICA8L0hvdz5cbiAgICAgICAgICAgIDwvc2VjdGlvbj5cblxuICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwic2VjdGlvblwiPlxuICAgICAgICAgICAgICA8TWFpblRhZz5BYm91dCB0aGlzIGl0ZW08L01haW5UYWc+XG4gICAgICAgICAgICAgIDxIZWFkaW5nMz5Qcm9kdWN0IERlc2NyaXB0aW9uPC9IZWFkaW5nMz5cbiAgICAgICAgICAgICAgPERlc2M+XG4gICAgICAgICAgICAgICAgVGhlIGxhc3QgYm9zcyBvZiBldmVyeSByYWlkIGluIFdvVyBpcyB1c3VhbGx5IHZlcnkgZGlmZmljdWx0IHRvXG4gICAgICAgICAgICAgICAgZGVmZWF0IGV2ZW4gaW4gTm9ybWFsIG1vZGUuIEhvd2V2ZXIsIHdpdGggcHJvcGVyIGdlYXIgYW5kIGFuXG4gICAgICAgICAgICAgICAgZXhwZXJpZW5jZWQgdGVhbSwgaXQgaXMgbW9yZSB0aGFuIHJlYWwuIFRvIGRlZmVhdCBTeWx2YW5hc1xuICAgICAgICAgICAgICAgIFdpbmRydW5uZXIgeW91IG5lZWQgdG8gZ2V0IHRocm91Z2ggMyBwaGFzZXMgYW5kIGJyaW5nIFN5bHZhbmFzXG4gICAgICAgICAgICAgICAgaGVhbHRoIGRvd24gdG8gNTAlLiBBdCBteXRoaWMgZGlmZmljdWx0eSBTb0QgU3lsdmFuYXMgV2luZHJ1bm5lclxuICAgICAgICAgICAgICAgIGtpbGwgd2lsbCBiZSBjb3VudGVkIGF0IDQ1JSBvZiBoZXIgaGVhbHRoLntcIiBcIn1cbiAgICAgICAgICAgICAgPC9EZXNjPlxuICAgICAgICAgICAgICA8RGVzYz5cbiAgICAgICAgICAgICAgICBUaGUgbGFzdCBib3NzIG9mIGV2ZXJ5IHJhaWQgaW4gV29XIGlzIHVzdWFsbHkgdmVyeSBkaWZmaWN1bHQgdG9cbiAgICAgICAgICAgICAgICBkZWZlYXQgZXZlbiBpbiBOb3JtYWwgbW9kZS4gSG93ZXZlciwgd2l0aCBwcm9wZXIgZ2VhciBhbmQgYW5cbiAgICAgICAgICAgICAgICBleHBlcmllbmNlZCB0ZWFtLCBpdCBpcyBtb3JlIHRoYW4gcmVhbC4gVG8gZGVmZWF0IFN5bHZhbmFzXG4gICAgICAgICAgICAgICAgV2luZHJ1bm5lciB5b3UgbmVlZCB0byBnZXQgdGhyb3VnaCAzIHBoYXNlcyBhbmQgYnJpbmcgU3lsdmFuYXNcbiAgICAgICAgICAgICAgICBoZWFsdGggZG93biB0byA1MCUuIEF0IG15dGhpYyBkaWZmaWN1bHR5IFNvRCBTeWx2YW5hcyBXaW5kcnVubmVyXG4gICAgICAgICAgICAgICAga2lsbCB3aWxsIGJlIGNvdW50ZWQgYXQgNDUlIG9mIGhlciBoZWFsdGgue1wiIFwifVxuICAgICAgICAgICAgICA8L0Rlc2M+XG4gICAgICAgICAgICAgIDxEZXNjPlxuICAgICAgICAgICAgICAgIFRoZSBsYXN0IGJvc3Mgb2YgZXZlcnkgcmFpZCBpbiBXb1cgaXMgdXN1YWxseSB2ZXJ5IGRpZmZpY3VsdCB0b1xuICAgICAgICAgICAgICAgIGRlZmVhdCBldmVuIGluIE5vcm1hbCBtb2RlLiBIb3dldmVyLCB3aXRoIHByb3BlciBnZWFyIGFuZCBhblxuICAgICAgICAgICAgICAgIGV4cGVyaWVuY2VkIHRlYW0sIGl0IGlzIG1vcmUgdGhhbiByZWFsLiBUbyBkZWZlYXQgU3lsdmFuYXNcbiAgICAgICAgICAgICAgICBXaW5kcnVubmVyIHlvdSBuZWVkIHRvIGdldCB0aHJvdWdoIDMgcGhhc2VzIGFuZCBicmluZyBTeWx2YW5hc1xuICAgICAgICAgICAgICAgIGhlYWx0aCBkb3duIHRvIDUwJS4gQXQgbXl0aGljIGRpZmZpY3VsdHkgU29EIFN5bHZhbmFzIFdpbmRydW5uZXJcbiAgICAgICAgICAgICAgICBraWxsIHdpbGwgYmUgY291bnRlZCBhdCA0NSUgb2YgaGVyIGhlYWx0aC57XCIgXCJ9XG4gICAgICAgICAgICAgIDwvRGVzYz5cbiAgICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgICA8L1NtYWxsQ29udGFpbmVyPlxuXG5cbiAgICAgICAgICA8RmVlZGJhY2s+XG4gICAgICAgICAgICA8Q2VudGVyPlxuICAgICAgICAgICAgICA8TWFpblRhZz5SZXZpZXcgYW5kIEZlZWRiYWNrPC9NYWluVGFnPlxuICAgICAgICAgICAgICA8SGVhZGluZzI+TGVhdmUgdXMgYSBmZWVkYmFjazwvSGVhZGluZzI+XG4gICAgICAgICAgICAgIDxCb2R5Mz5Zb3UgY2FuIGxlYXZlIGhlcmUgZmVlZGJhY2sgYW5kIHJlYWQgdXNlcuKAmXMgcmV2aWV3czwvQm9keTM+XG4gICAgICAgICAgICA8L0NlbnRlcj5cblxuICAgICAgICAgICAgPFJhdGluZz5cbiAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgPEhlYWRpbmcyPjQuOTwvSGVhZGluZzI+XG4gICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgPGltZyBzcmM9e3N0YXJ9IGFsdD1cInN0YXJcIiAvPlxuICAgICAgICAgICAgICA8aW1nIHNyYz17cmF0aW5nTG9nb30gYWx0PVwiXCIgLz5cbiAgICAgICAgICAgIDwvUmF0aW5nPlxuXG4gICAgICAgICAgICA8UmV2aWV3cz5cbiAgICAgICAgICAgICAgPFRlbGxVcz5cbiAgICAgICAgICAgICAgICA8UmV2aWV3VGl0bGU+VGVsbCB1cyBhYm91dCB5b3VyIGV4cGVyaWVuY2U8L1Jldmlld1RpdGxlPlxuICAgICAgICAgICAgICAgIDxCb2R5ND5Zb3VyIG92ZXJhbGwgcmF0aW5nPC9Cb2R5ND5cbiAgICAgICAgICAgICAgICA8UmF0aW5nSW5wdXQ+XG4gICAgICAgICAgICAgICAgICA8aW1nIHNyYz17cmF0aW5nU3Rhcn0gYWx0PSdpY29uJyAvPlxuICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e3JhdGluZ1N0YXJ9IGFsdD0naWNvbicgLz5cbiAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtyYXRpbmdTdGFyfSBhbHQ9J2ljb24nIC8+XG4gICAgICAgICAgICAgICAgICA8aW1nIHNyYz17cmF0aW5nU3Rhcn0gYWx0PSdpY29uJyAvPlxuICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e3JhdGluZ1N0YXJ9IGFsdD0naWNvbicgLz5cbiAgICAgICAgICAgICAgICA8L1JhdGluZ0lucHV0PlxuICAgICAgICAgICAgICAgIDxSZXZpZXdGb3JtPlxuICAgICAgICAgICAgICAgICAgPElucHV0IHBsYWNlaG9sZGVyPVwiVGl0bGVcIiB0eXBlPVwidGV4dFwiIC8+XG4gICAgICAgICAgICAgICAgICA8SW5wdXQgcGxhY2Vob2xkZXI9XCJOYW1lXCIgdHlwZT1cInRleHRcIiAvPlxuICAgICAgICAgICAgICAgICAgPElucHV0IHBsYWNlaG9sZGVyPVwiRW1haWxcIiB0eXBlPVwiZW1haWxcIiAvPlxuICAgICAgICAgICAgICAgICAgPE1lc3NhZ2UgcGxhY2Vob2xkZXI9XCJSZXZpZXcgdGV4dFwiIC8+XG4gICAgICAgICAgICAgICAgICA8QnV0dG9uQ29udGFpbmVyPlxuICAgICAgICAgICAgICAgICAgICA8QnRuU3VibWl0PlNlbmQgUmV2aWV3PC9CdG5TdWJtaXQ+XG4gICAgICAgICAgICAgICAgICA8L0J1dHRvbkNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICA8L1Jldmlld0Zvcm0+XG4gICAgICAgICAgICAgIDwvVGVsbFVzPlxuXG4gICAgICAgICAgICAgIDxSZXZpZXdUb3RhbD5cbiAgICAgICAgICAgICAgICA8UmV2aWV3VGl0bGU+MiBvZiAxMzIgUmV2aWV3czwvUmV2aWV3VGl0bGU+XG5cbiAgICAgICAgICAgICAgICA8UmV2aWV3Q2FyZD5cbiAgICAgICAgICAgICAgICAgIDxIZWFkaW5nNj5GYW50YXN0aWMgSm9iPC9IZWFkaW5nNj5cbiAgICAgICAgICAgICAgICAgIDxCb2R5Mz5cbiAgICAgICAgICAgICAgICAgICAgR29vZCBwdXJjaGFzZSBMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXJcbiAgICAgICAgICAgICAgICAgICAgYWRpcGlzY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZCB0ZW1wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmVcbiAgICAgICAgICAgICAgICAgICAgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS5cbiAgICAgICAgICAgICAgICAgIDwvQm9keTM+XG4gICAgICAgICAgICAgICAgICA8VmVyaWZpZWQ+XG4gICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtjaGVja30gYWx0PVwiaWNvblwiIC8+IFZlcmlmaWVkIHB1cmNoYXNlZFxuICAgICAgICAgICAgICAgICAgPC9WZXJpZmllZD5cbiAgICAgICAgICAgICAgICA8L1Jldmlld0NhcmQ+XG4gICAgICAgICAgICAgICAgPFJldmlld0NhcmQ+XG4gICAgICAgICAgICAgICAgICA8SGVhZGluZzY+RmFudGFzdGljIEpvYjwvSGVhZGluZzY+XG4gICAgICAgICAgICAgICAgICA8Qm9keTM+XG4gICAgICAgICAgICAgICAgICAgIEdvb2QgcHVyY2hhc2UgTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyXG4gICAgICAgICAgICAgICAgICAgIGFkaXBpc2NpbmcgZWxpdCwgc2VkIGRvIGVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQgdXQgbGFib3JlXG4gICAgICAgICAgICAgICAgICAgIGV0IGRvbG9yZSBtYWduYSBhbGlxdWEuXG4gICAgICAgICAgICAgICAgICA8L0JvZHkzPlxuICAgICAgICAgICAgICAgICAgPFZlcmlmaWVkPlxuICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17Y2hlY2t9IGFsdD1cImljb25cIiAvPiBWZXJpZmllZCBwdXJjaGFzZWRcbiAgICAgICAgICAgICAgICAgIDwvVmVyaWZpZWQ+XG4gICAgICAgICAgICAgICAgPC9SZXZpZXdDYXJkPlxuICAgICAgICAgICAgICA8L1Jldmlld1RvdGFsPlxuICAgICAgICAgICAgPC9SZXZpZXdzPlxuICAgICAgICAgIDwvRmVlZGJhY2s+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9NYWluUmlnaHQ+XG4gICAgPC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFByb2R1Y3RTbGlkZXIpO1xuXG5jb25zdCBNYWluUmlnaHQgPSBzdHlsZWQuZGl2YFxuICBtYXJnaW4tbGVmdDogMzc1cHg7XG4gIHdpZHRoOiBjYWxjKDEwMCUgLSAzNzVweCk7XG5cbiAgJiBpbnB1dCB7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cblxuICBAbWVkaWEgJHtkZXZpY2UudGFibGV0fSB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWFyZ2luLWxlZnQ6IHVuc2V0O1xuICB9XG5gO1xuXG5jb25zdCBDb250ZW50U2xpZGUgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LXdyYXA6IHdyYXA7XG5gO1xuXG5jb25zdCBQb3NpdGlvbnMgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBnYXA6IDIwcHg7XG4gIG1hcmdpbi10b3A6IDQwcHg7XG4gIGZsZXgtd3JhcDogd3JhcDtcblxuICAmIHNlbGVjdCB7XG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICB3aWR0aDogMTAwJTtcbiAgfVxuXG4gIEBtZWRpYSAke2RldmljZS5sYXB0b3B9IHtcbiAgICBmbGV4LXdyYXA6IG5vd3JhcDtcbiAgfVxuICBcbmA7XG5cbmNvbnN0IFBvc2l0aW9uID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgd2lkdGg6IDMwMHB4O1xuXG4gICYgaW1nIHtcbiAgICBtYXJnaW46IDQwcHggMCA1MHB4IDA7XG4gIH1cbmA7XG5cbmNvbnN0IEJhc2tldCA9IHN0eWxlZC5kaXZgXG4gIGJvcmRlci1yYWRpdXM6IDEycHg7XG4gIGJveC1zaGFkb3c6IDBweCA0cHggMzBweCAwcHggIzMyMzIzMjFhO1xuICBtaW4td2lkdGg6IDMwMHB4O1xuYDtcblxuY29uc3QgSGVhZGVyID0gc3R5bGVkLmRpdmBcbiAgYmFja2dyb3VuZDogdXJsKCR7YmdCYXNrZXR9KSBuby1yZXBlYXQ7XG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XG4gIHBhZGRpbmc6IDIwcHg7XG4gIGNvbG9yOiAjZmZmO1xuICBib3JkZXItcmFkaXVzOiAxMnB4O1xuYDtcblxuY29uc3QgQmFza2V0Qm9keSA9IHN0eWxlZC5kaXZgXG4gIHBhZGRpbmc6IDIwcHg7XG5gO1xuXG5jb25zdCBCQkluZm8gPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nLWJvdHRvbTogMTBweDtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlYmVmZjg7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcblxuICAmIGg2IHtcbiAgICBjb2xvcjogdmFyKC0tdGV4dC1kYXJrKTtcbiAgfVxuYDtcblxuY29uc3QgQkJUaXRsZSA9IHN0eWxlZChIZWFkaW5nNylgXG4gIG1hcmdpbi1ib3R0b206IDZweDtcbiAgY29sb3I6IHZhcigtLXByaW1hcnktcHJlc3NlZCk7XG5gO1xuXG5jb25zdCBCQkRldGFpbCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgbWFyZ2luLXRvcDogMTBweDtcbmA7XG5cbmNvbnN0IEV4dHJhT3B0aW9ucyA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGdhcDogMTRweDtcbiAgbWFyZ2luOiAyMHB4IDA7XG5gO1xuXG5jb25zdCBFeHRyYSA9IHN0eWxlZC5zcGFuYFxuICBwYWRkaW5nOiAxNnB4IDI2cHg7XG4gIGJvcmRlci1yYWRpdXM6IDEycHg7XG4gIGJhY2tncm91bmQ6ICNlYmVmZjg7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG5gO1xuXG5jb25zdCBFeHRyYUluZm8gPSBzdHlsZWQuZGl2YFxuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuYDtcblxuY29uc3QgV2hhdFlvdVdyYXAgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBnYXA6IDcwcHg7XG4gIG1hcmdpbi10b3A6IDIwcHg7XG5gO1xuXG5jb25zdCBXaGF0WW91ID0gc3R5bGVkLmRpdmBcbiAgJiBpbWcge1xuICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XG4gIH1cbmA7XG5cbmNvbnN0IEhvdyA9IHN0eWxlZC51bGBcbiAgbWFyZ2luLXRvcDogMjBweDtcbiAgY291bnRlci1yZXNldDogY291bnRlci1saXN0O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHBhZGRpbmc6IDA7XG5gO1xuXG5jb25zdCBIb3dMaXN0ID0gc3R5bGVkLmxpYFxuICBtYXJnaW46IDAgMCAyMHB4IDQwcHg7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG5cbiAgJjo6YmVmb3JlIHtcbiAgICBjb3VudGVyLWluY3JlbWVudDogY291bnRlci1saXN0O1xuICAgIGNvbnRlbnQ6IGNvdW50ZXIoY291bnRlci1saXN0KTtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgbGVmdDogMDtcbiAgICBiYWNrZ3JvdW5kOiB1cmwoJHtjb3VudH0pO1xuICAgIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgICB3aWR0aDogMjZweDtcbiAgICBoZWlnaHQ6IDI2cHg7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBmb250LXdlaWdodDogNzAwO1xuICAgIGNvbG9yOiAjNTQ3OWU1O1xuICB9XG5gO1xuXG5jb25zdCBEZXNjID0gc3R5bGVkKEJvZHkzKWBcbiAgbWFyZ2luLXRvcDogMjBweDtcbiAgZGlzcGxheTogYmxvY2s7XG5gO1xuXG5jb25zdCBGZWVkYmFjayA9IHN0eWxlZC5zZWN0aW9uYFxuICBtYXJnaW4tdG9wOiAxMjBweDtcbmA7XG5cbmNvbnN0IFJhdGluZyA9IHN0eWxlZC5kaXZgXG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudChcbiAgICAxMDQuMjJkZWcsXG4gICAgI2ViZjNmZiA4LjQ0JSxcbiAgICByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMikgNTkuNTUlLFxuICAgICNmNGU2ZmYgMTAzLjYzJVxuICApO1xuICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoMzBweCk7XG4gIC8qIE5vdGU6IGJhY2tkcm9wLWZpbHRlciBoYXMgbWluaW1hbCBicm93c2VyIHN1cHBvcnQgKi9cbiAgYm9yZGVyLXJhZGl1czogMzBweDtcbiAgcGFkZGluZzogMjBweDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB3aWR0aDogNDAwcHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGdhcDogMjBweDtcbiAgbWFyZ2luOiA0MHB4IGF1dG87XG5gO1xuXG5jb25zdCBSZXZpZXdzID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZ2FwOiA5MHB4O1xuICBtYXJnaW4tdG9wOiA0MHB4O1xuYDtcblxuY29uc3QgVGVsbFVzID0gc3R5bGVkLmRpdmBgO1xuXG5jb25zdCBSYXRpbmdJbnB1dCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGdhcDogNXB4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBtYXJnaW4tdG9wOiA1cHg7XG5gXG5cbmNvbnN0IFJldmlld1RpdGxlID0gc3R5bGVkKEhlYWRpbmc0KWBcbiAgbWFyZ2luLWJvdHRvbTogMjBweDtcbmA7XG5cbmNvbnN0IFJldmlld0Zvcm0gPSBzdHlsZWQuZm9ybWBcbiAgbWFyZ2luLXRvcDogMjBweDtcbmA7XG5cbmNvbnN0IE1lc3NhZ2UgPSBzdHlsZWQudGV4dGFyZWFgXG4gIGJvcmRlcjogbm9uZTtcbiAgd2lkdGg6IDEwMCU7XG4gIGJhY2tncm91bmQ6ICNlYmVmZjg7XG4gIGJvcmRlci1yYWRpdXM6IDZweDtcbiAgcGFkZGluZzogMTBweDtcbiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XG5gO1xuXG5jb25zdCBCdG5TdWJtaXQgPSBzdHlsZWQoQnRuUHJpbWFyeSlgYDtcblxuY29uc3QgUmV2aWV3VG90YWwgPSBzdHlsZWQoVGVsbFVzKWBgO1xuXG5jb25zdCBSZXZpZXdDYXJkID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luLWJvdHRvbTogMzBweDtcbmA7XG5cbmNvbnN0IFZlcmlmaWVkID0gc3R5bGVkLmRpdmBcbiAgY29sb3I6ICMxNjk2NDk7XG4gIG1hcmdpbi10b3A6IDEwcHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGdhcDogMTBweDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbmA7XG4iXX0= */\");const RatingInput=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1iq9jn97\",label:\"RatingInput\"})( false?undefined:{name:\"ww9og5\",styles:\"display:flex;gap:5px;align-items:center;margin-top:5px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rcHJvL0RvY3VtZW50cy9Qcm9qZWN0cy92ZWt0b3JhLWxiL3BhY2thZ2VzL2xiL3NyYy9jb21wb25lbnRzL3Byb2R1Y3QvcHJvZHVjdC1zbGlkZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ2Y4QiIsImZpbGUiOiIvVXNlcnMvbWFjYm9va3Byby9Eb2N1bWVudHMvUHJvamVjdHMvdmVrdG9yYS1sYi9wYWNrYWdlcy9sYi9zcmMvY29tcG9uZW50cy9wcm9kdWN0L3Byb2R1Y3Qtc2xpZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29ubmVjdCwgc3R5bGVkIH0gZnJvbSBcImZyb250aXR5XCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBEaXZpZGVyIH0gZnJvbSBcIi4uL290aGVyL2RpdmlkZXJcIjtcbmltcG9ydCBTaWRlYmFyTmF2IGZyb20gXCIuLi9zaWRlYmFyLW5hdlwiO1xuaW1wb3J0IHsgTWFpblRhZyB9IGZyb20gXCIuLi90eXBvZ3JhcGh5L21haW4tdGFnXCI7XG5pbXBvcnQge1xuICBCb2R5MixcbiAgQm9keTMsXG4gIEJvZHk0LFxuICBIZWFkaW5nMixcbiAgSGVhZGluZzMsXG4gIEhlYWRpbmc0LFxuICBIZWFkaW5nNixcbiAgSGVhZGluZzcsXG59IGZyb20gXCIuLi90eXBvZ3JhcGh5L3RleHRcIjtcbmltcG9ydCBzdGFyIGZyb20gXCIuLi9pbWFnZXMvc3Rhci1yYXRpbmcucG5nXCI7XG5pbXBvcnQgcmF0aW5nTG9nbyBmcm9tIFwiLi4vaW1hZ2VzL1RydXN0cGlsb3QucG5nXCI7XG5pbXBvcnQgeyBCdXR0b25Db250YWluZXIgfSBmcm9tIFwiLi4vYnV0dG9ucy9idXR0b24tY29udGFpbmVyXCI7XG5pbXBvcnQgeyBDZW50ZXIgfSBmcm9tIFwiLi4vdHlwb2dyYXBoeS9jZW50ZXJcIjtcbmltcG9ydCB7IEJ0blByaW1hcnkgfSBmcm9tIFwiLi4vYnV0dG9ucy9idXR0b24tcHJpbWFyeVwiO1xuaW1wb3J0IGl0ZW1JbWcgZnJvbSBcIi4uL2ltYWdlcy9vcmRlci9pdGVtLnBuZ1wiO1xuaW1wb3J0IHsgSW5wdXQsIE9wdGlvbiwgU2VsZWN0IH0gZnJvbSBcIi4uL2Zvcm0vaW5wdXRcIjtcbmltcG9ydCB3aGF0IGZyb20gXCIuLi9pbWFnZXMvc2xpZGVyL3doYXQuc3ZnXCI7XG5pbXBvcnQgY291bnQgZnJvbSBcIi4uL2ltYWdlcy9zbGlkZXIvY2FyZC1jb3VudC5wbmdcIjtcbmltcG9ydCBjaGVjayBmcm9tIFwiLi4vaW1hZ2VzL2ljb25zL3ZlcmlmaWVkLnN2Z1wiO1xuaW1wb3J0IHJhdGluZ1N0YXIgZnJvbSBcIi4uL2ltYWdlcy9pY29ucy9zdGFyLXJhdGluZy5zdmdcIjtcbmltcG9ydCBiZ0Jhc2tldCBmcm9tIFwiLi4vaW1hZ2VzL3NsaWRlci9iZy1iYXNrZXQucG5nXCI7XG5pbXBvcnQgQnJlYWRjcnVtYnMgZnJvbSBcIi4uL2JyZWFkY3J1bWJzXCI7XG5pbXBvcnQgeyBTbWFsbENvbnRhaW5lciB9IGZyb20gXCIuLi9jb250aWFuZXIvc21hbGwtY29udGFpbmVyXCI7XG5pbXBvcnQgeyBkZXZpY2UgfSBmcm9tIFwiLi4vcXVlcmllc1wiO1xuXG5jb25zdCBQcm9kdWN0U2xpZGVyID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8U2lkZWJhck5hdiAvPlxuXG4gICAgICA8TWFpblJpZ2h0PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lclwiPlxuICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cInNlY3Rpb25cIj5cbiAgICAgICAgICAgIDxCcmVhZGNydW1icyAvPlxuICAgICAgICAgICAgPEhlYWRpbmcyPldlIG9mZmVyIHRvIGJ1eSBib29zdGVyIGZvciB5b3VyIGFjY291bnQ8L0hlYWRpbmcyPlxuICAgICAgICAgICAgPEJvZHkzPlxuICAgICAgICAgICAgICBMb2wgQm9vc3RpbmcgcHJvdmlkZXMgY2hlYXAgV29XIGJvb3N0aW5nIG9mIGFsbCB0eXBlczogY2hhcmFjdGVyXG4gICAgICAgICAgICAgIG9yIFB2UCBib29zdGluZywgcmFpZCBvciBkdW5nZW9ucyBjYXJyeSwgUG93ZXJsZXZlbGluZywgZmFybWluZyAmXG4gICAgICAgICAgICAgIG1hbnkgbW9yZSB0byBzYXZlIHlvdXIgdGltZS4gQm9vayBhIHNsb3QgaW4gb3VyIGxpdmUgY2hhdCBhbmRcbiAgICAgICAgICAgICAgZW5qb3kgV29XIGJvb3N0IXtcIiBcIn1cbiAgICAgICAgICAgIDwvQm9keTM+XG5cbiAgICAgICAgICAgIDxDb250ZW50U2xpZGU+XG4gICAgICAgICAgICAgIDxQb3NpdGlvbnM+XG4gICAgICAgICAgICAgICAgPFBvc2l0aW9uPlxuICAgICAgICAgICAgICAgICAgPEhlYWRpbmc0PkN1cnJlbnQgUG9zaXRpb248L0hlYWRpbmc0PlxuICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e2l0ZW1JbWd9IGFsdD1cIml0ZW1cIiAvPlxuICAgICAgICAgICAgICAgICAgPFNlbGVjdCBuYW1lPVwicG9zaXRpb25cIj5cbiAgICAgICAgICAgICAgICAgICAgPE9wdGlvbiB2YWx1ZT1cImlyb25cIj5Jcm9uPC9PcHRpb24+XG4gICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9XCJwbGF0aW51bVwiPlBsYXRpbnVtPC9PcHRpb24+XG4gICAgICAgICAgICAgICAgICA8L1NlbGVjdD5cbiAgICAgICAgICAgICAgICAgIDxTZWxlY3QgbmFtZT1cImRpdmlzaW9uXCI+XG4gICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9XCJkaXZpc2lvbiA0XCI+RGl2aXNpb24gNDwvT3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPVwiZGl2aXNpb24gNVwiPkRpdmlzaW9uIDU8L09wdGlvbj5cbiAgICAgICAgICAgICAgICAgIDwvU2VsZWN0PlxuICAgICAgICAgICAgICAgICAgPFNlbGVjdCBuYW1lPVwiTFBcIj5cbiAgICAgICAgICAgICAgICAgICAgPE9wdGlvbiB2YWx1ZT1cImxwIDIwXCI+TFAgMC0yMDwvT3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPVwibHAgMzBcIj5MUCAwLTMwPC9PcHRpb24+XG4gICAgICAgICAgICAgICAgICA8L1NlbGVjdD5cbiAgICAgICAgICAgICAgICA8L1Bvc2l0aW9uPlxuICAgICAgICAgICAgICAgIDxQb3NpdGlvbj5cbiAgICAgICAgICAgICAgICAgIDxIZWFkaW5nND5EZXNpcmVkIFBvc2l0aW9uPC9IZWFkaW5nND5cbiAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtpdGVtSW1nfSBhbHQ9XCJpdGVtXCIgLz5cbiAgICAgICAgICAgICAgICAgIDxTZWxlY3QgbmFtZT1cInBvc2l0aW9uXCI+XG4gICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9XCJwbGF0aW51bVwiPlBsYXRpbnVtPC9PcHRpb24+XG4gICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9XCJpcm9uXCI+SXJvbjwvT3B0aW9uPlxuICAgICAgICAgICAgICAgICAgPC9TZWxlY3Q+XG4gICAgICAgICAgICAgICAgICA8U2VsZWN0IG5hbWU9XCJkaXZpc2lvblwiPlxuICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPVwiZGl2aXNpb24gNFwiPkRpdmlzaW9uIDQ8L09wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgPE9wdGlvbiB2YWx1ZT1cImRpdmlzaW9uIDVcIj5EaXZpc2lvbiA1PC9PcHRpb24+XG4gICAgICAgICAgICAgICAgICA8L1NlbGVjdD5cbiAgICAgICAgICAgICAgICA8L1Bvc2l0aW9uPlxuICAgICAgICAgICAgICAgIDxQb3NpdGlvbj5cbiAgICAgICAgICAgICAgICAgIDxIZWFkaW5nND5TZWxlY3QgU2VydmVyPC9IZWFkaW5nND5cbiAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtpdGVtSW1nfSBhbHQ9XCJpdGVtXCIgLz5cbiAgICAgICAgICAgICAgICAgIDxTZWxlY3QgbmFtZT1cInNlcnZlclwiPlxuICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPVwiZXV3XCI+RVVXPC9PcHRpb24+XG4gICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9XCJldXNcIj5FVVM8L09wdGlvbj5cbiAgICAgICAgICAgICAgICAgIDwvU2VsZWN0PlxuICAgICAgICAgICAgICAgIDwvUG9zaXRpb24+XG4gICAgICAgICAgICAgIDwvUG9zaXRpb25zPlxuXG4gICAgICAgICAgICAgIDxCYXNrZXQ+XG4gICAgICAgICAgICAgICAgPEhlYWRlcj5cbiAgICAgICAgICAgICAgICAgIDxIZWFkaW5nND5NeSBPcmRlcjwvSGVhZGluZzQ+XG4gICAgICAgICAgICAgICAgPC9IZWFkZXI+XG4gICAgICAgICAgICAgICAgPEJhc2tldEJvZHk+XG4gICAgICAgICAgICAgICAgICA8QkJJbmZvPlxuICAgICAgICAgICAgICAgICAgICA8QkJUaXRsZT5Db21wbGV0aW9uIFRpbWU8L0JCVGl0bGU+XG4gICAgICAgICAgICAgICAgICAgIDxIZWFkaW5nNj4xIERheTwvSGVhZGluZzY+XG4gICAgICAgICAgICAgICAgICA8L0JCSW5mbz5cbiAgICAgICAgICAgICAgICAgIDxCQkluZm8+XG4gICAgICAgICAgICAgICAgICAgIDxCQlRpdGxlPkV4dHJhIE9wdGlvbnM8L0JCVGl0bGU+XG4gICAgICAgICAgICAgICAgICAgIDxIZWFkaW5nNj5DaGFtcGlvbiAoJDUpPC9IZWFkaW5nNj5cbiAgICAgICAgICAgICAgICAgICAgPEhlYWRpbmc2PkNoYW1waW9uICgkNSk8L0hlYWRpbmc2PlxuICAgICAgICAgICAgICAgICAgPC9CQkluZm8+XG4gICAgICAgICAgICAgICAgICA8QkJJbmZvPlxuICAgICAgICAgICAgICAgICAgICA8QkJUaXRsZT5Zb3UgRWFybjwvQkJUaXRsZT5cbiAgICAgICAgICAgICAgICAgICAgPEhlYWRpbmc2PjEyIEZveCBDb2lucyAoMS40JCk8L0hlYWRpbmc2PlxuICAgICAgICAgICAgICAgICAgPC9CQkluZm8+XG4gICAgICAgICAgICAgICAgICA8QkJEZXRhaWw+XG4gICAgICAgICAgICAgICAgICAgIDxCQlRpdGxlPkZpbmFsIFByaWNlPC9CQlRpdGxlPlxuICAgICAgICAgICAgICAgICAgICA8SGVhZGluZzM+JDM0PC9IZWFkaW5nMz5cbiAgICAgICAgICAgICAgICAgIDwvQkJEZXRhaWw+XG4gICAgICAgICAgICAgICAgICA8QnV0dG9uQ29udGFpbmVyPlxuICAgICAgICAgICAgICAgICAgICA8QnRuUHJpbWFyeT5SYW5rIFVwPC9CdG5QcmltYXJ5PlxuICAgICAgICAgICAgICAgICAgPC9CdXR0b25Db250YWluZXI+XG4gICAgICAgICAgICAgICAgPC9CYXNrZXRCb2R5PlxuICAgICAgICAgICAgICA8L0Jhc2tldD5cbiAgICAgICAgICAgIDwvQ29udGVudFNsaWRlPlxuXG4gICAgICAgICAgICA8RGl2aWRlciAvPlxuICAgICAgICAgIDwvc2VjdGlvbj5cblxuICAgICAgICAgIDxTbWFsbENvbnRhaW5lcj5cblxuICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwic2VjdGlvblwiPlxuICAgICAgICAgICAgICA8TWFpblRhZz5Tb21lIGFkZGluZ3MgZm9yIHlvdSA8L01haW5UYWc+XG4gICAgICAgICAgICAgIDxIZWFkaW5nMz5FeHRyYSBPcHRpb25zPC9IZWFkaW5nMz5cbiAgICAgICAgICAgICAgPEJvZHkzPlxuICAgICAgICAgICAgICAgIExvbCBCb29zdGluZyBwcm92aWRlcyBjaGVhcCBXb1cgYm9vc3Rpbmcgb2YgYWxsIHR5cGVzOiBjaGFyYWN0ZXJcbiAgICAgICAgICAgICAgICBvciBQdlAgYm9vc3RpbmcsIHJhaWQgb3IgZHVuZ2VvbnMgY2FycnksIFBvd2VybGV2ZWxpbmcsIGZhcm1pbmcgJlxuICAgICAgICAgICAgICAgIG1hbnkgbW9yZSB0byBzYXZlIHlvdXIgdGltZS4gQm9vayBhIHNsb3QgaW4gb3VyIGxpdmUgY2hhdCBhbmRcbiAgICAgICAgICAgICAgICBlbmpveSBXb1cgYm9vc3Qhe1wiIFwifVxuICAgICAgICAgICAgICA8L0JvZHkzPlxuXG4gICAgICAgICAgICAgIDxFeHRyYU9wdGlvbnM+XG4gICAgICAgICAgICAgICAgPEV4dHJhPlNwZWxsIEJ1dHRvbnM8L0V4dHJhPlxuICAgICAgICAgICAgICAgIDxFeHRyYT5TcGVsbCBCdXR0b25zPC9FeHRyYT5cbiAgICAgICAgICAgICAgICA8RXh0cmE+U3BlbGwgQnV0dG9uczwvRXh0cmE+XG4gICAgICAgICAgICAgICAgPEV4dHJhPlNwZWxsIEJ1dHRvbnM8L0V4dHJhPlxuICAgICAgICAgICAgICAgIDxFeHRyYT5TcGVsbCBCdXR0b25zPC9FeHRyYT5cbiAgICAgICAgICAgICAgPC9FeHRyYU9wdGlvbnM+XG5cbiAgICAgICAgICAgICAgPEV4dHJhSW5mbz5cbiAgICAgICAgICAgICAgICA8Qm9keTM+VGhpcyBvcHRpb24gKzEwJSB0byBmaW5hbCBwcmljZSA8L0JvZHkzPlxuICAgICAgICAgICAgICA8L0V4dHJhSW5mbz5cblxuICAgICAgICAgICAgICA8Qm9keTM+XG4gICAgICAgICAgICAgICAgV291bGQgeW91IGxpa2UgdG8gc2VlIGhvdyBhIENoYWxsZW5nZXIgcGxheWVyIHBsYXlzIG9uIHlvdXJcbiAgICAgICAgICAgICAgICBhY2NvdW50IGluIHlvdXIgZWxvPyBCeSBlbmFibGluZyB0aGlzIG9wdGlvbiB3ZSB3aWxsIHNldCB1cCBhXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBzdHJlYW0gc3BlY2lmaWNhbGx5IGZvciB5b3UhIFlvdXIgYm9vc3RlciB3aWxsIGFsc28gYmVcbiAgICAgICAgICAgICAgICBhYmxlIHRvIGNoYXQgd2l0aCB5b3UsIHByb3ZpZGUgeW91IHJhbmsgdXAgaW1hZ2VzIGFuZCBzZW5kIHlvdVxuICAgICAgICAgICAgICAgIFZPRHMgLyByZWNvcmRpbmdzIG9mIHRoZSBnYW1lcyBwbGF5ZWQuIFlvdXIgcmVwbGF5cyB3aWxsIGJlIHNlbnRcbiAgICAgICAgICAgICAgICB0byB5b3UgYWZ0ZXIgb3JkZXIgY29tcGxldGlvbiBvbiB5b3VyIGUtbWFpbC4gSWYgeW91IHdpc2ggdXMgdG9cbiAgICAgICAgICAgICAgICBzZW5kIHRoZW0gdG8geW91LCBwbGVhc2Ugd3JpdGUgaXQgaW4gdGhlIG5vdGVzIG9yIG5vdGlmeSB1cyBiZWZvcmVcbiAgICAgICAgICAgICAgICB3ZSBpbml0aWF0ZSB5b3VyIG9yZGVyLlxuICAgICAgICAgICAgICA8L0JvZHkzPlxuICAgICAgICAgICAgPC9zZWN0aW9uPlxuXG4gICAgICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJzZWN0aW9uXCI+XG4gICAgICAgICAgICAgIDxNYWluVGFnPlNvbWUgYWRkaW5ncyBmb3IgeW91IDwvTWFpblRhZz5cbiAgICAgICAgICAgICAgPEhlYWRpbmczPldoYXQgWW91IFdpbGwgR2V0PC9IZWFkaW5nMz5cblxuICAgICAgICAgICAgICA8V2hhdFlvdVdyYXA+XG4gICAgICAgICAgICAgICAgPFdoYXRZb3U+XG4gICAgICAgICAgICAgICAgICA8aW1nIHNyYz17d2hhdH0gYWx0PVwiaWNvblwiIC8+XG4gICAgICAgICAgICAgICAgICA8SGVhZGluZzQ+UHJlIFJhbmtlZDwvSGVhZGluZzQ+XG4gICAgICAgICAgICAgICAgICA8Qm9keTM+XG4gICAgICAgICAgICAgICAgICAgIExvbCBCb29zdGluZyBwcm92aWRlcyBjaGVhcCBXb1cgYm9vc3Rpbmcgb2YgYWxsIHR5cGVzOlxuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXIgb3IgUHZQIGJvb3N0aW5nLCByYWlkIG9yIGR1bmdlb25zIGNhcnJ5LFxuICAgICAgICAgICAgICAgICAgICBQb3dlcmxldmVsaW5nLCBmYXJtaW5nICYgbWFueSBtb3JlXG4gICAgICAgICAgICAgICAgICA8L0JvZHkzPlxuICAgICAgICAgICAgICAgIDwvV2hhdFlvdT5cbiAgICAgICAgICAgICAgICA8V2hhdFlvdT5cbiAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXt3aGF0fSBhbHQ9XCJpY29uXCIgLz5cbiAgICAgICAgICAgICAgICAgIDxIZWFkaW5nND5QcmUgUmFua2VkPC9IZWFkaW5nND5cbiAgICAgICAgICAgICAgICAgIDxCb2R5Mz5cbiAgICAgICAgICAgICAgICAgICAgTG9sIEJvb3N0aW5nIHByb3ZpZGVzIGNoZWFwIFdvVyBib29zdGluZyBvZiBhbGwgdHlwZXM6XG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlciBvciBQdlAgYm9vc3RpbmcsIHJhaWQgb3IgZHVuZ2VvbnMgY2FycnksXG4gICAgICAgICAgICAgICAgICAgIFBvd2VybGV2ZWxpbmcsIGZhcm1pbmcgJiBtYW55IG1vcmVcbiAgICAgICAgICAgICAgICAgIDwvQm9keTM+XG4gICAgICAgICAgICAgICAgPC9XaGF0WW91PlxuICAgICAgICAgICAgICAgIDxXaGF0WW91PlxuICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e3doYXR9IGFsdD1cImljb25cIiAvPlxuICAgICAgICAgICAgICAgICAgPEhlYWRpbmc0PlByZSBSYW5rZWQ8L0hlYWRpbmc0PlxuICAgICAgICAgICAgICAgICAgPEJvZHkzPlxuICAgICAgICAgICAgICAgICAgICBMb2wgQm9vc3RpbmcgcHJvdmlkZXMgY2hlYXAgV29XIGJvb3N0aW5nIG9mIGFsbCB0eXBlczpcbiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyIG9yIFB2UCBib29zdGluZywgcmFpZCBvciBkdW5nZW9ucyBjYXJyeSxcbiAgICAgICAgICAgICAgICAgICAgUG93ZXJsZXZlbGluZywgZmFybWluZyAmIG1hbnkgbW9yZVxuICAgICAgICAgICAgICAgICAgPC9Cb2R5Mz5cbiAgICAgICAgICAgICAgICA8L1doYXRZb3U+XG4gICAgICAgICAgICAgIDwvV2hhdFlvdVdyYXA+XG4gICAgICAgICAgICA8L3NlY3Rpb24+XG5cbiAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cInNlY3Rpb25cIj5cbiAgICAgICAgICAgICAgPE1haW5UYWc+T3JkZXJpbmcgcHJvY2VkdXJlPC9NYWluVGFnPlxuICAgICAgICAgICAgICA8SGVhZGluZzM+SG93IEl0IFdvcmtzPC9IZWFkaW5nMz5cbiAgICAgICAgICAgICAgPEhvdz5cbiAgICAgICAgICAgICAgICA8SG93TGlzdD5cbiAgICAgICAgICAgICAgICAgIDxCb2R5Mz5QbGFjZSBhbiBvcmRlciBjaG9vc2luZyBvcHRpb25zIHlvdSBuZWVkPC9Cb2R5Mz5cbiAgICAgICAgICAgICAgICA8L0hvd0xpc3Q+XG4gICAgICAgICAgICAgICAgPEhvd0xpc3Q+XG4gICAgICAgICAgICAgICAgICA8Qm9keTM+XG4gICAgICAgICAgICAgICAgICAgIFdlIHdpbGwgY29udGFjdCB5b3UgdmlhIG91ciBsaXZlIGNoYXQgb3IgYnkgc2VuZGluZyBhbiBlbWFpbC5cbiAgICAgICAgICAgICAgICAgICAgQWxsIHRoZSBkZXRhaWxzIHdpbGwgYmUgZGlzY3Vzc2VkIGJlZm9yZWhhbmQgYW5kIHRoZSBzdGFydFxuICAgICAgICAgICAgICAgICAgICB0aW1lIHdpbGwgYmUgc2V0IGFjY29yZGluZyB0byB5b3VyIHNjaGVkdWxlLlxuICAgICAgICAgICAgICAgICAgPC9Cb2R5Mz5cbiAgICAgICAgICAgICAgICA8L0hvd0xpc3Q+XG4gICAgICAgICAgICAgICAgPEhvd0xpc3Q+XG4gICAgICAgICAgICAgICAgICA8Qm9keTM+UGxhY2UgYW4gb3JkZXIgY2hvb3Npbmcgb3B0aW9ucyB5b3UgbmVlZDwvQm9keTM+XG4gICAgICAgICAgICAgICAgPC9Ib3dMaXN0PlxuICAgICAgICAgICAgICA8L0hvdz5cbiAgICAgICAgICAgIDwvc2VjdGlvbj5cblxuICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwic2VjdGlvblwiPlxuICAgICAgICAgICAgICA8TWFpblRhZz5BYm91dCB0aGlzIGl0ZW08L01haW5UYWc+XG4gICAgICAgICAgICAgIDxIZWFkaW5nMz5Qcm9kdWN0IERlc2NyaXB0aW9uPC9IZWFkaW5nMz5cbiAgICAgICAgICAgICAgPERlc2M+XG4gICAgICAgICAgICAgICAgVGhlIGxhc3QgYm9zcyBvZiBldmVyeSByYWlkIGluIFdvVyBpcyB1c3VhbGx5IHZlcnkgZGlmZmljdWx0IHRvXG4gICAgICAgICAgICAgICAgZGVmZWF0IGV2ZW4gaW4gTm9ybWFsIG1vZGUuIEhvd2V2ZXIsIHdpdGggcHJvcGVyIGdlYXIgYW5kIGFuXG4gICAgICAgICAgICAgICAgZXhwZXJpZW5jZWQgdGVhbSwgaXQgaXMgbW9yZSB0aGFuIHJlYWwuIFRvIGRlZmVhdCBTeWx2YW5hc1xuICAgICAgICAgICAgICAgIFdpbmRydW5uZXIgeW91IG5lZWQgdG8gZ2V0IHRocm91Z2ggMyBwaGFzZXMgYW5kIGJyaW5nIFN5bHZhbmFzXG4gICAgICAgICAgICAgICAgaGVhbHRoIGRvd24gdG8gNTAlLiBBdCBteXRoaWMgZGlmZmljdWx0eSBTb0QgU3lsdmFuYXMgV2luZHJ1bm5lclxuICAgICAgICAgICAgICAgIGtpbGwgd2lsbCBiZSBjb3VudGVkIGF0IDQ1JSBvZiBoZXIgaGVhbHRoLntcIiBcIn1cbiAgICAgICAgICAgICAgPC9EZXNjPlxuICAgICAgICAgICAgICA8RGVzYz5cbiAgICAgICAgICAgICAgICBUaGUgbGFzdCBib3NzIG9mIGV2ZXJ5IHJhaWQgaW4gV29XIGlzIHVzdWFsbHkgdmVyeSBkaWZmaWN1bHQgdG9cbiAgICAgICAgICAgICAgICBkZWZlYXQgZXZlbiBpbiBOb3JtYWwgbW9kZS4gSG93ZXZlciwgd2l0aCBwcm9wZXIgZ2VhciBhbmQgYW5cbiAgICAgICAgICAgICAgICBleHBlcmllbmNlZCB0ZWFtLCBpdCBpcyBtb3JlIHRoYW4gcmVhbC4gVG8gZGVmZWF0IFN5bHZhbmFzXG4gICAgICAgICAgICAgICAgV2luZHJ1bm5lciB5b3UgbmVlZCB0byBnZXQgdGhyb3VnaCAzIHBoYXNlcyBhbmQgYnJpbmcgU3lsdmFuYXNcbiAgICAgICAgICAgICAgICBoZWFsdGggZG93biB0byA1MCUuIEF0IG15dGhpYyBkaWZmaWN1bHR5IFNvRCBTeWx2YW5hcyBXaW5kcnVubmVyXG4gICAgICAgICAgICAgICAga2lsbCB3aWxsIGJlIGNvdW50ZWQgYXQgNDUlIG9mIGhlciBoZWFsdGgue1wiIFwifVxuICAgICAgICAgICAgICA8L0Rlc2M+XG4gICAgICAgICAgICAgIDxEZXNjPlxuICAgICAgICAgICAgICAgIFRoZSBsYXN0IGJvc3Mgb2YgZXZlcnkgcmFpZCBpbiBXb1cgaXMgdXN1YWxseSB2ZXJ5IGRpZmZpY3VsdCB0b1xuICAgICAgICAgICAgICAgIGRlZmVhdCBldmVuIGluIE5vcm1hbCBtb2RlLiBIb3dldmVyLCB3aXRoIHByb3BlciBnZWFyIGFuZCBhblxuICAgICAgICAgICAgICAgIGV4cGVyaWVuY2VkIHRlYW0sIGl0IGlzIG1vcmUgdGhhbiByZWFsLiBUbyBkZWZlYXQgU3lsdmFuYXNcbiAgICAgICAgICAgICAgICBXaW5kcnVubmVyIHlvdSBuZWVkIHRvIGdldCB0aHJvdWdoIDMgcGhhc2VzIGFuZCBicmluZyBTeWx2YW5hc1xuICAgICAgICAgICAgICAgIGhlYWx0aCBkb3duIHRvIDUwJS4gQXQgbXl0aGljIGRpZmZpY3VsdHkgU29EIFN5bHZhbmFzIFdpbmRydW5uZXJcbiAgICAgICAgICAgICAgICBraWxsIHdpbGwgYmUgY291bnRlZCBhdCA0NSUgb2YgaGVyIGhlYWx0aC57XCIgXCJ9XG4gICAgICAgICAgICAgIDwvRGVzYz5cbiAgICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgICAgICA8L1NtYWxsQ29udGFpbmVyPlxuXG5cbiAgICAgICAgICA8RmVlZGJhY2s+XG4gICAgICAgICAgICA8Q2VudGVyPlxuICAgICAgICAgICAgICA8TWFpblRhZz5SZXZpZXcgYW5kIEZlZWRiYWNrPC9NYWluVGFnPlxuICAgICAgICAgICAgICA8SGVhZGluZzI+TGVhdmUgdXMgYSBmZWVkYmFjazwvSGVhZGluZzI+XG4gICAgICAgICAgICAgIDxCb2R5Mz5Zb3UgY2FuIGxlYXZlIGhlcmUgZmVlZGJhY2sgYW5kIHJlYWQgdXNlcuKAmXMgcmV2aWV3czwvQm9keTM+XG4gICAgICAgICAgICA8L0NlbnRlcj5cblxuICAgICAgICAgICAgPFJhdGluZz5cbiAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgPEhlYWRpbmcyPjQuOTwvSGVhZGluZzI+XG4gICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgPGltZyBzcmM9e3N0YXJ9IGFsdD1cInN0YXJcIiAvPlxuICAgICAgICAgICAgICA8aW1nIHNyYz17cmF0aW5nTG9nb30gYWx0PVwiXCIgLz5cbiAgICAgICAgICAgIDwvUmF0aW5nPlxuXG4gICAgICAgICAgICA8UmV2aWV3cz5cbiAgICAgICAgICAgICAgPFRlbGxVcz5cbiAgICAgICAgICAgICAgICA8UmV2aWV3VGl0bGU+VGVsbCB1cyBhYm91dCB5b3VyIGV4cGVyaWVuY2U8L1Jldmlld1RpdGxlPlxuICAgICAgICAgICAgICAgIDxCb2R5ND5Zb3VyIG92ZXJhbGwgcmF0aW5nPC9Cb2R5ND5cbiAgICAgICAgICAgICAgICA8UmF0aW5nSW5wdXQ+XG4gICAgICAgICAgICAgICAgICA8aW1nIHNyYz17cmF0aW5nU3Rhcn0gYWx0PSdpY29uJyAvPlxuICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e3JhdGluZ1N0YXJ9IGFsdD0naWNvbicgLz5cbiAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtyYXRpbmdTdGFyfSBhbHQ9J2ljb24nIC8+XG4gICAgICAgICAgICAgICAgICA8aW1nIHNyYz17cmF0aW5nU3Rhcn0gYWx0PSdpY29uJyAvPlxuICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e3JhdGluZ1N0YXJ9IGFsdD0naWNvbicgLz5cbiAgICAgICAgICAgICAgICA8L1JhdGluZ0lucHV0PlxuICAgICAgICAgICAgICAgIDxSZXZpZXdGb3JtPlxuICAgICAgICAgICAgICAgICAgPElucHV0IHBsYWNlaG9sZGVyPVwiVGl0bGVcIiB0eXBlPVwidGV4dFwiIC8+XG4gICAgICAgICAgICAgICAgICA8SW5wdXQgcGxhY2Vob2xkZXI9XCJOYW1lXCIgdHlwZT1cInRleHRcIiAvPlxuICAgICAgICAgICAgICAgICAgPElucHV0IHBsYWNlaG9sZGVyPVwiRW1haWxcIiB0eXBlPVwiZW1haWxcIiAvPlxuICAgICAgICAgICAgICAgICAgPE1lc3NhZ2UgcGxhY2Vob2xkZXI9XCJSZXZpZXcgdGV4dFwiIC8+XG4gICAgICAgICAgICAgICAgICA8QnV0dG9uQ29udGFpbmVyPlxuICAgICAgICAgICAgICAgICAgICA8QnRuU3VibWl0PlNlbmQgUmV2aWV3PC9CdG5TdWJtaXQ+XG4gICAgICAgICAgICAgICAgICA8L0J1dHRvbkNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICA8L1Jldmlld0Zvcm0+XG4gICAgICAgICAgICAgIDwvVGVsbFVzPlxuXG4gICAgICAgICAgICAgIDxSZXZpZXdUb3RhbD5cbiAgICAgICAgICAgICAgICA8UmV2aWV3VGl0bGU+MiBvZiAxMzIgUmV2aWV3czwvUmV2aWV3VGl0bGU+XG5cbiAgICAgICAgICAgICAgICA8UmV2aWV3Q2FyZD5cbiAgICAgICAgICAgICAgICAgIDxIZWFkaW5nNj5GYW50YXN0aWMgSm9iPC9IZWFkaW5nNj5cbiAgICAgICAgICAgICAgICAgIDxCb2R5Mz5cbiAgICAgICAgICAgICAgICAgICAgR29vZCBwdXJjaGFzZSBMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXJcbiAgICAgICAgICAgICAgICAgICAgYWRpcGlzY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZCB0ZW1wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmVcbiAgICAgICAgICAgICAgICAgICAgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS5cbiAgICAgICAgICAgICAgICAgIDwvQm9keTM+XG4gICAgICAgICAgICAgICAgICA8VmVyaWZpZWQ+XG4gICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtjaGVja30gYWx0PVwiaWNvblwiIC8+IFZlcmlmaWVkIHB1cmNoYXNlZFxuICAgICAgICAgICAgICAgICAgPC9WZXJpZmllZD5cbiAgICAgICAgICAgICAgICA8L1Jldmlld0NhcmQ+XG4gICAgICAgICAgICAgICAgPFJldmlld0NhcmQ+XG4gICAgICAgICAgICAgICAgICA8SGVhZGluZzY+RmFudGFzdGljIEpvYjwvSGVhZGluZzY+XG4gICAgICAgICAgICAgICAgICA8Qm9keTM+XG4gICAgICAgICAgICAgICAgICAgIEdvb2QgcHVyY2hhc2UgTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyXG4gICAgICAgICAgICAgICAgICAgIGFkaXBpc2NpbmcgZWxpdCwgc2VkIGRvIGVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQgdXQgbGFib3JlXG4gICAgICAgICAgICAgICAgICAgIGV0IGRvbG9yZSBtYWduYSBhbGlxdWEuXG4gICAgICAgICAgICAgICAgICA8L0JvZHkzPlxuICAgICAgICAgICAgICAgICAgPFZlcmlmaWVkPlxuICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17Y2hlY2t9IGFsdD1cImljb25cIiAvPiBWZXJpZmllZCBwdXJjaGFzZWRcbiAgICAgICAgICAgICAgICAgIDwvVmVyaWZpZWQ+XG4gICAgICAgICAgICAgICAgPC9SZXZpZXdDYXJkPlxuICAgICAgICAgICAgICA8L1Jldmlld1RvdGFsPlxuICAgICAgICAgICAgPC9SZXZpZXdzPlxuICAgICAgICAgIDwvRmVlZGJhY2s+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9NYWluUmlnaHQ+XG4gICAgPC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFByb2R1Y3RTbGlkZXIpO1xuXG5jb25zdCBNYWluUmlnaHQgPSBzdHlsZWQuZGl2YFxuICBtYXJnaW4tbGVmdDogMzc1cHg7XG4gIHdpZHRoOiBjYWxjKDEwMCUgLSAzNzVweCk7XG5cbiAgJiBpbnB1dCB7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cblxuICBAbWVkaWEgJHtkZXZpY2UudGFibGV0fSB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWFyZ2luLWxlZnQ6IHVuc2V0O1xuICB9XG5gO1xuXG5jb25zdCBDb250ZW50U2xpZGUgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LXdyYXA6IHdyYXA7XG5gO1xuXG5jb25zdCBQb3NpdGlvbnMgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBnYXA6IDIwcHg7XG4gIG1hcmdpbi10b3A6IDQwcHg7XG4gIGZsZXgtd3JhcDogd3JhcDtcblxuICAmIHNlbGVjdCB7XG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICB3aWR0aDogMTAwJTtcbiAgfVxuXG4gIEBtZWRpYSAke2RldmljZS5sYXB0b3B9IHtcbiAgICBmbGV4LXdyYXA6IG5vd3JhcDtcbiAgfVxuICBcbmA7XG5cbmNvbnN0IFBvc2l0aW9uID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgd2lkdGg6IDMwMHB4O1xuXG4gICYgaW1nIHtcbiAgICBtYXJnaW46IDQwcHggMCA1MHB4IDA7XG4gIH1cbmA7XG5cbmNvbnN0IEJhc2tldCA9IHN0eWxlZC5kaXZgXG4gIGJvcmRlci1yYWRpdXM6IDEycHg7XG4gIGJveC1zaGFkb3c6IDBweCA0cHggMzBweCAwcHggIzMyMzIzMjFhO1xuICBtaW4td2lkdGg6IDMwMHB4O1xuYDtcblxuY29uc3QgSGVhZGVyID0gc3R5bGVkLmRpdmBcbiAgYmFja2dyb3VuZDogdXJsKCR7YmdCYXNrZXR9KSBuby1yZXBlYXQ7XG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XG4gIHBhZGRpbmc6IDIwcHg7XG4gIGNvbG9yOiAjZmZmO1xuICBib3JkZXItcmFkaXVzOiAxMnB4O1xuYDtcblxuY29uc3QgQmFza2V0Qm9keSA9IHN0eWxlZC5kaXZgXG4gIHBhZGRpbmc6IDIwcHg7XG5gO1xuXG5jb25zdCBCQkluZm8gPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nLWJvdHRvbTogMTBweDtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlYmVmZjg7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcblxuICAmIGg2IHtcbiAgICBjb2xvcjogdmFyKC0tdGV4dC1kYXJrKTtcbiAgfVxuYDtcblxuY29uc3QgQkJUaXRsZSA9IHN0eWxlZChIZWFkaW5nNylgXG4gIG1hcmdpbi1ib3R0b206IDZweDtcbiAgY29sb3I6IHZhcigtLXByaW1hcnktcHJlc3NlZCk7XG5gO1xuXG5jb25zdCBCQkRldGFpbCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgbWFyZ2luLXRvcDogMTBweDtcbmA7XG5cbmNvbnN0IEV4dHJhT3B0aW9ucyA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGdhcDogMTRweDtcbiAgbWFyZ2luOiAyMHB4IDA7XG5gO1xuXG5jb25zdCBFeHRyYSA9IHN0eWxlZC5zcGFuYFxuICBwYWRkaW5nOiAxNnB4IDI2cHg7XG4gIGJvcmRlci1yYWRpdXM6IDEycHg7XG4gIGJhY2tncm91bmQ6ICNlYmVmZjg7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG5gO1xuXG5jb25zdCBFeHRyYUluZm8gPSBzdHlsZWQuZGl2YFxuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuYDtcblxuY29uc3QgV2hhdFlvdVdyYXAgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBnYXA6IDcwcHg7XG4gIG1hcmdpbi10b3A6IDIwcHg7XG5gO1xuXG5jb25zdCBXaGF0WW91ID0gc3R5bGVkLmRpdmBcbiAgJiBpbWcge1xuICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XG4gIH1cbmA7XG5cbmNvbnN0IEhvdyA9IHN0eWxlZC51bGBcbiAgbWFyZ2luLXRvcDogMjBweDtcbiAgY291bnRlci1yZXNldDogY291bnRlci1saXN0O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHBhZGRpbmc6IDA7XG5gO1xuXG5jb25zdCBIb3dMaXN0ID0gc3R5bGVkLmxpYFxuICBtYXJnaW46IDAgMCAyMHB4IDQwcHg7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG5cbiAgJjo6YmVmb3JlIHtcbiAgICBjb3VudGVyLWluY3JlbWVudDogY291bnRlci1saXN0O1xuICAgIGNvbnRlbnQ6IGNvdW50ZXIoY291bnRlci1saXN0KTtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgbGVmdDogMDtcbiAgICBiYWNrZ3JvdW5kOiB1cmwoJHtjb3VudH0pO1xuICAgIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgICB3aWR0aDogMjZweDtcbiAgICBoZWlnaHQ6IDI2cHg7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBmb250LXdlaWdodDogNzAwO1xuICAgIGNvbG9yOiAjNTQ3OWU1O1xuICB9XG5gO1xuXG5jb25zdCBEZXNjID0gc3R5bGVkKEJvZHkzKWBcbiAgbWFyZ2luLXRvcDogMjBweDtcbiAgZGlzcGxheTogYmxvY2s7XG5gO1xuXG5jb25zdCBGZWVkYmFjayA9IHN0eWxlZC5zZWN0aW9uYFxuICBtYXJnaW4tdG9wOiAxMjBweDtcbmA7XG5cbmNvbnN0IFJhdGluZyA9IHN0eWxlZC5kaXZgXG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudChcbiAgICAxMDQuMjJkZWcsXG4gICAgI2ViZjNmZiA4LjQ0JSxcbiAgICByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMikgNTkuNTUlLFxuICAgICNmNGU2ZmYgMTAzLjYzJVxuICApO1xuICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoMzBweCk7XG4gIC8qIE5vdGU6IGJhY2tkcm9wLWZpbHRlciBoYXMgbWluaW1hbCBicm93c2VyIHN1cHBvcnQgKi9cbiAgYm9yZGVyLXJhZGl1czogMzBweDtcbiAgcGFkZGluZzogMjBweDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB3aWR0aDogNDAwcHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGdhcDogMjBweDtcbiAgbWFyZ2luOiA0MHB4IGF1dG87XG5gO1xuXG5jb25zdCBSZXZpZXdzID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZ2FwOiA5MHB4O1xuICBtYXJnaW4tdG9wOiA0MHB4O1xuYDtcblxuY29uc3QgVGVsbFVzID0gc3R5bGVkLmRpdmBgO1xuXG5jb25zdCBSYXRpbmdJbnB1dCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGdhcDogNXB4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBtYXJnaW4tdG9wOiA1cHg7XG5gXG5cbmNvbnN0IFJldmlld1RpdGxlID0gc3R5bGVkKEhlYWRpbmc0KWBcbiAgbWFyZ2luLWJvdHRvbTogMjBweDtcbmA7XG5cbmNvbnN0IFJldmlld0Zvcm0gPSBzdHlsZWQuZm9ybWBcbiAgbWFyZ2luLXRvcDogMjBweDtcbmA7XG5cbmNvbnN0IE1lc3NhZ2UgPSBzdHlsZWQudGV4dGFyZWFgXG4gIGJvcmRlcjogbm9uZTtcbiAgd2lkdGg6IDEwMCU7XG4gIGJhY2tncm91bmQ6ICNlYmVmZjg7XG4gIGJvcmRlci1yYWRpdXM6IDZweDtcbiAgcGFkZGluZzogMTBweDtcbiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XG5gO1xuXG5jb25zdCBCdG5TdWJtaXQgPSBzdHlsZWQoQnRuUHJpbWFyeSlgYDtcblxuY29uc3QgUmV2aWV3VG90YWwgPSBzdHlsZWQoVGVsbFVzKWBgO1xuXG5jb25zdCBSZXZpZXdDYXJkID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luLWJvdHRvbTogMzBweDtcbmA7XG5cbmNvbnN0IFZlcmlmaWVkID0gc3R5bGVkLmRpdmBcbiAgY29sb3I6ICMxNjk2NDk7XG4gIG1hcmdpbi10b3A6IDEwcHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGdhcDogMTBweDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbmA7XG4iXX0= */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const ReviewTitle=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(_typography_text__WEBPACK_IMPORTED_MODULE_5__[\"Heading4\"], false?undefined:{target:\"e1iq9jn96\",label:\"ReviewTitle\"})( false?undefined:{name:\"1azpx8r\",styles:\"margin-bottom:20px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const ReviewForm=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"form\", false?undefined:{target:\"e1iq9jn95\",label:\"ReviewForm\"})( false?undefined:{name:\"iqoq9n\",styles:\"margin-top:20px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Message=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"textarea\", false?undefined:{target:\"e1iq9jn94\",label:\"Message\"})( false?undefined:{name:\"1bysje7\",styles:\"border:none;width:100%;background:#ebeff8;border-radius:6px;padding:10px;font-family:inherit\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const BtnSubmit=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(_buttons_button_primary__WEBPACK_IMPORTED_MODULE_10__[\"BtnPrimary\"], false?undefined:{target:\"e1iq9jn93\",label:\"BtnSubmit\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rcHJvL0RvY3VtZW50cy9Qcm9qZWN0cy92ZWt0b3JhLWxiL3BhY2thZ2VzL2xiL3NyYy9jb21wb25lbnRzL3Byb2R1Y3QvcHJvZHVjdC1zbGlkZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBd2dCb0MiLCJmaWxlIjoiL1VzZXJzL21hY2Jvb2twcm8vRG9jdW1lbnRzL1Byb2plY3RzL3Zla3RvcmEtbGIvcGFja2FnZXMvbGIvc3JjL2NvbXBvbmVudHMvcHJvZHVjdC9wcm9kdWN0LXNsaWRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbm5lY3QsIHN0eWxlZCB9IGZyb20gXCJmcm9udGl0eVwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgRGl2aWRlciB9IGZyb20gXCIuLi9vdGhlci9kaXZpZGVyXCI7XG5pbXBvcnQgU2lkZWJhck5hdiBmcm9tIFwiLi4vc2lkZWJhci1uYXZcIjtcbmltcG9ydCB7IE1haW5UYWcgfSBmcm9tIFwiLi4vdHlwb2dyYXBoeS9tYWluLXRhZ1wiO1xuaW1wb3J0IHtcbiAgQm9keTIsXG4gIEJvZHkzLFxuICBCb2R5NCxcbiAgSGVhZGluZzIsXG4gIEhlYWRpbmczLFxuICBIZWFkaW5nNCxcbiAgSGVhZGluZzYsXG4gIEhlYWRpbmc3LFxufSBmcm9tIFwiLi4vdHlwb2dyYXBoeS90ZXh0XCI7XG5pbXBvcnQgc3RhciBmcm9tIFwiLi4vaW1hZ2VzL3N0YXItcmF0aW5nLnBuZ1wiO1xuaW1wb3J0IHJhdGluZ0xvZ28gZnJvbSBcIi4uL2ltYWdlcy9UcnVzdHBpbG90LnBuZ1wiO1xuaW1wb3J0IHsgQnV0dG9uQ29udGFpbmVyIH0gZnJvbSBcIi4uL2J1dHRvbnMvYnV0dG9uLWNvbnRhaW5lclwiO1xuaW1wb3J0IHsgQ2VudGVyIH0gZnJvbSBcIi4uL3R5cG9ncmFwaHkvY2VudGVyXCI7XG5pbXBvcnQgeyBCdG5QcmltYXJ5IH0gZnJvbSBcIi4uL2J1dHRvbnMvYnV0dG9uLXByaW1hcnlcIjtcbmltcG9ydCBpdGVtSW1nIGZyb20gXCIuLi9pbWFnZXMvb3JkZXIvaXRlbS5wbmdcIjtcbmltcG9ydCB7IElucHV0LCBPcHRpb24sIFNlbGVjdCB9IGZyb20gXCIuLi9mb3JtL2lucHV0XCI7XG5pbXBvcnQgd2hhdCBmcm9tIFwiLi4vaW1hZ2VzL3NsaWRlci93aGF0LnN2Z1wiO1xuaW1wb3J0IGNvdW50IGZyb20gXCIuLi9pbWFnZXMvc2xpZGVyL2NhcmQtY291bnQucG5nXCI7XG5pbXBvcnQgY2hlY2sgZnJvbSBcIi4uL2ltYWdlcy9pY29ucy92ZXJpZmllZC5zdmdcIjtcbmltcG9ydCByYXRpbmdTdGFyIGZyb20gXCIuLi9pbWFnZXMvaWNvbnMvc3Rhci1yYXRpbmcuc3ZnXCI7XG5pbXBvcnQgYmdCYXNrZXQgZnJvbSBcIi4uL2ltYWdlcy9zbGlkZXIvYmctYmFza2V0LnBuZ1wiO1xuaW1wb3J0IEJyZWFkY3J1bWJzIGZyb20gXCIuLi9icmVhZGNydW1ic1wiO1xuaW1wb3J0IHsgU21hbGxDb250YWluZXIgfSBmcm9tIFwiLi4vY29udGlhbmVyL3NtYWxsLWNvbnRhaW5lclwiO1xuaW1wb3J0IHsgZGV2aWNlIH0gZnJvbSBcIi4uL3F1ZXJpZXNcIjtcblxuY29uc3QgUHJvZHVjdFNsaWRlciA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPFNpZGViYXJOYXYgLz5cblxuICAgICAgPE1haW5SaWdodD5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXJcIj5cbiAgICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJzZWN0aW9uXCI+XG4gICAgICAgICAgICA8QnJlYWRjcnVtYnMgLz5cbiAgICAgICAgICAgIDxIZWFkaW5nMj5XZSBvZmZlciB0byBidXkgYm9vc3RlciBmb3IgeW91ciBhY2NvdW50PC9IZWFkaW5nMj5cbiAgICAgICAgICAgIDxCb2R5Mz5cbiAgICAgICAgICAgICAgTG9sIEJvb3N0aW5nIHByb3ZpZGVzIGNoZWFwIFdvVyBib29zdGluZyBvZiBhbGwgdHlwZXM6IGNoYXJhY3RlclxuICAgICAgICAgICAgICBvciBQdlAgYm9vc3RpbmcsIHJhaWQgb3IgZHVuZ2VvbnMgY2FycnksIFBvd2VybGV2ZWxpbmcsIGZhcm1pbmcgJlxuICAgICAgICAgICAgICBtYW55IG1vcmUgdG8gc2F2ZSB5b3VyIHRpbWUuIEJvb2sgYSBzbG90IGluIG91ciBsaXZlIGNoYXQgYW5kXG4gICAgICAgICAgICAgIGVuam95IFdvVyBib29zdCF7XCIgXCJ9XG4gICAgICAgICAgICA8L0JvZHkzPlxuXG4gICAgICAgICAgICA8Q29udGVudFNsaWRlPlxuICAgICAgICAgICAgICA8UG9zaXRpb25zPlxuICAgICAgICAgICAgICAgIDxQb3NpdGlvbj5cbiAgICAgICAgICAgICAgICAgIDxIZWFkaW5nND5DdXJyZW50IFBvc2l0aW9uPC9IZWFkaW5nND5cbiAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtpdGVtSW1nfSBhbHQ9XCJpdGVtXCIgLz5cbiAgICAgICAgICAgICAgICAgIDxTZWxlY3QgbmFtZT1cInBvc2l0aW9uXCI+XG4gICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9XCJpcm9uXCI+SXJvbjwvT3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPVwicGxhdGludW1cIj5QbGF0aW51bTwvT3B0aW9uPlxuICAgICAgICAgICAgICAgICAgPC9TZWxlY3Q+XG4gICAgICAgICAgICAgICAgICA8U2VsZWN0IG5hbWU9XCJkaXZpc2lvblwiPlxuICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPVwiZGl2aXNpb24gNFwiPkRpdmlzaW9uIDQ8L09wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgPE9wdGlvbiB2YWx1ZT1cImRpdmlzaW9uIDVcIj5EaXZpc2lvbiA1PC9PcHRpb24+XG4gICAgICAgICAgICAgICAgICA8L1NlbGVjdD5cbiAgICAgICAgICAgICAgICAgIDxTZWxlY3QgbmFtZT1cIkxQXCI+XG4gICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9XCJscCAyMFwiPkxQIDAtMjA8L09wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgPE9wdGlvbiB2YWx1ZT1cImxwIDMwXCI+TFAgMC0zMDwvT3B0aW9uPlxuICAgICAgICAgICAgICAgICAgPC9TZWxlY3Q+XG4gICAgICAgICAgICAgICAgPC9Qb3NpdGlvbj5cbiAgICAgICAgICAgICAgICA8UG9zaXRpb24+XG4gICAgICAgICAgICAgICAgICA8SGVhZGluZzQ+RGVzaXJlZCBQb3NpdGlvbjwvSGVhZGluZzQ+XG4gICAgICAgICAgICAgICAgICA8aW1nIHNyYz17aXRlbUltZ30gYWx0PVwiaXRlbVwiIC8+XG4gICAgICAgICAgICAgICAgICA8U2VsZWN0IG5hbWU9XCJwb3NpdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPVwicGxhdGludW1cIj5QbGF0aW51bTwvT3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPVwiaXJvblwiPklyb248L09wdGlvbj5cbiAgICAgICAgICAgICAgICAgIDwvU2VsZWN0PlxuICAgICAgICAgICAgICAgICAgPFNlbGVjdCBuYW1lPVwiZGl2aXNpb25cIj5cbiAgICAgICAgICAgICAgICAgICAgPE9wdGlvbiB2YWx1ZT1cImRpdmlzaW9uIDRcIj5EaXZpc2lvbiA0PC9PcHRpb24+XG4gICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9XCJkaXZpc2lvbiA1XCI+RGl2aXNpb24gNTwvT3B0aW9uPlxuICAgICAgICAgICAgICAgICAgPC9TZWxlY3Q+XG4gICAgICAgICAgICAgICAgPC9Qb3NpdGlvbj5cbiAgICAgICAgICAgICAgICA8UG9zaXRpb24+XG4gICAgICAgICAgICAgICAgICA8SGVhZGluZzQ+U2VsZWN0IFNlcnZlcjwvSGVhZGluZzQ+XG4gICAgICAgICAgICAgICAgICA8aW1nIHNyYz17aXRlbUltZ30gYWx0PVwiaXRlbVwiIC8+XG4gICAgICAgICAgICAgICAgICA8U2VsZWN0IG5hbWU9XCJzZXJ2ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPE9wdGlvbiB2YWx1ZT1cImV1d1wiPkVVVzwvT3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPVwiZXVzXCI+RVVTPC9PcHRpb24+XG4gICAgICAgICAgICAgICAgICA8L1NlbGVjdD5cbiAgICAgICAgICAgICAgICA8L1Bvc2l0aW9uPlxuICAgICAgICAgICAgICA8L1Bvc2l0aW9ucz5cblxuICAgICAgICAgICAgICA8QmFza2V0PlxuICAgICAgICAgICAgICAgIDxIZWFkZXI+XG4gICAgICAgICAgICAgICAgICA8SGVhZGluZzQ+TXkgT3JkZXI8L0hlYWRpbmc0PlxuICAgICAgICAgICAgICAgIDwvSGVhZGVyPlxuICAgICAgICAgICAgICAgIDxCYXNrZXRCb2R5PlxuICAgICAgICAgICAgICAgICAgPEJCSW5mbz5cbiAgICAgICAgICAgICAgICAgICAgPEJCVGl0bGU+Q29tcGxldGlvbiBUaW1lPC9CQlRpdGxlPlxuICAgICAgICAgICAgICAgICAgICA8SGVhZGluZzY+MSBEYXk8L0hlYWRpbmc2PlxuICAgICAgICAgICAgICAgICAgPC9CQkluZm8+XG4gICAgICAgICAgICAgICAgICA8QkJJbmZvPlxuICAgICAgICAgICAgICAgICAgICA8QkJUaXRsZT5FeHRyYSBPcHRpb25zPC9CQlRpdGxlPlxuICAgICAgICAgICAgICAgICAgICA8SGVhZGluZzY+Q2hhbXBpb24gKCQ1KTwvSGVhZGluZzY+XG4gICAgICAgICAgICAgICAgICAgIDxIZWFkaW5nNj5DaGFtcGlvbiAoJDUpPC9IZWFkaW5nNj5cbiAgICAgICAgICAgICAgICAgIDwvQkJJbmZvPlxuICAgICAgICAgICAgICAgICAgPEJCSW5mbz5cbiAgICAgICAgICAgICAgICAgICAgPEJCVGl0bGU+WW91IEVhcm48L0JCVGl0bGU+XG4gICAgICAgICAgICAgICAgICAgIDxIZWFkaW5nNj4xMiBGb3ggQ29pbnMgKDEuNCQpPC9IZWFkaW5nNj5cbiAgICAgICAgICAgICAgICAgIDwvQkJJbmZvPlxuICAgICAgICAgICAgICAgICAgPEJCRGV0YWlsPlxuICAgICAgICAgICAgICAgICAgICA8QkJUaXRsZT5GaW5hbCBQcmljZTwvQkJUaXRsZT5cbiAgICAgICAgICAgICAgICAgICAgPEhlYWRpbmczPiQzNDwvSGVhZGluZzM+XG4gICAgICAgICAgICAgICAgICA8L0JCRGV0YWlsPlxuICAgICAgICAgICAgICAgICAgPEJ1dHRvbkNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICAgICAgPEJ0blByaW1hcnk+UmFuayBVcDwvQnRuUHJpbWFyeT5cbiAgICAgICAgICAgICAgICAgIDwvQnV0dG9uQ29udGFpbmVyPlxuICAgICAgICAgICAgICAgIDwvQmFza2V0Qm9keT5cbiAgICAgICAgICAgICAgPC9CYXNrZXQ+XG4gICAgICAgICAgICA8L0NvbnRlbnRTbGlkZT5cblxuICAgICAgICAgICAgPERpdmlkZXIgLz5cbiAgICAgICAgICA8L3NlY3Rpb24+XG5cbiAgICAgICAgICA8U21hbGxDb250YWluZXI+XG5cbiAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cInNlY3Rpb25cIj5cbiAgICAgICAgICAgICAgPE1haW5UYWc+U29tZSBhZGRpbmdzIGZvciB5b3UgPC9NYWluVGFnPlxuICAgICAgICAgICAgICA8SGVhZGluZzM+RXh0cmEgT3B0aW9uczwvSGVhZGluZzM+XG4gICAgICAgICAgICAgIDxCb2R5Mz5cbiAgICAgICAgICAgICAgICBMb2wgQm9vc3RpbmcgcHJvdmlkZXMgY2hlYXAgV29XIGJvb3N0aW5nIG9mIGFsbCB0eXBlczogY2hhcmFjdGVyXG4gICAgICAgICAgICAgICAgb3IgUHZQIGJvb3N0aW5nLCByYWlkIG9yIGR1bmdlb25zIGNhcnJ5LCBQb3dlcmxldmVsaW5nLCBmYXJtaW5nICZcbiAgICAgICAgICAgICAgICBtYW55IG1vcmUgdG8gc2F2ZSB5b3VyIHRpbWUuIEJvb2sgYSBzbG90IGluIG91ciBsaXZlIGNoYXQgYW5kXG4gICAgICAgICAgICAgICAgZW5qb3kgV29XIGJvb3N0IXtcIiBcIn1cbiAgICAgICAgICAgICAgPC9Cb2R5Mz5cblxuICAgICAgICAgICAgICA8RXh0cmFPcHRpb25zPlxuICAgICAgICAgICAgICAgIDxFeHRyYT5TcGVsbCBCdXR0b25zPC9FeHRyYT5cbiAgICAgICAgICAgICAgICA8RXh0cmE+U3BlbGwgQnV0dG9uczwvRXh0cmE+XG4gICAgICAgICAgICAgICAgPEV4dHJhPlNwZWxsIEJ1dHRvbnM8L0V4dHJhPlxuICAgICAgICAgICAgICAgIDxFeHRyYT5TcGVsbCBCdXR0b25zPC9FeHRyYT5cbiAgICAgICAgICAgICAgICA8RXh0cmE+U3BlbGwgQnV0dG9uczwvRXh0cmE+XG4gICAgICAgICAgICAgIDwvRXh0cmFPcHRpb25zPlxuXG4gICAgICAgICAgICAgIDxFeHRyYUluZm8+XG4gICAgICAgICAgICAgICAgPEJvZHkzPlRoaXMgb3B0aW9uICsxMCUgdG8gZmluYWwgcHJpY2UgPC9Cb2R5Mz5cbiAgICAgICAgICAgICAgPC9FeHRyYUluZm8+XG5cbiAgICAgICAgICAgICAgPEJvZHkzPlxuICAgICAgICAgICAgICAgIFdvdWxkIHlvdSBsaWtlIHRvIHNlZSBob3cgYSBDaGFsbGVuZ2VyIHBsYXllciBwbGF5cyBvbiB5b3VyXG4gICAgICAgICAgICAgICAgYWNjb3VudCBpbiB5b3VyIGVsbz8gQnkgZW5hYmxpbmcgdGhpcyBvcHRpb24gd2Ugd2lsbCBzZXQgdXAgYVxuICAgICAgICAgICAgICAgIHByaXZhdGUgc3RyZWFtIHNwZWNpZmljYWxseSBmb3IgeW91ISBZb3VyIGJvb3N0ZXIgd2lsbCBhbHNvIGJlXG4gICAgICAgICAgICAgICAgYWJsZSB0byBjaGF0IHdpdGggeW91LCBwcm92aWRlIHlvdSByYW5rIHVwIGltYWdlcyBhbmQgc2VuZCB5b3VcbiAgICAgICAgICAgICAgICBWT0RzIC8gcmVjb3JkaW5ncyBvZiB0aGUgZ2FtZXMgcGxheWVkLiBZb3VyIHJlcGxheXMgd2lsbCBiZSBzZW50XG4gICAgICAgICAgICAgICAgdG8geW91IGFmdGVyIG9yZGVyIGNvbXBsZXRpb24gb24geW91ciBlLW1haWwuIElmIHlvdSB3aXNoIHVzIHRvXG4gICAgICAgICAgICAgICAgc2VuZCB0aGVtIHRvIHlvdSwgcGxlYXNlIHdyaXRlIGl0IGluIHRoZSBub3RlcyBvciBub3RpZnkgdXMgYmVmb3JlXG4gICAgICAgICAgICAgICAgd2UgaW5pdGlhdGUgeW91ciBvcmRlci5cbiAgICAgICAgICAgICAgPC9Cb2R5Mz5cbiAgICAgICAgICAgIDwvc2VjdGlvbj5cblxuICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPVwic2VjdGlvblwiPlxuICAgICAgICAgICAgICA8TWFpblRhZz5Tb21lIGFkZGluZ3MgZm9yIHlvdSA8L01haW5UYWc+XG4gICAgICAgICAgICAgIDxIZWFkaW5nMz5XaGF0IFlvdSBXaWxsIEdldDwvSGVhZGluZzM+XG5cbiAgICAgICAgICAgICAgPFdoYXRZb3VXcmFwPlxuICAgICAgICAgICAgICAgIDxXaGF0WW91PlxuICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e3doYXR9IGFsdD1cImljb25cIiAvPlxuICAgICAgICAgICAgICAgICAgPEhlYWRpbmc0PlByZSBSYW5rZWQ8L0hlYWRpbmc0PlxuICAgICAgICAgICAgICAgICAgPEJvZHkzPlxuICAgICAgICAgICAgICAgICAgICBMb2wgQm9vc3RpbmcgcHJvdmlkZXMgY2hlYXAgV29XIGJvb3N0aW5nIG9mIGFsbCB0eXBlczpcbiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyIG9yIFB2UCBib29zdGluZywgcmFpZCBvciBkdW5nZW9ucyBjYXJyeSxcbiAgICAgICAgICAgICAgICAgICAgUG93ZXJsZXZlbGluZywgZmFybWluZyAmIG1hbnkgbW9yZVxuICAgICAgICAgICAgICAgICAgPC9Cb2R5Mz5cbiAgICAgICAgICAgICAgICA8L1doYXRZb3U+XG4gICAgICAgICAgICAgICAgPFdoYXRZb3U+XG4gICAgICAgICAgICAgICAgICA8aW1nIHNyYz17d2hhdH0gYWx0PVwiaWNvblwiIC8+XG4gICAgICAgICAgICAgICAgICA8SGVhZGluZzQ+UHJlIFJhbmtlZDwvSGVhZGluZzQ+XG4gICAgICAgICAgICAgICAgICA8Qm9keTM+XG4gICAgICAgICAgICAgICAgICAgIExvbCBCb29zdGluZyBwcm92aWRlcyBjaGVhcCBXb1cgYm9vc3Rpbmcgb2YgYWxsIHR5cGVzOlxuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXIgb3IgUHZQIGJvb3N0aW5nLCByYWlkIG9yIGR1bmdlb25zIGNhcnJ5LFxuICAgICAgICAgICAgICAgICAgICBQb3dlcmxldmVsaW5nLCBmYXJtaW5nICYgbWFueSBtb3JlXG4gICAgICAgICAgICAgICAgICA8L0JvZHkzPlxuICAgICAgICAgICAgICAgIDwvV2hhdFlvdT5cbiAgICAgICAgICAgICAgICA8V2hhdFlvdT5cbiAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXt3aGF0fSBhbHQ9XCJpY29uXCIgLz5cbiAgICAgICAgICAgICAgICAgIDxIZWFkaW5nND5QcmUgUmFua2VkPC9IZWFkaW5nND5cbiAgICAgICAgICAgICAgICAgIDxCb2R5Mz5cbiAgICAgICAgICAgICAgICAgICAgTG9sIEJvb3N0aW5nIHByb3ZpZGVzIGNoZWFwIFdvVyBib29zdGluZyBvZiBhbGwgdHlwZXM6XG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlciBvciBQdlAgYm9vc3RpbmcsIHJhaWQgb3IgZHVuZ2VvbnMgY2FycnksXG4gICAgICAgICAgICAgICAgICAgIFBvd2VybGV2ZWxpbmcsIGZhcm1pbmcgJiBtYW55IG1vcmVcbiAgICAgICAgICAgICAgICAgIDwvQm9keTM+XG4gICAgICAgICAgICAgICAgPC9XaGF0WW91PlxuICAgICAgICAgICAgICA8L1doYXRZb3VXcmFwPlxuICAgICAgICAgICAgPC9zZWN0aW9uPlxuXG4gICAgICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJzZWN0aW9uXCI+XG4gICAgICAgICAgICAgIDxNYWluVGFnPk9yZGVyaW5nIHByb2NlZHVyZTwvTWFpblRhZz5cbiAgICAgICAgICAgICAgPEhlYWRpbmczPkhvdyBJdCBXb3JrczwvSGVhZGluZzM+XG4gICAgICAgICAgICAgIDxIb3c+XG4gICAgICAgICAgICAgICAgPEhvd0xpc3Q+XG4gICAgICAgICAgICAgICAgICA8Qm9keTM+UGxhY2UgYW4gb3JkZXIgY2hvb3Npbmcgb3B0aW9ucyB5b3UgbmVlZDwvQm9keTM+XG4gICAgICAgICAgICAgICAgPC9Ib3dMaXN0PlxuICAgICAgICAgICAgICAgIDxIb3dMaXN0PlxuICAgICAgICAgICAgICAgICAgPEJvZHkzPlxuICAgICAgICAgICAgICAgICAgICBXZSB3aWxsIGNvbnRhY3QgeW91IHZpYSBvdXIgbGl2ZSBjaGF0IG9yIGJ5IHNlbmRpbmcgYW4gZW1haWwuXG4gICAgICAgICAgICAgICAgICAgIEFsbCB0aGUgZGV0YWlscyB3aWxsIGJlIGRpc2N1c3NlZCBiZWZvcmVoYW5kIGFuZCB0aGUgc3RhcnRcbiAgICAgICAgICAgICAgICAgICAgdGltZSB3aWxsIGJlIHNldCBhY2NvcmRpbmcgdG8geW91ciBzY2hlZHVsZS5cbiAgICAgICAgICAgICAgICAgIDwvQm9keTM+XG4gICAgICAgICAgICAgICAgPC9Ib3dMaXN0PlxuICAgICAgICAgICAgICAgIDxIb3dMaXN0PlxuICAgICAgICAgICAgICAgICAgPEJvZHkzPlBsYWNlIGFuIG9yZGVyIGNob29zaW5nIG9wdGlvbnMgeW91IG5lZWQ8L0JvZHkzPlxuICAgICAgICAgICAgICAgIDwvSG93TGlzdD5cbiAgICAgICAgICAgICAgPC9Ib3c+XG4gICAgICAgICAgICA8L3NlY3Rpb24+XG5cbiAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cInNlY3Rpb25cIj5cbiAgICAgICAgICAgICAgPE1haW5UYWc+QWJvdXQgdGhpcyBpdGVtPC9NYWluVGFnPlxuICAgICAgICAgICAgICA8SGVhZGluZzM+UHJvZHVjdCBEZXNjcmlwdGlvbjwvSGVhZGluZzM+XG4gICAgICAgICAgICAgIDxEZXNjPlxuICAgICAgICAgICAgICAgIFRoZSBsYXN0IGJvc3Mgb2YgZXZlcnkgcmFpZCBpbiBXb1cgaXMgdXN1YWxseSB2ZXJ5IGRpZmZpY3VsdCB0b1xuICAgICAgICAgICAgICAgIGRlZmVhdCBldmVuIGluIE5vcm1hbCBtb2RlLiBIb3dldmVyLCB3aXRoIHByb3BlciBnZWFyIGFuZCBhblxuICAgICAgICAgICAgICAgIGV4cGVyaWVuY2VkIHRlYW0sIGl0IGlzIG1vcmUgdGhhbiByZWFsLiBUbyBkZWZlYXQgU3lsdmFuYXNcbiAgICAgICAgICAgICAgICBXaW5kcnVubmVyIHlvdSBuZWVkIHRvIGdldCB0aHJvdWdoIDMgcGhhc2VzIGFuZCBicmluZyBTeWx2YW5hc1xuICAgICAgICAgICAgICAgIGhlYWx0aCBkb3duIHRvIDUwJS4gQXQgbXl0aGljIGRpZmZpY3VsdHkgU29EIFN5bHZhbmFzIFdpbmRydW5uZXJcbiAgICAgICAgICAgICAgICBraWxsIHdpbGwgYmUgY291bnRlZCBhdCA0NSUgb2YgaGVyIGhlYWx0aC57XCIgXCJ9XG4gICAgICAgICAgICAgIDwvRGVzYz5cbiAgICAgICAgICAgICAgPERlc2M+XG4gICAgICAgICAgICAgICAgVGhlIGxhc3QgYm9zcyBvZiBldmVyeSByYWlkIGluIFdvVyBpcyB1c3VhbGx5IHZlcnkgZGlmZmljdWx0IHRvXG4gICAgICAgICAgICAgICAgZGVmZWF0IGV2ZW4gaW4gTm9ybWFsIG1vZGUuIEhvd2V2ZXIsIHdpdGggcHJvcGVyIGdlYXIgYW5kIGFuXG4gICAgICAgICAgICAgICAgZXhwZXJpZW5jZWQgdGVhbSwgaXQgaXMgbW9yZSB0aGFuIHJlYWwuIFRvIGRlZmVhdCBTeWx2YW5hc1xuICAgICAgICAgICAgICAgIFdpbmRydW5uZXIgeW91IG5lZWQgdG8gZ2V0IHRocm91Z2ggMyBwaGFzZXMgYW5kIGJyaW5nIFN5bHZhbmFzXG4gICAgICAgICAgICAgICAgaGVhbHRoIGRvd24gdG8gNTAlLiBBdCBteXRoaWMgZGlmZmljdWx0eSBTb0QgU3lsdmFuYXMgV2luZHJ1bm5lclxuICAgICAgICAgICAgICAgIGtpbGwgd2lsbCBiZSBjb3VudGVkIGF0IDQ1JSBvZiBoZXIgaGVhbHRoLntcIiBcIn1cbiAgICAgICAgICAgICAgPC9EZXNjPlxuICAgICAgICAgICAgICA8RGVzYz5cbiAgICAgICAgICAgICAgICBUaGUgbGFzdCBib3NzIG9mIGV2ZXJ5IHJhaWQgaW4gV29XIGlzIHVzdWFsbHkgdmVyeSBkaWZmaWN1bHQgdG9cbiAgICAgICAgICAgICAgICBkZWZlYXQgZXZlbiBpbiBOb3JtYWwgbW9kZS4gSG93ZXZlciwgd2l0aCBwcm9wZXIgZ2VhciBhbmQgYW5cbiAgICAgICAgICAgICAgICBleHBlcmllbmNlZCB0ZWFtLCBpdCBpcyBtb3JlIHRoYW4gcmVhbC4gVG8gZGVmZWF0IFN5bHZhbmFzXG4gICAgICAgICAgICAgICAgV2luZHJ1bm5lciB5b3UgbmVlZCB0byBnZXQgdGhyb3VnaCAzIHBoYXNlcyBhbmQgYnJpbmcgU3lsdmFuYXNcbiAgICAgICAgICAgICAgICBoZWFsdGggZG93biB0byA1MCUuIEF0IG15dGhpYyBkaWZmaWN1bHR5IFNvRCBTeWx2YW5hcyBXaW5kcnVubmVyXG4gICAgICAgICAgICAgICAga2lsbCB3aWxsIGJlIGNvdW50ZWQgYXQgNDUlIG9mIGhlciBoZWFsdGgue1wiIFwifVxuICAgICAgICAgICAgICA8L0Rlc2M+XG4gICAgICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgICAgPC9TbWFsbENvbnRhaW5lcj5cblxuXG4gICAgICAgICAgPEZlZWRiYWNrPlxuICAgICAgICAgICAgPENlbnRlcj5cbiAgICAgICAgICAgICAgPE1haW5UYWc+UmV2aWV3IGFuZCBGZWVkYmFjazwvTWFpblRhZz5cbiAgICAgICAgICAgICAgPEhlYWRpbmcyPkxlYXZlIHVzIGEgZmVlZGJhY2s8L0hlYWRpbmcyPlxuICAgICAgICAgICAgICA8Qm9keTM+WW91IGNhbiBsZWF2ZSBoZXJlIGZlZWRiYWNrIGFuZCByZWFkIHVzZXLigJlzIHJldmlld3M8L0JvZHkzPlxuICAgICAgICAgICAgPC9DZW50ZXI+XG5cbiAgICAgICAgICAgIDxSYXRpbmc+XG4gICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgIDxIZWFkaW5nMj40Ljk8L0hlYWRpbmcyPlxuICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgIDxpbWcgc3JjPXtzdGFyfSBhbHQ9XCJzdGFyXCIgLz5cbiAgICAgICAgICAgICAgPGltZyBzcmM9e3JhdGluZ0xvZ299IGFsdD1cIlwiIC8+XG4gICAgICAgICAgICA8L1JhdGluZz5cblxuICAgICAgICAgICAgPFJldmlld3M+XG4gICAgICAgICAgICAgIDxUZWxsVXM+XG4gICAgICAgICAgICAgICAgPFJldmlld1RpdGxlPlRlbGwgdXMgYWJvdXQgeW91ciBleHBlcmllbmNlPC9SZXZpZXdUaXRsZT5cbiAgICAgICAgICAgICAgICA8Qm9keTQ+WW91ciBvdmVyYWxsIHJhdGluZzwvQm9keTQ+XG4gICAgICAgICAgICAgICAgPFJhdGluZ0lucHV0PlxuICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e3JhdGluZ1N0YXJ9IGFsdD0naWNvbicgLz5cbiAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtyYXRpbmdTdGFyfSBhbHQ9J2ljb24nIC8+XG4gICAgICAgICAgICAgICAgICA8aW1nIHNyYz17cmF0aW5nU3Rhcn0gYWx0PSdpY29uJyAvPlxuICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e3JhdGluZ1N0YXJ9IGFsdD0naWNvbicgLz5cbiAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtyYXRpbmdTdGFyfSBhbHQ9J2ljb24nIC8+XG4gICAgICAgICAgICAgICAgPC9SYXRpbmdJbnB1dD5cbiAgICAgICAgICAgICAgICA8UmV2aWV3Rm9ybT5cbiAgICAgICAgICAgICAgICAgIDxJbnB1dCBwbGFjZWhvbGRlcj1cIlRpdGxlXCIgdHlwZT1cInRleHRcIiAvPlxuICAgICAgICAgICAgICAgICAgPElucHV0IHBsYWNlaG9sZGVyPVwiTmFtZVwiIHR5cGU9XCJ0ZXh0XCIgLz5cbiAgICAgICAgICAgICAgICAgIDxJbnB1dCBwbGFjZWhvbGRlcj1cIkVtYWlsXCIgdHlwZT1cImVtYWlsXCIgLz5cbiAgICAgICAgICAgICAgICAgIDxNZXNzYWdlIHBsYWNlaG9sZGVyPVwiUmV2aWV3IHRleHRcIiAvPlxuICAgICAgICAgICAgICAgICAgPEJ1dHRvbkNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICAgICAgPEJ0blN1Ym1pdD5TZW5kIFJldmlldzwvQnRuU3VibWl0PlxuICAgICAgICAgICAgICAgICAgPC9CdXR0b25Db250YWluZXI+XG4gICAgICAgICAgICAgICAgPC9SZXZpZXdGb3JtPlxuICAgICAgICAgICAgICA8L1RlbGxVcz5cblxuICAgICAgICAgICAgICA8UmV2aWV3VG90YWw+XG4gICAgICAgICAgICAgICAgPFJldmlld1RpdGxlPjIgb2YgMTMyIFJldmlld3M8L1Jldmlld1RpdGxlPlxuXG4gICAgICAgICAgICAgICAgPFJldmlld0NhcmQ+XG4gICAgICAgICAgICAgICAgICA8SGVhZGluZzY+RmFudGFzdGljIEpvYjwvSGVhZGluZzY+XG4gICAgICAgICAgICAgICAgICA8Qm9keTM+XG4gICAgICAgICAgICAgICAgICAgIEdvb2QgcHVyY2hhc2UgTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyXG4gICAgICAgICAgICAgICAgICAgIGFkaXBpc2NpbmcgZWxpdCwgc2VkIGRvIGVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQgdXQgbGFib3JlXG4gICAgICAgICAgICAgICAgICAgIGV0IGRvbG9yZSBtYWduYSBhbGlxdWEuXG4gICAgICAgICAgICAgICAgICA8L0JvZHkzPlxuICAgICAgICAgICAgICAgICAgPFZlcmlmaWVkPlxuICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz17Y2hlY2t9IGFsdD1cImljb25cIiAvPiBWZXJpZmllZCBwdXJjaGFzZWRcbiAgICAgICAgICAgICAgICAgIDwvVmVyaWZpZWQ+XG4gICAgICAgICAgICAgICAgPC9SZXZpZXdDYXJkPlxuICAgICAgICAgICAgICAgIDxSZXZpZXdDYXJkPlxuICAgICAgICAgICAgICAgICAgPEhlYWRpbmc2PkZhbnRhc3RpYyBKb2I8L0hlYWRpbmc2PlxuICAgICAgICAgICAgICAgICAgPEJvZHkzPlxuICAgICAgICAgICAgICAgICAgICBHb29kIHB1cmNoYXNlIExvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1clxuICAgICAgICAgICAgICAgICAgICBhZGlwaXNjaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kIHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZVxuICAgICAgICAgICAgICAgICAgICBldCBkb2xvcmUgbWFnbmEgYWxpcXVhLlxuICAgICAgICAgICAgICAgICAgPC9Cb2R5Mz5cbiAgICAgICAgICAgICAgICAgIDxWZXJpZmllZD5cbiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e2NoZWNrfSBhbHQ9XCJpY29uXCIgLz4gVmVyaWZpZWQgcHVyY2hhc2VkXG4gICAgICAgICAgICAgICAgICA8L1ZlcmlmaWVkPlxuICAgICAgICAgICAgICAgIDwvUmV2aWV3Q2FyZD5cbiAgICAgICAgICAgICAgPC9SZXZpZXdUb3RhbD5cbiAgICAgICAgICAgIDwvUmV2aWV3cz5cbiAgICAgICAgICA8L0ZlZWRiYWNrPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvTWFpblJpZ2h0PlxuICAgIDwvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChQcm9kdWN0U2xpZGVyKTtcblxuY29uc3QgTWFpblJpZ2h0ID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luLWxlZnQ6IDM3NXB4O1xuICB3aWR0aDogY2FsYygxMDAlIC0gMzc1cHgpO1xuXG4gICYgaW5wdXQge1xuICAgIHdpZHRoOiAxMDAlO1xuICB9XG5cbiAgQG1lZGlhICR7ZGV2aWNlLnRhYmxldH0ge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1hcmdpbi1sZWZ0OiB1bnNldDtcbiAgfVxuYDtcblxuY29uc3QgQ29udGVudFNsaWRlID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC13cmFwOiB3cmFwO1xuYDtcblxuY29uc3QgUG9zaXRpb25zID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZ2FwOiAyMHB4O1xuICBtYXJnaW4tdG9wOiA0MHB4O1xuICBmbGV4LXdyYXA6IHdyYXA7XG5cbiAgJiBzZWxlY3Qge1xuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cblxuICBAbWVkaWEgJHtkZXZpY2UubGFwdG9wfSB7XG4gICAgZmxleC13cmFwOiBub3dyYXA7XG4gIH1cbiAgXG5gO1xuXG5jb25zdCBQb3NpdGlvbiA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIHdpZHRoOiAzMDBweDtcblxuICAmIGltZyB7XG4gICAgbWFyZ2luOiA0MHB4IDAgNTBweCAwO1xuICB9XG5gO1xuXG5jb25zdCBCYXNrZXQgPSBzdHlsZWQuZGl2YFxuICBib3JkZXItcmFkaXVzOiAxMnB4O1xuICBib3gtc2hhZG93OiAwcHggNHB4IDMwcHggMHB4ICMzMjMyMzIxYTtcbiAgbWluLXdpZHRoOiAzMDBweDtcbmA7XG5cbmNvbnN0IEhlYWRlciA9IHN0eWxlZC5kaXZgXG4gIGJhY2tncm91bmQ6IHVybCgke2JnQmFza2V0fSkgbm8tcmVwZWF0O1xuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xuICBwYWRkaW5nOiAyMHB4O1xuICBjb2xvcjogI2ZmZjtcbiAgYm9yZGVyLXJhZGl1czogMTJweDtcbmA7XG5cbmNvbnN0IEJhc2tldEJvZHkgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiAyMHB4O1xuYDtcblxuY29uc3QgQkJJbmZvID0gc3R5bGVkLmRpdmBcbiAgcGFkZGluZy1ib3R0b206IDEwcHg7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZWJlZmY4O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5cbiAgJiBoNiB7XG4gICAgY29sb3I6IHZhcigtLXRleHQtZGFyayk7XG4gIH1cbmA7XG5cbmNvbnN0IEJCVGl0bGUgPSBzdHlsZWQoSGVhZGluZzcpYFxuICBtYXJnaW4tYm90dG9tOiA2cHg7XG4gIGNvbG9yOiB2YXIoLS1wcmltYXJ5LXByZXNzZWQpO1xuYDtcblxuY29uc3QgQkJEZXRhaWwgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIG1hcmdpbi10b3A6IDEwcHg7XG5gO1xuXG5jb25zdCBFeHRyYU9wdGlvbnMgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBnYXA6IDE0cHg7XG4gIG1hcmdpbjogMjBweCAwO1xuYDtcblxuY29uc3QgRXh0cmEgPSBzdHlsZWQuc3BhbmBcbiAgcGFkZGluZzogMTZweCAyNnB4O1xuICBib3JkZXItcmFkaXVzOiAxMnB4O1xuICBiYWNrZ3JvdW5kOiAjZWJlZmY4O1xuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuYDtcblxuY29uc3QgRXh0cmFJbmZvID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgZGlzcGxheTogZmxleDtcbmA7XG5cbmNvbnN0IFdoYXRZb3VXcmFwID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZ2FwOiA3MHB4O1xuICBtYXJnaW4tdG9wOiAyMHB4O1xuYDtcblxuY29uc3QgV2hhdFlvdSA9IHN0eWxlZC5kaXZgXG4gICYgaW1nIHtcbiAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICB9XG5gO1xuXG5jb25zdCBIb3cgPSBzdHlsZWQudWxgXG4gIG1hcmdpbi10b3A6IDIwcHg7XG4gIGNvdW50ZXItcmVzZXQ6IGNvdW50ZXItbGlzdDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBwYWRkaW5nOiAwO1xuYDtcblxuY29uc3QgSG93TGlzdCA9IHN0eWxlZC5saWBcbiAgbWFyZ2luOiAwIDAgMjBweCA0MHB4O1xuICBsaXN0LXN0eWxlOiBub25lO1xuXG4gICY6OmJlZm9yZSB7XG4gICAgY291bnRlci1pbmNyZW1lbnQ6IGNvdW50ZXItbGlzdDtcbiAgICBjb250ZW50OiBjb3VudGVyKGNvdW50ZXItbGlzdCk7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGxlZnQ6IDA7XG4gICAgYmFja2dyb3VuZDogdXJsKCR7Y291bnR9KTtcbiAgICBib3JkZXItcmFkaXVzOiA4cHg7XG4gICAgd2lkdGg6IDI2cHg7XG4gICAgaGVpZ2h0OiAyNnB4O1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgICBjb2xvcjogIzU0NzllNTtcbiAgfVxuYDtcblxuY29uc3QgRGVzYyA9IHN0eWxlZChCb2R5MylgXG4gIG1hcmdpbi10b3A6IDIwcHg7XG4gIGRpc3BsYXk6IGJsb2NrO1xuYDtcblxuY29uc3QgRmVlZGJhY2sgPSBzdHlsZWQuc2VjdGlvbmBcbiAgbWFyZ2luLXRvcDogMTIwcHg7XG5gO1xuXG5jb25zdCBSYXRpbmcgPSBzdHlsZWQuZGl2YFxuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoXG4gICAgMTA0LjIyZGVnLFxuICAgICNlYmYzZmYgOC40NCUsXG4gICAgcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpIDU5LjU1JSxcbiAgICAjZjRlNmZmIDEwMy42MyVcbiAgKTtcbiAgYmFja2Ryb3AtZmlsdGVyOiBibHVyKDMwcHgpO1xuICAvKiBOb3RlOiBiYWNrZHJvcC1maWx0ZXIgaGFzIG1pbmltYWwgYnJvd3NlciBzdXBwb3J0ICovXG4gIGJvcmRlci1yYWRpdXM6IDMwcHg7XG4gIHBhZGRpbmc6IDIwcHg7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgd2lkdGg6IDQwMHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBnYXA6IDIwcHg7XG4gIG1hcmdpbjogNDBweCBhdXRvO1xuYDtcblxuY29uc3QgUmV2aWV3cyA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGdhcDogOTBweDtcbiAgbWFyZ2luLXRvcDogNDBweDtcbmA7XG5cbmNvbnN0IFRlbGxVcyA9IHN0eWxlZC5kaXZgYDtcblxuY29uc3QgUmF0aW5nSW5wdXQgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBnYXA6IDVweDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgbWFyZ2luLXRvcDogNXB4O1xuYFxuXG5jb25zdCBSZXZpZXdUaXRsZSA9IHN0eWxlZChIZWFkaW5nNClgXG4gIG1hcmdpbi1ib3R0b206IDIwcHg7XG5gO1xuXG5jb25zdCBSZXZpZXdGb3JtID0gc3R5bGVkLmZvcm1gXG4gIG1hcmdpbi10b3A6IDIwcHg7XG5gO1xuXG5jb25zdCBNZXNzYWdlID0gc3R5bGVkLnRleHRhcmVhYFxuICBib3JkZXI6IG5vbmU7XG4gIHdpZHRoOiAxMDAlO1xuICBiYWNrZ3JvdW5kOiAjZWJlZmY4O1xuICBib3JkZXItcmFkaXVzOiA2cHg7XG4gIHBhZGRpbmc6IDEwcHg7XG4gIGZvbnQtZmFtaWx5OiBpbmhlcml0O1xuYDtcblxuY29uc3QgQnRuU3VibWl0ID0gc3R5bGVkKEJ0blByaW1hcnkpYGA7XG5cbmNvbnN0IFJldmlld1RvdGFsID0gc3R5bGVkKFRlbGxVcylgYDtcblxuY29uc3QgUmV2aWV3Q2FyZCA9IHN0eWxlZC5kaXZgXG4gIG1hcmdpbi1ib3R0b206IDMwcHg7XG5gO1xuXG5jb25zdCBWZXJpZmllZCA9IHN0eWxlZC5kaXZgXG4gIGNvbG9yOiAjMTY5NjQ5O1xuICBtYXJnaW4tdG9wOiAxMHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBnYXA6IDEwcHg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5gO1xuIl19 */\");const ReviewTotal=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(TellUs, false?undefined:{target:\"e1iq9jn92\",label:\"ReviewTotal\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");const ReviewCard=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1iq9jn91\",label:\"ReviewCard\"})( false?undefined:{name:\"g46w8s\",styles:\"margin-bottom:30px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Verified=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1iq9jn90\",label:\"Verified\"})( false?undefined:{name:\"puvu8e\",styles:\"color:#169649;margin-top:10px;display:flex;gap:10px;align-items:center\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/lb/src/components/product/product-slider.js\n");

/***/ })

})