webpackHotUpdate("vektora-lb",{

/***/ "./packages/lb/src/components/blog/blog-detail.js":
/*!********************************************************!*\
  !*** ./packages/lb/src/components/blog/blog-detail.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _typography_text__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../typography/text */ \"./packages/lb/src/components/typography/text.js\");\n/* harmony import */ var _images_latest_img_png__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../images/latest-img.png */ \"./packages/lb/src/components/images/latest-img.png\");\n/* harmony import */ var _buttons_button_primary__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../buttons/button-primary */ \"./packages/lb/src/components/buttons/button-primary.js\");\n/* harmony import */ var _typography_main_tag__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../typography/main-tag */ \"./packages/lb/src/components/typography/main-tag.js\");\n/* harmony import */ var _buttons_button_container__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../buttons/button-container */ \"./packages/lb/src/components/buttons/button-container.js\");\n/* harmony import */ var _other_divider__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../other/divider */ \"./packages/lb/src/components/other/divider.js\");\n/* harmony import */ var _images_icons_like_svg__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../images/icons/like.svg */ \"./packages/lb/src/components/images/icons/like.svg\");\n/* harmony import */ var _images_icons_chat_black_svg__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../images/icons/chat-black.svg */ \"./packages/lb/src/components/images/icons/chat-black.svg\");\n/* harmony import */ var _images_icons_unlike_svg__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../images/icons/unlike.svg */ \"./packages/lb/src/components/images/icons/unlike.svg\");\n/* harmony import */ var _frontity_components_link__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @frontity/components/link */ \"./node_modules/@frontity/components/link/index.tsx\");\n/* harmony import */ var _typography_special_tag__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../typography/special-tag */ \"./packages/lb/src/components/typography/special-tag.js\");\n/* harmony import */ var _queries__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../queries */ \"./packages/lb/src/components/queries.js\");\n/* harmony import */ var _contianer_wrap__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../contianer/wrap */ \"./packages/lb/src/components/contianer/wrap.js\");\n/* harmony import */ var _typography_decor_title__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../typography/decor-title */ \"./packages/lb/src/components/typography/decor-title.js\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}// import { BsChatSquareFill } from \"react-icons/bs\";\nconst BlogDetail=()=>{return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsxs\"])(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"Fragment\"],{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsxs\"])(BlogDetailWrap,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Heading2\"],{children:\"Get the Baby Murloc Satch-Shells Transmog with the Purchase of a 6-Month Subscription!\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Body1\"],{children:\"Introducing the eggcelent Baby Murloc Satch-Shells transmog \\u2014 now available to add to your collection! You\\u2019ll be able to carry this adorable back-slot transmog item everywhere you go when you purchase in-game or from the Blizzard Shop.\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsxs\"])(Info,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(Date,{children:\"23.12.2021\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(Author,{children:\"by James Smith\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsxs\"])(Comment,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(\"img\",{src:_images_icons_chat_black_svg__WEBPACK_IMPORTED_MODULE_9__[\"default\"],alt:\"icon\"}),\"212\"]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(BDetailImage,{src:_images_latest_img_png__WEBPACK_IMPORTED_MODULE_3__[\"default\"],alt:\"blog\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Heading4\"],{children:\"A group of Activision Blizzard workers officially announced a strike fund Thursday morning following two days of walkouts in support of quality assurance\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Body3\"],{children:\"The group, called ABK Workers\\u2019 Alliance, came together in July after California\\u2019s Department of Fair Employment and Housing (DFEH) filed a lawsuit preceded by a two-year investigation into the company\\u2019s alleged \\u201Cfrat boy culture.\\u201D Activision Blizzard workers are not officially unionized, which means that the strike, initiated Thursday, will not have union protections. The group is being assisted by the Communication Workers of America, the Washington Post reported. Employees began signing union cards Thursday in an effort to get the group recognized, according to the report. It\\u2019s unclear how many workers are participating in the strike, which has been ongoing since Monday. More than 1,700 contracted workers and employees signed a petition in November demanding that CEO Bobby Kotick resign.\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(BDetailImage,{src:_images_latest_img_png__WEBPACK_IMPORTED_MODULE_3__[\"default\"],alt:\"blog\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Body3\"],{children:\"Image: Allen J. Schaben/Los Angeles Times/Getty Images\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(_other_divider__WEBPACK_IMPORTED_MODULE_7__[\"Divider\"],{}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsxs\"])(Content,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Heading4\"],{children:\"Where they are raising money for a strike fund, ABK Workers\\u2019 Alliance leaders said Activision Blizzard leadership has only continued to ignore demands\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Body3\"],{children:\"Some QA workers at Activision Blizzard and its subsidiaries have walked out of work each day since Monday, in protest of layoffs last week. (Activision Blizzard doesn\\u2019t characterize these job losses as layoffs, however: The company said that these people were temporary contract workers, not employees, and that it was not renewing their contracts.) Activision Blizzard is in the process of converting 500 temporary jobs to full-time status, the company said \\u2014 though the group of Raven Software QA workers were not part of that initiative.\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsxs\"])(Content,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Heading4\"],{children:\"\\u201CWe are all disposable to this company,\\u201D one striking worker told Polygon. \\u201CWe need to band together or we will never get anywhere. [...] If I lose my job due to unionizing, fine, but I\\u2019d rather make this place worth working here.\\u201D\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Body3\"],{children:\"The video game industry has been moving slowly toward unionization over the past few years, but no company in the United States has become officially recognized. Last year, a group of workers that write for mobile app Lovestruck: Choose Your Romance banded together for a 21-day strike \\u2014 and won. It was the first successful game worker strike in the industry history.\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(_other_divider__WEBPACK_IMPORTED_MODULE_7__[\"Divider\"],{}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsxs\"])(Comments,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Heading3\"],{children:\"212 comments to this article:\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsxs\"])(CommentBox,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(Name,{children:\"Mark Jacobs\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Body3\"],{children:\"While I\\u2019m still not sure unionization will have the desired effect re: abuse of female employees(given that that\\u2019s a case of majority employees abusing a minority), it definitely will in terms of crunch and maintaining permanent positions vs. contract labor. Overall, I hope they succeed.\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsxs\"])(CommentAction,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(Date,{children:\"23.12.2021\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsxs\"])(CommentReact,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsxs\"])(Like,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(\"img\",{src:_images_icons_like_svg__WEBPACK_IMPORTED_MODULE_8__[\"default\"],alt:\"icon\"}),\"212\"]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsxs\"])(Unlike,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(\"img\",{src:_images_icons_unlike_svg__WEBPACK_IMPORTED_MODULE_10__[\"default\"],alt:\"icon\"}),\"212\"]})]})]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsxs\"])(CommentBox,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(Name,{children:\"Mark Jacobs\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Body3\"],{children:\"While I\\u2019m still not sure unionization will have the desired effect re: abuse of female employees(given that that\\u2019s a case of majority employees abusing a minority), it definitely will in terms of crunch and maintaining permanent positions vs. contract labor. Overall, I hope they succeed.\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsxs\"])(CommentAction,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(Date,{children:\"23.12.2021\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsxs\"])(CommentReact,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsxs\"])(Like,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(\"img\",{src:_images_icons_like_svg__WEBPACK_IMPORTED_MODULE_8__[\"default\"],alt:\"icon\"}),\"212\"]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsxs\"])(Unlike,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(\"img\",{src:_images_icons_unlike_svg__WEBPACK_IMPORTED_MODULE_10__[\"default\"],alt:\"icon\"}),\"212\"]})]})]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsxs\"])(CommentBox,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(Name,{children:\"Mark Jacobs\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Body3\"],{children:\"While I\\u2019m still not sure unionization will have the desired effect re: abuse of female employees(given that that\\u2019s a case of majority employees abusing a minority), it definitely will in terms of crunch and maintaining permanent positions vs. contract labor. Overall, I hope they succeed.\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsxs\"])(CommentAction,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(Date,{children:\"23.12.2021\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsxs\"])(CommentReact,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsxs\"])(Like,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(\"img\",{src:_images_icons_like_svg__WEBPACK_IMPORTED_MODULE_8__[\"default\"],alt:\"icon\"}),\"212\"]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsxs\"])(Unlike,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(\"img\",{src:_images_icons_unlike_svg__WEBPACK_IMPORTED_MODULE_10__[\"default\"],alt:\"icon\"}),\"212\"]})]})]})]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(_buttons_button_container__WEBPACK_IMPORTED_MODULE_6__[\"ButtonContainer\"],{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(_buttons_button_primary__WEBPACK_IMPORTED_MODULE_4__[\"BtnPrimary\"],{children:\"load 10 more Comments\"})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsxs\"])(Opinion,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(_typography_main_tag__WEBPACK_IMPORTED_MODULE_5__[\"MainTag\"],{children:\"Leave your opinion\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Heading3\"],{children:\"Have something to say?\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsxs\"])(Form,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsxs\"])(TopInput,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(Input,{placeholder:\"Name\",type:\"text\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(Input,{placeholder:\"Email\",type:\"email\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(Message,{placeholder:\"Your comment\"})]})]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(\"div\",{className:\"container\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsxs\"])(BlogBtm,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsxs\"])(_contianer_wrap__WEBPACK_IMPORTED_MODULE_14__[\"Wrap\"],{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(_typography_main_tag__WEBPACK_IMPORTED_MODULE_5__[\"MainTag\"],{children:\"Related articles\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(_typography_decor_title__WEBPACK_IMPORTED_MODULE_15__[\"DecorTitle2\"],{children:\"You can also like to read\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsxs\"])(BlogRelated,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsxs\"])(BlogCard,{link:\"/detail\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsxs\"])(BlogTop,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(Label,{children:\"WOW\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(BlogImage,{src:_images_latest_img_png__WEBPACK_IMPORTED_MODULE_3__[\"default\"],alt:\"blog\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsxs\"])(BlogInfo,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Body2\"],{children:\"12 Nov 2021\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(CommentThumb,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(\"span\",{children:\"212\"})})]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsxs\"])(BlogDet,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Heading3\"],{children:\"Get the Baby Murloc Satch-Shells Transmog with the Purchase of a 6-Month Subscription!\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Body3\"],{children:\"Introducing the eggcelent Baby Murloc Satch-Shells transmog*\\u2014 now available to add to your collection! You\\u2019ll be able to carry this adorable...\"})]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsxs\"])(BlogCard,{link:\"/detail\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsxs\"])(BlogTop,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(Label,{children:\"WOW\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(BlogImage,{src:_images_latest_img_png__WEBPACK_IMPORTED_MODULE_3__[\"default\"],alt:\"blog\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsxs\"])(BlogInfo,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Body2\"],{children:\"12 Nov 2021\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(CommentThumb,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(\"span\",{children:\"212\"})})]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsxs\"])(BlogDet,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Heading3\"],{children:\"Get the Baby Murloc Satch-Shells Transmog with the Purchase of a 6-Month Subscription!\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Body3\"],{children:\"Introducing the eggcelent Baby Murloc Satch-Shells transmog*\\u2014 now available to add to your collection! You\\u2019ll be able to carry this adorable...\"})]})]})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(_buttons_button_container__WEBPACK_IMPORTED_MODULE_6__[\"ButtonContainer\"],{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_16__[\"jsx\"])(_buttons_button_primary__WEBPACK_IMPORTED_MODULE_4__[\"BtnPrimary\"],{children:\"Read More News\"})})]})})]});};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"connect\"])(BlogDetail));const BlogDetailWrap=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1pyb6r227\",label:\"BlogDetailWrap\"})(\"width:80%;margin-top:140px;margin-inline:auto;@media \",_queries__WEBPACK_IMPORTED_MODULE_13__[\"device\"].laptop,\"{width:50%;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const Info=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1pyb6r226\",label:\"Info\"})( false?undefined:{name:\"gvh7m1\",styles:\"display:flex;align-items:center;margin-top:20px;color:#6e7687;gap:20px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Date=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Body3\"], false?undefined:{target:\"e1pyb6r225\",label:\"Date\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");const Author=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Body3\"], false?undefined:{target:\"e1pyb6r224\",label:\"Author\"})( false?undefined:{name:\"d8gv97\",styles:\"padding:0 20px;border-left:1px solid #D0D5DF;border-right:1px solid #D0D5DF\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Comment=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1pyb6r223\",label:\"Comment\"})( false?undefined:{name:\"1bfgogi\",styles:\"display:flex;gap:5px;align-items:center\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const BDetailImage=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"img\", false?undefined:{target:\"e1pyb6r222\",label:\"BDetailImage\"})( false?undefined:{name:\"nsqp27\",styles:\"margin:40px 0 20px 0;border-radius:20px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Content=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1pyb6r221\",label:\"Content\"})( false?undefined:{name:\"iqoq9n\",styles:\"margin-top:20px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Comments=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1pyb6r220\",label:\"Comments\"})( false?undefined:{name:\"1gdbrxn\",styles:\"margin:60px 0 40px 0\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const CommentBox=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1pyb6r219\",label:\"CommentBox\"})( false?undefined:{name:\"93cl9x\",styles:\"margin-top:20px;padding:20px 0;border-bottom:1px solid #d0d5df\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Name=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(_typography_text__WEBPACK_IMPORTED_MODULE_2__[\"Heading4\"], false?undefined:{target:\"e1pyb6r218\",label:\"Name\"})( false?undefined:{name:\"1azpx8r\",styles:\"margin-bottom:20px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const CommentAction=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1pyb6r217\",label:\"CommentAction\"})( false?undefined:{name:\"6vkeaj\",styles:\"margin-top:20px;display:flex;justify-content:space-between\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const CommentReact=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1pyb6r216\",label:\"CommentReact\"})( false?undefined:{name:\"zwbqmk\",styles:\"display:flex;gap:20px;align-items:center\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rcHJvL0RvY3VtZW50cy9Qcm9qZWN0cy92ZWt0b3JhLWxiL3BhY2thZ2VzL2xiL3NyYy9jb21wb25lbnRzL2Jsb2cvYmxvZy1kZXRhaWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBdVUrQiIsImZpbGUiOiIvVXNlcnMvbWFjYm9va3Byby9Eb2N1bWVudHMvUHJvamVjdHMvdmVrdG9yYS1sYi9wYWNrYWdlcy9sYi9zcmMvY29tcG9uZW50cy9ibG9nL2Jsb2ctZGV0YWlsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29ubmVjdCwgc3R5bGVkIH0gZnJvbSBcImZyb250aXR5XCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBCb2R5MSwgQm9keTIsIEJvZHkzLCBIZWFkaW5nMiwgSGVhZGluZzMsIEhlYWRpbmc0IH0gZnJvbSBcIi4uL3R5cG9ncmFwaHkvdGV4dFwiO1xuaW1wb3J0IGJsb2dJbWFnZSBmcm9tIFwiLi4vaW1hZ2VzL2xhdGVzdC1pbWcucG5nXCI7XG5pbXBvcnQgeyBCdG5QcmltYXJ5IH0gZnJvbSBcIi4uL2J1dHRvbnMvYnV0dG9uLXByaW1hcnlcIjtcbmltcG9ydCB7IE1haW5UYWcgfSBmcm9tIFwiLi4vdHlwb2dyYXBoeS9tYWluLXRhZ1wiO1xuaW1wb3J0IHsgQnV0dG9uQ29udGFpbmVyIH0gZnJvbSBcIi4uL2J1dHRvbnMvYnV0dG9uLWNvbnRhaW5lclwiO1xuaW1wb3J0IHsgRGl2aWRlciB9IGZyb20gXCIuLi9vdGhlci9kaXZpZGVyXCI7XG5pbXBvcnQgYmxvZ0ltZyBmcm9tIFwiLi4vaW1hZ2VzL2xhdGVzdC1pbWcucG5nXCI7XG5pbXBvcnQgbGlrZSBmcm9tIFwiLi4vaW1hZ2VzL2ljb25zL2xpa2Uuc3ZnXCI7XG5pbXBvcnQgY2hhdEJsYWNrIGZyb20gXCIuLi9pbWFnZXMvaWNvbnMvY2hhdC1ibGFjay5zdmdcIjtcbmltcG9ydCB1bmxpa2UgZnJvbSBcIi4uL2ltYWdlcy9pY29ucy91bmxpa2Uuc3ZnXCI7XG5pbXBvcnQgTGluayBmcm9tIFwiQGZyb250aXR5L2NvbXBvbmVudHMvbGlua1wiO1xuaW1wb3J0IHsgU3BlY2lhbCB9IGZyb20gXCIuLi90eXBvZ3JhcGh5L3NwZWNpYWwtdGFnXCI7XG5pbXBvcnQgeyBkZXZpY2UgfSBmcm9tIFwiLi4vcXVlcmllc1wiO1xuaW1wb3J0IHsgV3JhcCB9IGZyb20gXCIuLi9jb250aWFuZXIvd3JhcFwiO1xuaW1wb3J0IHsgRGVjb3JUaXRsZTIgfSBmcm9tIFwiLi4vdHlwb2dyYXBoeS9kZWNvci10aXRsZVwiO1xuLy8gaW1wb3J0IHsgQnNDaGF0U3F1YXJlRmlsbCB9IGZyb20gXCJyZWFjdC1pY29ucy9ic1wiO1xuXG5cbmNvbnN0IEJsb2dEZXRhaWwgPSAoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxCbG9nRGV0YWlsV3JhcD5cbiAgICAgICAgPEhlYWRpbmcyPlxuICAgICAgICAgIEdldCB0aGUgQmFieSBNdXJsb2MgU2F0Y2gtU2hlbGxzIFRyYW5zbW9nIHdpdGggdGhlIFB1cmNoYXNlIG9mIGFcbiAgICAgICAgICA2LU1vbnRoIFN1YnNjcmlwdGlvbiFcbiAgICAgICAgPC9IZWFkaW5nMj5cbiAgICAgICAgPEJvZHkxPlxuICAgICAgICAgIEludHJvZHVjaW5nIHRoZSBlZ2djZWxlbnQgQmFieSBNdXJsb2MgU2F0Y2gtU2hlbGxzIHRyYW5zbW9nIOKAlCBub3dcbiAgICAgICAgICBhdmFpbGFibGUgdG8gYWRkIHRvIHlvdXIgY29sbGVjdGlvbiEgWW914oCZbGwgYmUgYWJsZSB0byBjYXJyeSB0aGlzXG4gICAgICAgICAgYWRvcmFibGUgYmFjay1zbG90IHRyYW5zbW9nIGl0ZW0gZXZlcnl3aGVyZSB5b3UgZ28gd2hlbiB5b3UgcHVyY2hhc2VcbiAgICAgICAgICBpbi1nYW1lIG9yIGZyb20gdGhlIEJsaXp6YXJkIFNob3AuXG4gICAgICAgIDwvQm9keTE+XG4gICAgICAgIDxJbmZvPlxuICAgICAgICAgIDxEYXRlPjIzLjEyLjIwMjE8L0RhdGU+XG4gICAgICAgICAgPEF1dGhvcj5ieSBKYW1lcyBTbWl0aDwvQXV0aG9yPlxuICAgICAgICAgIDxDb21tZW50PlxuICAgICAgICAgICAgPGltZyBzcmM9e2NoYXRCbGFja30gYWx0PSdpY29uJyAvPlxuICAgICAgICAgICAgMjEyXG4gICAgICAgICAgPC9Db21tZW50PlxuICAgICAgICA8L0luZm8+XG5cbiAgICAgICAgPEJEZXRhaWxJbWFnZSBzcmM9e2Jsb2dJbWFnZX0gYWx0PVwiYmxvZ1wiIC8+XG4gICAgICAgIDxIZWFkaW5nND5cbiAgICAgICAgICBBIGdyb3VwIG9mIEFjdGl2aXNpb24gQmxpenphcmQgd29ya2VycyBvZmZpY2lhbGx5IGFubm91bmNlZCBhIHN0cmlrZVxuICAgICAgICAgIGZ1bmQgVGh1cnNkYXkgbW9ybmluZyBmb2xsb3dpbmcgdHdvIGRheXMgb2Ygd2Fsa291dHMgaW4gc3VwcG9ydCBvZlxuICAgICAgICAgIHF1YWxpdHkgYXNzdXJhbmNlXG4gICAgICAgIDwvSGVhZGluZzQ+XG4gICAgICAgIDxCb2R5Mz5cbiAgICAgICAgICBUaGUgZ3JvdXAsIGNhbGxlZCBBQksgV29ya2Vyc+KAmSBBbGxpYW5jZSwgY2FtZSB0b2dldGhlciBpbiBKdWx5IGFmdGVyXG4gICAgICAgICAgQ2FsaWZvcm5pYeKAmXMgRGVwYXJ0bWVudCBvZiBGYWlyIEVtcGxveW1lbnQgYW5kIEhvdXNpbmcgKERGRUgpIGZpbGVkIGFcbiAgICAgICAgICBsYXdzdWl0IHByZWNlZGVkIGJ5IGEgdHdvLXllYXIgaW52ZXN0aWdhdGlvbiBpbnRvIHRoZSBjb21wYW554oCZc1xuICAgICAgICAgIGFsbGVnZWQg4oCcZnJhdCBib3kgY3VsdHVyZS7igJ0gQWN0aXZpc2lvbiBCbGl6emFyZCB3b3JrZXJzIGFyZSBub3RcbiAgICAgICAgICBvZmZpY2lhbGx5IHVuaW9uaXplZCwgd2hpY2ggbWVhbnMgdGhhdCB0aGUgc3RyaWtlLCBpbml0aWF0ZWQgVGh1cnNkYXksXG4gICAgICAgICAgd2lsbCBub3QgaGF2ZSB1bmlvbiBwcm90ZWN0aW9ucy4gVGhlIGdyb3VwIGlzIGJlaW5nIGFzc2lzdGVkIGJ5IHRoZVxuICAgICAgICAgIENvbW11bmljYXRpb24gV29ya2VycyBvZiBBbWVyaWNhLCB0aGUgV2FzaGluZ3RvbiBQb3N0IHJlcG9ydGVkLlxuICAgICAgICAgIEVtcGxveWVlcyBiZWdhbiBzaWduaW5nIHVuaW9uIGNhcmRzIFRodXJzZGF5IGluIGFuIGVmZm9ydCB0byBnZXQgdGhlXG4gICAgICAgICAgZ3JvdXAgcmVjb2duaXplZCwgYWNjb3JkaW5nIHRvIHRoZSByZXBvcnQuIEl04oCZcyB1bmNsZWFyIGhvdyBtYW55XG4gICAgICAgICAgd29ya2VycyBhcmUgcGFydGljaXBhdGluZyBpbiB0aGUgc3RyaWtlLCB3aGljaCBoYXMgYmVlbiBvbmdvaW5nIHNpbmNlXG4gICAgICAgICAgTW9uZGF5LiBNb3JlIHRoYW4gMSw3MDAgY29udHJhY3RlZCB3b3JrZXJzIGFuZCBlbXBsb3llZXMgc2lnbmVkIGFcbiAgICAgICAgICBwZXRpdGlvbiBpbiBOb3ZlbWJlciBkZW1hbmRpbmcgdGhhdCBDRU8gQm9iYnkgS290aWNrIHJlc2lnbi5cbiAgICAgICAgPC9Cb2R5Mz5cblxuICAgICAgICA8QkRldGFpbEltYWdlIHNyYz17YmxvZ0ltYWdlfSBhbHQ9XCJibG9nXCIgLz5cbiAgICAgICAgPEJvZHkzPkltYWdlOiBBbGxlbiBKLiBTY2hhYmVuL0xvcyBBbmdlbGVzIFRpbWVzL0dldHR5IEltYWdlczwvQm9keTM+XG5cbiAgICAgICAgPERpdmlkZXIgLz5cblxuICAgICAgICA8Q29udGVudD5cbiAgICAgICAgICA8SGVhZGluZzQ+XG4gICAgICAgICAgICBXaGVyZSB0aGV5IGFyZSByYWlzaW5nIG1vbmV5IGZvciBhIHN0cmlrZSBmdW5kLCBBQksgV29ya2Vyc+KAmVxuICAgICAgICAgICAgQWxsaWFuY2UgbGVhZGVycyBzYWlkIEFjdGl2aXNpb24gQmxpenphcmQgbGVhZGVyc2hpcCBoYXMgb25seVxuICAgICAgICAgICAgY29udGludWVkIHRvIGlnbm9yZSBkZW1hbmRzXG4gICAgICAgICAgPC9IZWFkaW5nND5cbiAgICAgICAgICA8Qm9keTM+XG4gICAgICAgICAgICBTb21lIFFBIHdvcmtlcnMgYXQgQWN0aXZpc2lvbiBCbGl6emFyZCBhbmQgaXRzIHN1YnNpZGlhcmllcyBoYXZlXG4gICAgICAgICAgICB3YWxrZWQgb3V0IG9mIHdvcmsgZWFjaCBkYXkgc2luY2UgTW9uZGF5LCBpbiBwcm90ZXN0IG9mIGxheW9mZnMgbGFzdFxuICAgICAgICAgICAgd2Vlay4gKEFjdGl2aXNpb24gQmxpenphcmQgZG9lc27igJl0IGNoYXJhY3Rlcml6ZSB0aGVzZSBqb2IgbG9zc2VzIGFzXG4gICAgICAgICAgICBsYXlvZmZzLCBob3dldmVyOiBUaGUgY29tcGFueSBzYWlkIHRoYXQgdGhlc2UgcGVvcGxlIHdlcmUgdGVtcG9yYXJ5XG4gICAgICAgICAgICBjb250cmFjdCB3b3JrZXJzLCBub3QgZW1wbG95ZWVzLCBhbmQgdGhhdCBpdCB3YXMgbm90IHJlbmV3aW5nIHRoZWlyXG4gICAgICAgICAgICBjb250cmFjdHMuKSBBY3RpdmlzaW9uIEJsaXp6YXJkIGlzIGluIHRoZSBwcm9jZXNzIG9mIGNvbnZlcnRpbmcgNTAwXG4gICAgICAgICAgICB0ZW1wb3Jhcnkgam9icyB0byBmdWxsLXRpbWUgc3RhdHVzLCB0aGUgY29tcGFueSBzYWlkIOKAlCB0aG91Z2ggdGhlXG4gICAgICAgICAgICBncm91cCBvZiBSYXZlbiBTb2Z0d2FyZSBRQSB3b3JrZXJzIHdlcmUgbm90IHBhcnQgb2YgdGhhdCBpbml0aWF0aXZlLlxuICAgICAgICAgIDwvQm9keTM+XG4gICAgICAgIDwvQ29udGVudD5cblxuICAgICAgICA8Q29udGVudD5cbiAgICAgICAgICA8SGVhZGluZzQ+XG4gICAgICAgICAgICDigJxXZSBhcmUgYWxsIGRpc3Bvc2FibGUgdG8gdGhpcyBjb21wYW55LOKAnSBvbmUgc3RyaWtpbmcgd29ya2VyIHRvbGRcbiAgICAgICAgICAgIFBvbHlnb24uIOKAnFdlIG5lZWQgdG8gYmFuZCB0b2dldGhlciBvciB3ZSB3aWxsIG5ldmVyIGdldCBhbnl3aGVyZS5cbiAgICAgICAgICAgIFsuLi5dIElmIEkgbG9zZSBteSBqb2IgZHVlIHRvIHVuaW9uaXppbmcsIGZpbmUsIGJ1dCBJ4oCZZCByYXRoZXIgbWFrZVxuICAgICAgICAgICAgdGhpcyBwbGFjZSB3b3J0aCB3b3JraW5nIGhlcmUu4oCdXG4gICAgICAgICAgPC9IZWFkaW5nND5cbiAgICAgICAgICA8Qm9keTM+XG4gICAgICAgICAgICBUaGUgdmlkZW8gZ2FtZSBpbmR1c3RyeSBoYXMgYmVlbiBtb3Zpbmcgc2xvd2x5IHRvd2FyZCB1bmlvbml6YXRpb25cbiAgICAgICAgICAgIG92ZXIgdGhlIHBhc3QgZmV3IHllYXJzLCBidXQgbm8gY29tcGFueSBpbiB0aGUgVW5pdGVkIFN0YXRlcyBoYXNcbiAgICAgICAgICAgIGJlY29tZSBvZmZpY2lhbGx5IHJlY29nbml6ZWQuIExhc3QgeWVhciwgYSBncm91cCBvZiB3b3JrZXJzIHRoYXRcbiAgICAgICAgICAgIHdyaXRlIGZvciBtb2JpbGUgYXBwIExvdmVzdHJ1Y2s6IENob29zZSBZb3VyIFJvbWFuY2UgYmFuZGVkIHRvZ2V0aGVyXG4gICAgICAgICAgICBmb3IgYSAyMS1kYXkgc3RyaWtlIOKAlCBhbmQgd29uLiBJdCB3YXMgdGhlIGZpcnN0IHN1Y2Nlc3NmdWwgZ2FtZVxuICAgICAgICAgICAgd29ya2VyIHN0cmlrZSBpbiB0aGUgaW5kdXN0cnkgaGlzdG9yeS5cbiAgICAgICAgICA8L0JvZHkzPlxuICAgICAgICA8L0NvbnRlbnQ+XG5cbiAgICAgICAgPERpdmlkZXIgLz5cblxuICAgICAgICA8Q29tbWVudHM+XG4gICAgICAgICAgPEhlYWRpbmczPjIxMiBjb21tZW50cyB0byB0aGlzIGFydGljbGU6PC9IZWFkaW5nMz5cbiAgICAgICAgICA8Q29tbWVudEJveD5cbiAgICAgICAgICAgIDxOYW1lPk1hcmsgSmFjb2JzPC9OYW1lPlxuICAgICAgICAgICAgPEJvZHkzPlxuICAgICAgICAgICAgICBXaGlsZSBJ4oCZbSBzdGlsbCBub3Qgc3VyZSB1bmlvbml6YXRpb24gd2lsbCBoYXZlIHRoZSBkZXNpcmVkIGVmZmVjdFxuICAgICAgICAgICAgICByZTogYWJ1c2Ugb2YgZmVtYWxlIGVtcGxveWVlcyhnaXZlbiB0aGF0IHRoYXTigJlzIGEgY2FzZSBvZiBtYWpvcml0eVxuICAgICAgICAgICAgICBlbXBsb3llZXMgYWJ1c2luZyBhIG1pbm9yaXR5KSwgaXQgZGVmaW5pdGVseSB3aWxsIGluIHRlcm1zIG9mXG4gICAgICAgICAgICAgIGNydW5jaCBhbmQgbWFpbnRhaW5pbmcgcGVybWFuZW50IHBvc2l0aW9ucyB2cy4gY29udHJhY3QgbGFib3IuXG4gICAgICAgICAgICAgIE92ZXJhbGwsIEkgaG9wZSB0aGV5IHN1Y2NlZWQuXG4gICAgICAgICAgICA8L0JvZHkzPlxuICAgICAgICAgICAgPENvbW1lbnRBY3Rpb24+XG4gICAgICAgICAgICAgIDxEYXRlPjIzLjEyLjIwMjE8L0RhdGU+XG4gICAgICAgICAgICAgIDxDb21tZW50UmVhY3Q+XG4gICAgICAgICAgICAgICAgPExpa2U+XG4gICAgICAgICAgICAgICAgICA8aW1nIHNyYz17bGlrZX0gYWx0PSdpY29uJyAvPlxuICAgICAgICAgICAgICAgICAgMjEyXG4gICAgICAgICAgICAgICAgPC9MaWtlPlxuICAgICAgICAgICAgICAgIDxVbmxpa2U+XG4gICAgICAgICAgICAgICAgICA8aW1nIHNyYz17dW5saWtlfSBhbHQ9J2ljb24nIC8+XG4gICAgICAgICAgICAgICAgICAyMTJcbiAgICAgICAgICAgICAgICA8L1VubGlrZT5cbiAgICAgICAgICAgICAgPC9Db21tZW50UmVhY3Q+XG4gICAgICAgICAgICA8L0NvbW1lbnRBY3Rpb24+XG4gICAgICAgICAgPC9Db21tZW50Qm94PlxuICAgICAgICAgIDxDb21tZW50Qm94PlxuICAgICAgICAgICAgPE5hbWU+TWFyayBKYWNvYnM8L05hbWU+XG4gICAgICAgICAgICA8Qm9keTM+XG4gICAgICAgICAgICAgIFdoaWxlIEnigJltIHN0aWxsIG5vdCBzdXJlIHVuaW9uaXphdGlvbiB3aWxsIGhhdmUgdGhlIGRlc2lyZWQgZWZmZWN0XG4gICAgICAgICAgICAgIHJlOiBhYnVzZSBvZiBmZW1hbGUgZW1wbG95ZWVzKGdpdmVuIHRoYXQgdGhhdOKAmXMgYSBjYXNlIG9mIG1ham9yaXR5XG4gICAgICAgICAgICAgIGVtcGxveWVlcyBhYnVzaW5nIGEgbWlub3JpdHkpLCBpdCBkZWZpbml0ZWx5IHdpbGwgaW4gdGVybXMgb2ZcbiAgICAgICAgICAgICAgY3J1bmNoIGFuZCBtYWludGFpbmluZyBwZXJtYW5lbnQgcG9zaXRpb25zIHZzLiBjb250cmFjdCBsYWJvci5cbiAgICAgICAgICAgICAgT3ZlcmFsbCwgSSBob3BlIHRoZXkgc3VjY2VlZC5cbiAgICAgICAgICAgIDwvQm9keTM+XG4gICAgICAgICAgICA8Q29tbWVudEFjdGlvbj5cbiAgICAgICAgICAgICAgPERhdGU+MjMuMTIuMjAyMTwvRGF0ZT5cbiAgICAgICAgICAgICAgPENvbW1lbnRSZWFjdD5cbiAgICAgICAgICAgICAgICA8TGlrZT5cbiAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtsaWtlfSBhbHQ9J2ljb24nIC8+XG4gICAgICAgICAgICAgICAgICAyMTJcbiAgICAgICAgICAgICAgICA8L0xpa2U+XG4gICAgICAgICAgICAgICAgPFVubGlrZT5cbiAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXt1bmxpa2V9IGFsdD0naWNvbicgLz5cbiAgICAgICAgICAgICAgICAgIDIxMlxuICAgICAgICAgICAgICAgIDwvVW5saWtlPlxuICAgICAgICAgICAgICA8L0NvbW1lbnRSZWFjdD5cbiAgICAgICAgICAgIDwvQ29tbWVudEFjdGlvbj5cbiAgICAgICAgICA8L0NvbW1lbnRCb3g+XG4gICAgICAgICAgPENvbW1lbnRCb3g+XG4gICAgICAgICAgICA8TmFtZT5NYXJrIEphY29iczwvTmFtZT5cbiAgICAgICAgICAgIDxCb2R5Mz5cbiAgICAgICAgICAgICAgV2hpbGUgSeKAmW0gc3RpbGwgbm90IHN1cmUgdW5pb25pemF0aW9uIHdpbGwgaGF2ZSB0aGUgZGVzaXJlZCBlZmZlY3RcbiAgICAgICAgICAgICAgcmU6IGFidXNlIG9mIGZlbWFsZSBlbXBsb3llZXMoZ2l2ZW4gdGhhdCB0aGF04oCZcyBhIGNhc2Ugb2YgbWFqb3JpdHlcbiAgICAgICAgICAgICAgZW1wbG95ZWVzIGFidXNpbmcgYSBtaW5vcml0eSksIGl0IGRlZmluaXRlbHkgd2lsbCBpbiB0ZXJtcyBvZlxuICAgICAgICAgICAgICBjcnVuY2ggYW5kIG1haW50YWluaW5nIHBlcm1hbmVudCBwb3NpdGlvbnMgdnMuIGNvbnRyYWN0IGxhYm9yLlxuICAgICAgICAgICAgICBPdmVyYWxsLCBJIGhvcGUgdGhleSBzdWNjZWVkLlxuICAgICAgICAgICAgPC9Cb2R5Mz5cbiAgICAgICAgICAgIDxDb21tZW50QWN0aW9uPlxuICAgICAgICAgICAgICA8RGF0ZT4yMy4xMi4yMDIxPC9EYXRlPlxuICAgICAgICAgICAgICA8Q29tbWVudFJlYWN0PlxuICAgICAgICAgICAgICAgIDxMaWtlPlxuICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e2xpa2V9IGFsdD0naWNvbicgLz5cbiAgICAgICAgICAgICAgICAgIDIxMlxuICAgICAgICAgICAgICAgIDwvTGlrZT5cbiAgICAgICAgICAgICAgICA8VW5saWtlPlxuICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e3VubGlrZX0gYWx0PSdpY29uJyAvPlxuICAgICAgICAgICAgICAgICAgMjEyXG4gICAgICAgICAgICAgICAgPC9Vbmxpa2U+XG4gICAgICAgICAgICAgIDwvQ29tbWVudFJlYWN0PlxuICAgICAgICAgICAgPC9Db21tZW50QWN0aW9uPlxuICAgICAgICAgIDwvQ29tbWVudEJveD5cbiAgICAgICAgPC9Db21tZW50cz5cblxuICAgICAgICA8QnV0dG9uQ29udGFpbmVyPlxuICAgICAgICAgIDxCdG5QcmltYXJ5PmxvYWQgMTAgbW9yZSBDb21tZW50czwvQnRuUHJpbWFyeT5cbiAgICAgICAgPC9CdXR0b25Db250YWluZXI+XG5cbiAgICAgICAgPE9waW5pb24+XG4gICAgICAgICAgPE1haW5UYWc+TGVhdmUgeW91ciBvcGluaW9uPC9NYWluVGFnPlxuICAgICAgICAgIDxIZWFkaW5nMz5IYXZlIHNvbWV0aGluZyB0byBzYXk/PC9IZWFkaW5nMz5cbiAgICAgICAgICA8Rm9ybT5cbiAgICAgICAgICAgIDxUb3BJbnB1dD5cbiAgICAgICAgICAgICAgPElucHV0IHBsYWNlaG9sZGVyPVwiTmFtZVwiIHR5cGU9XCJ0ZXh0XCIgLz5cbiAgICAgICAgICAgICAgPElucHV0IHBsYWNlaG9sZGVyPVwiRW1haWxcIiB0eXBlPVwiZW1haWxcIiAvPlxuICAgICAgICAgICAgPC9Ub3BJbnB1dD5cblxuICAgICAgICAgICAgPE1lc3NhZ2UgcGxhY2Vob2xkZXI9XCJZb3VyIGNvbW1lbnRcIiAvPlxuICAgICAgICAgIDwvRm9ybT5cbiAgICAgICAgPC9PcGluaW9uPlxuICAgICAgPC9CbG9nRGV0YWlsV3JhcD5cblxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXJcIj5cbiAgICAgICAgPEJsb2dCdG0+XG4gICAgICAgICAgPFdyYXA+XG4gICAgICAgICAgICA8TWFpblRhZz5SZWxhdGVkIGFydGljbGVzPC9NYWluVGFnPlxuICAgICAgICAgICAgPERlY29yVGl0bGUyPllvdSBjYW4gYWxzbyBsaWtlIHRvIHJlYWQ8L0RlY29yVGl0bGUyPlxuICAgICAgICAgIDwvV3JhcD5cblxuICAgICAgICAgIDxCbG9nUmVsYXRlZD5cbiAgICAgICAgICAgIDxCbG9nQ2FyZCBsaW5rPVwiL2RldGFpbFwiPlxuICAgICAgICAgICAgICA8QmxvZ1RvcD5cbiAgICAgICAgICAgICAgICA8TGFiZWw+V09XPC9MYWJlbD5cbiAgICAgICAgICAgICAgICA8QmxvZ0ltYWdlIHNyYz17YmxvZ0ltZ30gYWx0PVwiYmxvZ1wiIC8+XG4gICAgICAgICAgICAgICAgPEJsb2dJbmZvPlxuICAgICAgICAgICAgICAgICAgPEJvZHkyPjEyIE5vdiAyMDIxPC9Cb2R5Mj5cbiAgICAgICAgICAgICAgICAgIDxDb21tZW50VGh1bWI+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuPjIxMjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgIDwvQ29tbWVudFRodW1iPlxuICAgICAgICAgICAgICAgIDwvQmxvZ0luZm8+XG4gICAgICAgICAgICAgIDwvQmxvZ1RvcD5cbiAgICAgICAgICAgICAgPEJsb2dEZXQ+XG4gICAgICAgICAgICAgICAgPEhlYWRpbmczPlxuICAgICAgICAgICAgICAgICAgR2V0IHRoZSBCYWJ5IE11cmxvYyBTYXRjaC1TaGVsbHMgVHJhbnNtb2cgd2l0aCB0aGUgUHVyY2hhc2Ugb2ZcbiAgICAgICAgICAgICAgICAgIGEgNi1Nb250aCBTdWJzY3JpcHRpb24hXG4gICAgICAgICAgICAgICAgPC9IZWFkaW5nMz5cbiAgICAgICAgICAgICAgICA8Qm9keTM+XG4gICAgICAgICAgICAgICAgICBJbnRyb2R1Y2luZyB0aGUgZWdnY2VsZW50IEJhYnkgTXVybG9jIFNhdGNoLVNoZWxscyB0cmFuc21vZyrigJRcbiAgICAgICAgICAgICAgICAgIG5vdyBhdmFpbGFibGUgdG8gYWRkIHRvIHlvdXIgY29sbGVjdGlvbiEgWW914oCZbGwgYmUgYWJsZSB0b1xuICAgICAgICAgICAgICAgICAgY2FycnkgdGhpcyBhZG9yYWJsZS4uLlxuICAgICAgICAgICAgICAgIDwvQm9keTM+XG4gICAgICAgICAgICAgIDwvQmxvZ0RldD5cbiAgICAgICAgICAgIDwvQmxvZ0NhcmQ+XG4gICAgICAgICAgICA8QmxvZ0NhcmQgbGluaz1cIi9kZXRhaWxcIj5cbiAgICAgICAgICAgICAgPEJsb2dUb3A+XG4gICAgICAgICAgICAgICAgPExhYmVsPldPVzwvTGFiZWw+XG4gICAgICAgICAgICAgICAgPEJsb2dJbWFnZSBzcmM9e2Jsb2dJbWd9IGFsdD1cImJsb2dcIiAvPlxuICAgICAgICAgICAgICAgIDxCbG9nSW5mbz5cbiAgICAgICAgICAgICAgICAgIDxCb2R5Mj4xMiBOb3YgMjAyMTwvQm9keTI+XG4gICAgICAgICAgICAgICAgICA8Q29tbWVudFRodW1iPlxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj4yMTI8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIHsvKiA8QnNDaGF0U3F1YXJlRmlsbCAvPiA8c3Bhbj4yMTI8L3NwYW4+ICovfVxuICAgICAgICAgICAgICAgICAgPC9Db21tZW50VGh1bWI+XG4gICAgICAgICAgICAgICAgPC9CbG9nSW5mbz5cbiAgICAgICAgICAgICAgPC9CbG9nVG9wPlxuICAgICAgICAgICAgICA8QmxvZ0RldD5cbiAgICAgICAgICAgICAgICA8SGVhZGluZzM+XG4gICAgICAgICAgICAgICAgICBHZXQgdGhlIEJhYnkgTXVybG9jIFNhdGNoLVNoZWxscyBUcmFuc21vZyB3aXRoIHRoZSBQdXJjaGFzZSBvZlxuICAgICAgICAgICAgICAgICAgYSA2LU1vbnRoIFN1YnNjcmlwdGlvbiFcbiAgICAgICAgICAgICAgICA8L0hlYWRpbmczPlxuICAgICAgICAgICAgICAgIDxCb2R5Mz5cbiAgICAgICAgICAgICAgICAgIEludHJvZHVjaW5nIHRoZSBlZ2djZWxlbnQgQmFieSBNdXJsb2MgU2F0Y2gtU2hlbGxzIHRyYW5zbW9nKuKAlFxuICAgICAgICAgICAgICAgICAgbm93IGF2YWlsYWJsZSB0byBhZGQgdG8geW91ciBjb2xsZWN0aW9uISBZb3XigJlsbCBiZSBhYmxlIHRvXG4gICAgICAgICAgICAgICAgICBjYXJyeSB0aGlzIGFkb3JhYmxlLi4uXG4gICAgICAgICAgICAgICAgPC9Cb2R5Mz5cbiAgICAgICAgICAgICAgPC9CbG9nRGV0PlxuICAgICAgICAgICAgPC9CbG9nQ2FyZD5cbiAgICAgICAgICA8L0Jsb2dSZWxhdGVkPlxuXG4gICAgICAgICAgPEJ1dHRvbkNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgPEJ0blByaW1hcnk+UmVhZCBNb3JlIE5ld3M8L0J0blByaW1hcnk+XG4gICAgICAgICAgPC9CdXR0b25Db250YWluZXI+XG4gICAgICAgIDwvQmxvZ0J0bT5cbiAgICAgIDwvZGl2PlxuICAgIDwvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChCbG9nRGV0YWlsKTtcblxuY29uc3QgQmxvZ0RldGFpbFdyYXAgPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogODAlO1xuICAvKiBwYWRkaW5nOiAwIDIwcHg7ICovXG4gIG1hcmdpbi10b3A6IDE0MHB4O1xuICBtYXJnaW4taW5saW5lOiBhdXRvO1xuICBcbiAgQG1lZGlhICR7ZGV2aWNlLmxhcHRvcH0ge1xuICAgIHdpZHRoOiA1MCU7XG4gIH1cblxuYDtcblxuY29uc3QgSW5mbyA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIG1hcmdpbi10b3A6IDIwcHg7XG4gIGNvbG9yOiAjNmU3Njg3O1xuICBnYXA6IDIwcHg7XG5gO1xuXG5jb25zdCBEYXRlID0gc3R5bGVkKEJvZHkzKWBgO1xuY29uc3QgQXV0aG9yID0gc3R5bGVkKEJvZHkzKWBcbiAgcGFkZGluZzogMCAyMHB4O1xuICBib3JkZXItbGVmdDogMXB4IHNvbGlkICNEMEQ1REY7XG4gIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNEMEQ1REY7XG5gO1xuXG5jb25zdCBDb21tZW50ID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZ2FwOiA1cHg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5gO1xuXG5jb25zdCBCRGV0YWlsSW1hZ2UgPSBzdHlsZWQuaW1nYFxuICBtYXJnaW46IDQwcHggMCAyMHB4IDA7XG4gIGJvcmRlci1yYWRpdXM6IDIwcHg7XG5gO1xuXG5jb25zdCBDb250ZW50ID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luLXRvcDogMjBweDtcbmA7XG5cbmNvbnN0IENvbW1lbnRzID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luOiA2MHB4IDAgNDBweCAwO1xuYDtcblxuY29uc3QgQ29tbWVudEJveCA9IHN0eWxlZC5kaXZgXG4gIG1hcmdpbi10b3A6IDIwcHg7XG4gIHBhZGRpbmc6IDIwcHggMDtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNkMGQ1ZGY7XG5gO1xuXG5jb25zdCBOYW1lID0gc3R5bGVkKEhlYWRpbmc0KWBcbiAgbWFyZ2luLWJvdHRvbTogMjBweDtcbmA7XG5cbmNvbnN0IENvbW1lbnRBY3Rpb24gPSBzdHlsZWQuZGl2YFxuICBtYXJnaW4tdG9wOiAyMHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5gO1xuXG5jb25zdCBDb21tZW50UmVhY3QgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBnYXA6IDIwcHg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5gO1xuXG5jb25zdCBMaWtlID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZ2FwOiAxMHB4O1xuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoODkuNjdkZWcsICM1NDc5RTYgMC4yNiUsICM2QjdBRkYgOTkuNzElKTtcbi13ZWJraXQtYmFja2dyb3VuZC1jbGlwOiB0ZXh0O1xuLXdlYmtpdC10ZXh0LWZpbGwtY29sb3I6IHRyYW5zcGFyZW50O1xuYmFja2dyb3VuZC1jbGlwOiB0ZXh0O1xuYWxpZ24taXRlbXM6IGNlbnRlcjtcbmBcblxuY29uc3QgVW5saWtlID0gc3R5bGVkKExpa2UpYGBcblxuY29uc3QgT3BpbmlvbiA9IHN0eWxlZC5kaXZgXG4gIG1hcmdpbi10b3A6IDEwMHB4O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5gO1xuXG5jb25zdCBGb3JtID0gc3R5bGVkLmZvcm1gXG4gIG1hcmdpbjogNDBweCAwO1xuICB3aWR0aDogMTAwJTtcbmA7XG5cbmNvbnN0IFRvcElucHV0ID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZ2FwOiAyMHB4O1xuYDtcblxuY29uc3QgSW5wdXQgPSBzdHlsZWQuaW5wdXRgXG4gIGJhY2tncm91bmQ6ICNlYmVmZjg7XG4gIGJvcmRlci1yYWRpdXM6IDZweDtcbiAgcGFkZGluZzogMTBweDtcbiAgYm9yZGVyOiBub25lO1xuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICB3aWR0aDogLXdlYmtpdC1maWxsLWF2YWlsYWJsZTtcbmA7XG5cbmNvbnN0IE1lc3NhZ2UgPSBzdHlsZWQudGV4dGFyZWFgXG4gIGJhY2tncm91bmQ6ICNlYmVmZjg7XG4gIGJvcmRlci1yYWRpdXM6IDZweDtcbiAgcGFkZGluZzogMTBweDtcbiAgYm9yZGVyOiBub25lO1xuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICBmb250LWZhbWlseTogaW5oZXJpdDtcbiAgd2lkdGg6IC13ZWJraXQtZmlsbC1hdmFpbGFibGU7XG5gO1xuXG5jb25zdCBCbG9nQnRtID0gc3R5bGVkLnNlY3Rpb25gXG4gIG1hcmdpbi1ib3R0b206IDYwcHg7XG5cbmBcblxuY29uc3QgQmxvZ1JlbGF0ZWQgPSBzdHlsZWQuZGl2YFxuICAgIG1hcmdpbi10b3A6IDIwcHg7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBnYXA6IDkwcHg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcblxuICAgIEBtZWRpYSAke2RldmljZS5sYXB0b3B9IHtcbiAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gICAgfVxuYFxuXG5jb25zdCBCbG9nQ2FyZCA9IHN0eWxlZChMaW5rKWBcbiAgYm9yZGVyLXJhZGl1czogMjBweDtcbiAgY3Vyc29yOiBwb2ludGVyO1xuYDtcblxuY29uc3QgQmxvZ1RvcCA9IHN0eWxlZC5kaXZgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogZmxleDtcbiAgd2lkdGg6IGF1dG87XG5gO1xuXG5jb25zdCBMYWJlbCA9IHN0eWxlZChTcGVjaWFsKWBcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgaW5zZXQ6IDMwcHggYXV0byBhdXRvIDMwcHg7XG5gXG5cbmNvbnN0IEJsb2dJbWFnZSA9IHN0eWxlZC5pbWdgXG4gIGJvcmRlci1yYWRpdXM6IDIwcHg7XG4gIC8qIG1hcmdpbi10b3A6IDQwcHg7ICovXG4gIGhlaWdodDogMTAwJTtcbmA7XG5cbmNvbnN0IEJsb2dJbmZvID0gc3R5bGVkLmRpdmBcbiAgY29sb3I6ICNmZmY7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgei1pbmRleDogMjtcbiAgaW5zZXQ6IGF1dG8gMCAwIDA7XG4gIHBhZGRpbmc6IDMwcHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIG1hcmdpbi10b3A6IGF1dG87XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcblxuICAmIHNwYW4sXG4gIHAge1xuICAgIGNvbG9yOiAjZmZmO1xuICB9XG5gO1xuXG5jb25zdCBDb21tZW50VGh1bWIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBjb2x1bW4tZ2FwOiAxMHB4O1xuYDtcbmNvbnN0IEJsb2dEZXQgPSBzdHlsZWQuZGl2YFxuICBtYXJnaW4tdG9wOiAyMHB4O1xuYDsiXX0= */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Like=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1pyb6r215\",label:\"Like\"})( false?undefined:{name:\"1henvxi\",styles:\"display:flex;gap:10px;background:linear-gradient(89.67deg, #5479E6 0.26%, #6B7AFF 99.71%);-webkit-background-clip:text;-webkit-text-fill-color:transparent;background-clip:text;align-items:center\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Unlike=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(Like, false?undefined:{target:\"e1pyb6r214\",label:\"Unlike\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");const Opinion=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1pyb6r213\",label:\"Opinion\"})( false?undefined:{name:\"nofe95\",styles:\"margin-top:100px;text-align:center\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Form=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"form\", false?undefined:{target:\"e1pyb6r212\",label:\"Form\"})( false?undefined:{name:\"rw9byj\",styles:\"margin:40px 0;width:100%\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const TopInput=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1pyb6r211\",label:\"TopInput\"})( false?undefined:{name:\"yu6za6\",styles:\"display:flex;align-items:center;gap:20px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Input=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"input\", false?undefined:{target:\"e1pyb6r210\",label:\"Input\"})( false?undefined:{name:\"10i8fw\",styles:\"background:#ebeff8;border-radius:6px;padding:10px;border:none;margin-bottom:20px;width:-webkit-fill-available\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Message=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"textarea\", false?undefined:{target:\"e1pyb6r29\",label:\"Message\"})( false?undefined:{name:\"oapbud\",styles:\"background:#ebeff8;border-radius:6px;padding:10px;border:none;margin-bottom:20px;font-family:inherit;width:-webkit-fill-available\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYWNib29rcHJvL0RvY3VtZW50cy9Qcm9qZWN0cy92ZWt0b3JhLWxiL3BhY2thZ2VzL2xiL3NyYy9jb21wb25lbnRzL2Jsb2cvYmxvZy1kZXRhaWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa1grQiIsImZpbGUiOiIvVXNlcnMvbWFjYm9va3Byby9Eb2N1bWVudHMvUHJvamVjdHMvdmVrdG9yYS1sYi9wYWNrYWdlcy9sYi9zcmMvY29tcG9uZW50cy9ibG9nL2Jsb2ctZGV0YWlsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29ubmVjdCwgc3R5bGVkIH0gZnJvbSBcImZyb250aXR5XCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBCb2R5MSwgQm9keTIsIEJvZHkzLCBIZWFkaW5nMiwgSGVhZGluZzMsIEhlYWRpbmc0IH0gZnJvbSBcIi4uL3R5cG9ncmFwaHkvdGV4dFwiO1xuaW1wb3J0IGJsb2dJbWFnZSBmcm9tIFwiLi4vaW1hZ2VzL2xhdGVzdC1pbWcucG5nXCI7XG5pbXBvcnQgeyBCdG5QcmltYXJ5IH0gZnJvbSBcIi4uL2J1dHRvbnMvYnV0dG9uLXByaW1hcnlcIjtcbmltcG9ydCB7IE1haW5UYWcgfSBmcm9tIFwiLi4vdHlwb2dyYXBoeS9tYWluLXRhZ1wiO1xuaW1wb3J0IHsgQnV0dG9uQ29udGFpbmVyIH0gZnJvbSBcIi4uL2J1dHRvbnMvYnV0dG9uLWNvbnRhaW5lclwiO1xuaW1wb3J0IHsgRGl2aWRlciB9IGZyb20gXCIuLi9vdGhlci9kaXZpZGVyXCI7XG5pbXBvcnQgYmxvZ0ltZyBmcm9tIFwiLi4vaW1hZ2VzL2xhdGVzdC1pbWcucG5nXCI7XG5pbXBvcnQgbGlrZSBmcm9tIFwiLi4vaW1hZ2VzL2ljb25zL2xpa2Uuc3ZnXCI7XG5pbXBvcnQgY2hhdEJsYWNrIGZyb20gXCIuLi9pbWFnZXMvaWNvbnMvY2hhdC1ibGFjay5zdmdcIjtcbmltcG9ydCB1bmxpa2UgZnJvbSBcIi4uL2ltYWdlcy9pY29ucy91bmxpa2Uuc3ZnXCI7XG5pbXBvcnQgTGluayBmcm9tIFwiQGZyb250aXR5L2NvbXBvbmVudHMvbGlua1wiO1xuaW1wb3J0IHsgU3BlY2lhbCB9IGZyb20gXCIuLi90eXBvZ3JhcGh5L3NwZWNpYWwtdGFnXCI7XG5pbXBvcnQgeyBkZXZpY2UgfSBmcm9tIFwiLi4vcXVlcmllc1wiO1xuaW1wb3J0IHsgV3JhcCB9IGZyb20gXCIuLi9jb250aWFuZXIvd3JhcFwiO1xuaW1wb3J0IHsgRGVjb3JUaXRsZTIgfSBmcm9tIFwiLi4vdHlwb2dyYXBoeS9kZWNvci10aXRsZVwiO1xuLy8gaW1wb3J0IHsgQnNDaGF0U3F1YXJlRmlsbCB9IGZyb20gXCJyZWFjdC1pY29ucy9ic1wiO1xuXG5cbmNvbnN0IEJsb2dEZXRhaWwgPSAoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxCbG9nRGV0YWlsV3JhcD5cbiAgICAgICAgPEhlYWRpbmcyPlxuICAgICAgICAgIEdldCB0aGUgQmFieSBNdXJsb2MgU2F0Y2gtU2hlbGxzIFRyYW5zbW9nIHdpdGggdGhlIFB1cmNoYXNlIG9mIGFcbiAgICAgICAgICA2LU1vbnRoIFN1YnNjcmlwdGlvbiFcbiAgICAgICAgPC9IZWFkaW5nMj5cbiAgICAgICAgPEJvZHkxPlxuICAgICAgICAgIEludHJvZHVjaW5nIHRoZSBlZ2djZWxlbnQgQmFieSBNdXJsb2MgU2F0Y2gtU2hlbGxzIHRyYW5zbW9nIOKAlCBub3dcbiAgICAgICAgICBhdmFpbGFibGUgdG8gYWRkIHRvIHlvdXIgY29sbGVjdGlvbiEgWW914oCZbGwgYmUgYWJsZSB0byBjYXJyeSB0aGlzXG4gICAgICAgICAgYWRvcmFibGUgYmFjay1zbG90IHRyYW5zbW9nIGl0ZW0gZXZlcnl3aGVyZSB5b3UgZ28gd2hlbiB5b3UgcHVyY2hhc2VcbiAgICAgICAgICBpbi1nYW1lIG9yIGZyb20gdGhlIEJsaXp6YXJkIFNob3AuXG4gICAgICAgIDwvQm9keTE+XG4gICAgICAgIDxJbmZvPlxuICAgICAgICAgIDxEYXRlPjIzLjEyLjIwMjE8L0RhdGU+XG4gICAgICAgICAgPEF1dGhvcj5ieSBKYW1lcyBTbWl0aDwvQXV0aG9yPlxuICAgICAgICAgIDxDb21tZW50PlxuICAgICAgICAgICAgPGltZyBzcmM9e2NoYXRCbGFja30gYWx0PSdpY29uJyAvPlxuICAgICAgICAgICAgMjEyXG4gICAgICAgICAgPC9Db21tZW50PlxuICAgICAgICA8L0luZm8+XG5cbiAgICAgICAgPEJEZXRhaWxJbWFnZSBzcmM9e2Jsb2dJbWFnZX0gYWx0PVwiYmxvZ1wiIC8+XG4gICAgICAgIDxIZWFkaW5nND5cbiAgICAgICAgICBBIGdyb3VwIG9mIEFjdGl2aXNpb24gQmxpenphcmQgd29ya2VycyBvZmZpY2lhbGx5IGFubm91bmNlZCBhIHN0cmlrZVxuICAgICAgICAgIGZ1bmQgVGh1cnNkYXkgbW9ybmluZyBmb2xsb3dpbmcgdHdvIGRheXMgb2Ygd2Fsa291dHMgaW4gc3VwcG9ydCBvZlxuICAgICAgICAgIHF1YWxpdHkgYXNzdXJhbmNlXG4gICAgICAgIDwvSGVhZGluZzQ+XG4gICAgICAgIDxCb2R5Mz5cbiAgICAgICAgICBUaGUgZ3JvdXAsIGNhbGxlZCBBQksgV29ya2Vyc+KAmSBBbGxpYW5jZSwgY2FtZSB0b2dldGhlciBpbiBKdWx5IGFmdGVyXG4gICAgICAgICAgQ2FsaWZvcm5pYeKAmXMgRGVwYXJ0bWVudCBvZiBGYWlyIEVtcGxveW1lbnQgYW5kIEhvdXNpbmcgKERGRUgpIGZpbGVkIGFcbiAgICAgICAgICBsYXdzdWl0IHByZWNlZGVkIGJ5IGEgdHdvLXllYXIgaW52ZXN0aWdhdGlvbiBpbnRvIHRoZSBjb21wYW554oCZc1xuICAgICAgICAgIGFsbGVnZWQg4oCcZnJhdCBib3kgY3VsdHVyZS7igJ0gQWN0aXZpc2lvbiBCbGl6emFyZCB3b3JrZXJzIGFyZSBub3RcbiAgICAgICAgICBvZmZpY2lhbGx5IHVuaW9uaXplZCwgd2hpY2ggbWVhbnMgdGhhdCB0aGUgc3RyaWtlLCBpbml0aWF0ZWQgVGh1cnNkYXksXG4gICAgICAgICAgd2lsbCBub3QgaGF2ZSB1bmlvbiBwcm90ZWN0aW9ucy4gVGhlIGdyb3VwIGlzIGJlaW5nIGFzc2lzdGVkIGJ5IHRoZVxuICAgICAgICAgIENvbW11bmljYXRpb24gV29ya2VycyBvZiBBbWVyaWNhLCB0aGUgV2FzaGluZ3RvbiBQb3N0IHJlcG9ydGVkLlxuICAgICAgICAgIEVtcGxveWVlcyBiZWdhbiBzaWduaW5nIHVuaW9uIGNhcmRzIFRodXJzZGF5IGluIGFuIGVmZm9ydCB0byBnZXQgdGhlXG4gICAgICAgICAgZ3JvdXAgcmVjb2duaXplZCwgYWNjb3JkaW5nIHRvIHRoZSByZXBvcnQuIEl04oCZcyB1bmNsZWFyIGhvdyBtYW55XG4gICAgICAgICAgd29ya2VycyBhcmUgcGFydGljaXBhdGluZyBpbiB0aGUgc3RyaWtlLCB3aGljaCBoYXMgYmVlbiBvbmdvaW5nIHNpbmNlXG4gICAgICAgICAgTW9uZGF5LiBNb3JlIHRoYW4gMSw3MDAgY29udHJhY3RlZCB3b3JrZXJzIGFuZCBlbXBsb3llZXMgc2lnbmVkIGFcbiAgICAgICAgICBwZXRpdGlvbiBpbiBOb3ZlbWJlciBkZW1hbmRpbmcgdGhhdCBDRU8gQm9iYnkgS290aWNrIHJlc2lnbi5cbiAgICAgICAgPC9Cb2R5Mz5cblxuICAgICAgICA8QkRldGFpbEltYWdlIHNyYz17YmxvZ0ltYWdlfSBhbHQ9XCJibG9nXCIgLz5cbiAgICAgICAgPEJvZHkzPkltYWdlOiBBbGxlbiBKLiBTY2hhYmVuL0xvcyBBbmdlbGVzIFRpbWVzL0dldHR5IEltYWdlczwvQm9keTM+XG5cbiAgICAgICAgPERpdmlkZXIgLz5cblxuICAgICAgICA8Q29udGVudD5cbiAgICAgICAgICA8SGVhZGluZzQ+XG4gICAgICAgICAgICBXaGVyZSB0aGV5IGFyZSByYWlzaW5nIG1vbmV5IGZvciBhIHN0cmlrZSBmdW5kLCBBQksgV29ya2Vyc+KAmVxuICAgICAgICAgICAgQWxsaWFuY2UgbGVhZGVycyBzYWlkIEFjdGl2aXNpb24gQmxpenphcmQgbGVhZGVyc2hpcCBoYXMgb25seVxuICAgICAgICAgICAgY29udGludWVkIHRvIGlnbm9yZSBkZW1hbmRzXG4gICAgICAgICAgPC9IZWFkaW5nND5cbiAgICAgICAgICA8Qm9keTM+XG4gICAgICAgICAgICBTb21lIFFBIHdvcmtlcnMgYXQgQWN0aXZpc2lvbiBCbGl6emFyZCBhbmQgaXRzIHN1YnNpZGlhcmllcyBoYXZlXG4gICAgICAgICAgICB3YWxrZWQgb3V0IG9mIHdvcmsgZWFjaCBkYXkgc2luY2UgTW9uZGF5LCBpbiBwcm90ZXN0IG9mIGxheW9mZnMgbGFzdFxuICAgICAgICAgICAgd2Vlay4gKEFjdGl2aXNpb24gQmxpenphcmQgZG9lc27igJl0IGNoYXJhY3Rlcml6ZSB0aGVzZSBqb2IgbG9zc2VzIGFzXG4gICAgICAgICAgICBsYXlvZmZzLCBob3dldmVyOiBUaGUgY29tcGFueSBzYWlkIHRoYXQgdGhlc2UgcGVvcGxlIHdlcmUgdGVtcG9yYXJ5XG4gICAgICAgICAgICBjb250cmFjdCB3b3JrZXJzLCBub3QgZW1wbG95ZWVzLCBhbmQgdGhhdCBpdCB3YXMgbm90IHJlbmV3aW5nIHRoZWlyXG4gICAgICAgICAgICBjb250cmFjdHMuKSBBY3RpdmlzaW9uIEJsaXp6YXJkIGlzIGluIHRoZSBwcm9jZXNzIG9mIGNvbnZlcnRpbmcgNTAwXG4gICAgICAgICAgICB0ZW1wb3Jhcnkgam9icyB0byBmdWxsLXRpbWUgc3RhdHVzLCB0aGUgY29tcGFueSBzYWlkIOKAlCB0aG91Z2ggdGhlXG4gICAgICAgICAgICBncm91cCBvZiBSYXZlbiBTb2Z0d2FyZSBRQSB3b3JrZXJzIHdlcmUgbm90IHBhcnQgb2YgdGhhdCBpbml0aWF0aXZlLlxuICAgICAgICAgIDwvQm9keTM+XG4gICAgICAgIDwvQ29udGVudD5cblxuICAgICAgICA8Q29udGVudD5cbiAgICAgICAgICA8SGVhZGluZzQ+XG4gICAgICAgICAgICDigJxXZSBhcmUgYWxsIGRpc3Bvc2FibGUgdG8gdGhpcyBjb21wYW55LOKAnSBvbmUgc3RyaWtpbmcgd29ya2VyIHRvbGRcbiAgICAgICAgICAgIFBvbHlnb24uIOKAnFdlIG5lZWQgdG8gYmFuZCB0b2dldGhlciBvciB3ZSB3aWxsIG5ldmVyIGdldCBhbnl3aGVyZS5cbiAgICAgICAgICAgIFsuLi5dIElmIEkgbG9zZSBteSBqb2IgZHVlIHRvIHVuaW9uaXppbmcsIGZpbmUsIGJ1dCBJ4oCZZCByYXRoZXIgbWFrZVxuICAgICAgICAgICAgdGhpcyBwbGFjZSB3b3J0aCB3b3JraW5nIGhlcmUu4oCdXG4gICAgICAgICAgPC9IZWFkaW5nND5cbiAgICAgICAgICA8Qm9keTM+XG4gICAgICAgICAgICBUaGUgdmlkZW8gZ2FtZSBpbmR1c3RyeSBoYXMgYmVlbiBtb3Zpbmcgc2xvd2x5IHRvd2FyZCB1bmlvbml6YXRpb25cbiAgICAgICAgICAgIG92ZXIgdGhlIHBhc3QgZmV3IHllYXJzLCBidXQgbm8gY29tcGFueSBpbiB0aGUgVW5pdGVkIFN0YXRlcyBoYXNcbiAgICAgICAgICAgIGJlY29tZSBvZmZpY2lhbGx5IHJlY29nbml6ZWQuIExhc3QgeWVhciwgYSBncm91cCBvZiB3b3JrZXJzIHRoYXRcbiAgICAgICAgICAgIHdyaXRlIGZvciBtb2JpbGUgYXBwIExvdmVzdHJ1Y2s6IENob29zZSBZb3VyIFJvbWFuY2UgYmFuZGVkIHRvZ2V0aGVyXG4gICAgICAgICAgICBmb3IgYSAyMS1kYXkgc3RyaWtlIOKAlCBhbmQgd29uLiBJdCB3YXMgdGhlIGZpcnN0IHN1Y2Nlc3NmdWwgZ2FtZVxuICAgICAgICAgICAgd29ya2VyIHN0cmlrZSBpbiB0aGUgaW5kdXN0cnkgaGlzdG9yeS5cbiAgICAgICAgICA8L0JvZHkzPlxuICAgICAgICA8L0NvbnRlbnQ+XG5cbiAgICAgICAgPERpdmlkZXIgLz5cblxuICAgICAgICA8Q29tbWVudHM+XG4gICAgICAgICAgPEhlYWRpbmczPjIxMiBjb21tZW50cyB0byB0aGlzIGFydGljbGU6PC9IZWFkaW5nMz5cbiAgICAgICAgICA8Q29tbWVudEJveD5cbiAgICAgICAgICAgIDxOYW1lPk1hcmsgSmFjb2JzPC9OYW1lPlxuICAgICAgICAgICAgPEJvZHkzPlxuICAgICAgICAgICAgICBXaGlsZSBJ4oCZbSBzdGlsbCBub3Qgc3VyZSB1bmlvbml6YXRpb24gd2lsbCBoYXZlIHRoZSBkZXNpcmVkIGVmZmVjdFxuICAgICAgICAgICAgICByZTogYWJ1c2Ugb2YgZmVtYWxlIGVtcGxveWVlcyhnaXZlbiB0aGF0IHRoYXTigJlzIGEgY2FzZSBvZiBtYWpvcml0eVxuICAgICAgICAgICAgICBlbXBsb3llZXMgYWJ1c2luZyBhIG1pbm9yaXR5KSwgaXQgZGVmaW5pdGVseSB3aWxsIGluIHRlcm1zIG9mXG4gICAgICAgICAgICAgIGNydW5jaCBhbmQgbWFpbnRhaW5pbmcgcGVybWFuZW50IHBvc2l0aW9ucyB2cy4gY29udHJhY3QgbGFib3IuXG4gICAgICAgICAgICAgIE92ZXJhbGwsIEkgaG9wZSB0aGV5IHN1Y2NlZWQuXG4gICAgICAgICAgICA8L0JvZHkzPlxuICAgICAgICAgICAgPENvbW1lbnRBY3Rpb24+XG4gICAgICAgICAgICAgIDxEYXRlPjIzLjEyLjIwMjE8L0RhdGU+XG4gICAgICAgICAgICAgIDxDb21tZW50UmVhY3Q+XG4gICAgICAgICAgICAgICAgPExpa2U+XG4gICAgICAgICAgICAgICAgICA8aW1nIHNyYz17bGlrZX0gYWx0PSdpY29uJyAvPlxuICAgICAgICAgICAgICAgICAgMjEyXG4gICAgICAgICAgICAgICAgPC9MaWtlPlxuICAgICAgICAgICAgICAgIDxVbmxpa2U+XG4gICAgICAgICAgICAgICAgICA8aW1nIHNyYz17dW5saWtlfSBhbHQ9J2ljb24nIC8+XG4gICAgICAgICAgICAgICAgICAyMTJcbiAgICAgICAgICAgICAgICA8L1VubGlrZT5cbiAgICAgICAgICAgICAgPC9Db21tZW50UmVhY3Q+XG4gICAgICAgICAgICA8L0NvbW1lbnRBY3Rpb24+XG4gICAgICAgICAgPC9Db21tZW50Qm94PlxuICAgICAgICAgIDxDb21tZW50Qm94PlxuICAgICAgICAgICAgPE5hbWU+TWFyayBKYWNvYnM8L05hbWU+XG4gICAgICAgICAgICA8Qm9keTM+XG4gICAgICAgICAgICAgIFdoaWxlIEnigJltIHN0aWxsIG5vdCBzdXJlIHVuaW9uaXphdGlvbiB3aWxsIGhhdmUgdGhlIGRlc2lyZWQgZWZmZWN0XG4gICAgICAgICAgICAgIHJlOiBhYnVzZSBvZiBmZW1hbGUgZW1wbG95ZWVzKGdpdmVuIHRoYXQgdGhhdOKAmXMgYSBjYXNlIG9mIG1ham9yaXR5XG4gICAgICAgICAgICAgIGVtcGxveWVlcyBhYnVzaW5nIGEgbWlub3JpdHkpLCBpdCBkZWZpbml0ZWx5IHdpbGwgaW4gdGVybXMgb2ZcbiAgICAgICAgICAgICAgY3J1bmNoIGFuZCBtYWludGFpbmluZyBwZXJtYW5lbnQgcG9zaXRpb25zIHZzLiBjb250cmFjdCBsYWJvci5cbiAgICAgICAgICAgICAgT3ZlcmFsbCwgSSBob3BlIHRoZXkgc3VjY2VlZC5cbiAgICAgICAgICAgIDwvQm9keTM+XG4gICAgICAgICAgICA8Q29tbWVudEFjdGlvbj5cbiAgICAgICAgICAgICAgPERhdGU+MjMuMTIuMjAyMTwvRGF0ZT5cbiAgICAgICAgICAgICAgPENvbW1lbnRSZWFjdD5cbiAgICAgICAgICAgICAgICA8TGlrZT5cbiAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtsaWtlfSBhbHQ9J2ljb24nIC8+XG4gICAgICAgICAgICAgICAgICAyMTJcbiAgICAgICAgICAgICAgICA8L0xpa2U+XG4gICAgICAgICAgICAgICAgPFVubGlrZT5cbiAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXt1bmxpa2V9IGFsdD0naWNvbicgLz5cbiAgICAgICAgICAgICAgICAgIDIxMlxuICAgICAgICAgICAgICAgIDwvVW5saWtlPlxuICAgICAgICAgICAgICA8L0NvbW1lbnRSZWFjdD5cbiAgICAgICAgICAgIDwvQ29tbWVudEFjdGlvbj5cbiAgICAgICAgICA8L0NvbW1lbnRCb3g+XG4gICAgICAgICAgPENvbW1lbnRCb3g+XG4gICAgICAgICAgICA8TmFtZT5NYXJrIEphY29iczwvTmFtZT5cbiAgICAgICAgICAgIDxCb2R5Mz5cbiAgICAgICAgICAgICAgV2hpbGUgSeKAmW0gc3RpbGwgbm90IHN1cmUgdW5pb25pemF0aW9uIHdpbGwgaGF2ZSB0aGUgZGVzaXJlZCBlZmZlY3RcbiAgICAgICAgICAgICAgcmU6IGFidXNlIG9mIGZlbWFsZSBlbXBsb3llZXMoZ2l2ZW4gdGhhdCB0aGF04oCZcyBhIGNhc2Ugb2YgbWFqb3JpdHlcbiAgICAgICAgICAgICAgZW1wbG95ZWVzIGFidXNpbmcgYSBtaW5vcml0eSksIGl0IGRlZmluaXRlbHkgd2lsbCBpbiB0ZXJtcyBvZlxuICAgICAgICAgICAgICBjcnVuY2ggYW5kIG1haW50YWluaW5nIHBlcm1hbmVudCBwb3NpdGlvbnMgdnMuIGNvbnRyYWN0IGxhYm9yLlxuICAgICAgICAgICAgICBPdmVyYWxsLCBJIGhvcGUgdGhleSBzdWNjZWVkLlxuICAgICAgICAgICAgPC9Cb2R5Mz5cbiAgICAgICAgICAgIDxDb21tZW50QWN0aW9uPlxuICAgICAgICAgICAgICA8RGF0ZT4yMy4xMi4yMDIxPC9EYXRlPlxuICAgICAgICAgICAgICA8Q29tbWVudFJlYWN0PlxuICAgICAgICAgICAgICAgIDxMaWtlPlxuICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e2xpa2V9IGFsdD0naWNvbicgLz5cbiAgICAgICAgICAgICAgICAgIDIxMlxuICAgICAgICAgICAgICAgIDwvTGlrZT5cbiAgICAgICAgICAgICAgICA8VW5saWtlPlxuICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e3VubGlrZX0gYWx0PSdpY29uJyAvPlxuICAgICAgICAgICAgICAgICAgMjEyXG4gICAgICAgICAgICAgICAgPC9Vbmxpa2U+XG4gICAgICAgICAgICAgIDwvQ29tbWVudFJlYWN0PlxuICAgICAgICAgICAgPC9Db21tZW50QWN0aW9uPlxuICAgICAgICAgIDwvQ29tbWVudEJveD5cbiAgICAgICAgPC9Db21tZW50cz5cblxuICAgICAgICA8QnV0dG9uQ29udGFpbmVyPlxuICAgICAgICAgIDxCdG5QcmltYXJ5PmxvYWQgMTAgbW9yZSBDb21tZW50czwvQnRuUHJpbWFyeT5cbiAgICAgICAgPC9CdXR0b25Db250YWluZXI+XG5cbiAgICAgICAgPE9waW5pb24+XG4gICAgICAgICAgPE1haW5UYWc+TGVhdmUgeW91ciBvcGluaW9uPC9NYWluVGFnPlxuICAgICAgICAgIDxIZWFkaW5nMz5IYXZlIHNvbWV0aGluZyB0byBzYXk/PC9IZWFkaW5nMz5cbiAgICAgICAgICA8Rm9ybT5cbiAgICAgICAgICAgIDxUb3BJbnB1dD5cbiAgICAgICAgICAgICAgPElucHV0IHBsYWNlaG9sZGVyPVwiTmFtZVwiIHR5cGU9XCJ0ZXh0XCIgLz5cbiAgICAgICAgICAgICAgPElucHV0IHBsYWNlaG9sZGVyPVwiRW1haWxcIiB0eXBlPVwiZW1haWxcIiAvPlxuICAgICAgICAgICAgPC9Ub3BJbnB1dD5cblxuICAgICAgICAgICAgPE1lc3NhZ2UgcGxhY2Vob2xkZXI9XCJZb3VyIGNvbW1lbnRcIiAvPlxuICAgICAgICAgIDwvRm9ybT5cbiAgICAgICAgPC9PcGluaW9uPlxuICAgICAgPC9CbG9nRGV0YWlsV3JhcD5cblxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXJcIj5cbiAgICAgICAgPEJsb2dCdG0+XG4gICAgICAgICAgPFdyYXA+XG4gICAgICAgICAgICA8TWFpblRhZz5SZWxhdGVkIGFydGljbGVzPC9NYWluVGFnPlxuICAgICAgICAgICAgPERlY29yVGl0bGUyPllvdSBjYW4gYWxzbyBsaWtlIHRvIHJlYWQ8L0RlY29yVGl0bGUyPlxuICAgICAgICAgIDwvV3JhcD5cblxuICAgICAgICAgIDxCbG9nUmVsYXRlZD5cbiAgICAgICAgICAgIDxCbG9nQ2FyZCBsaW5rPVwiL2RldGFpbFwiPlxuICAgICAgICAgICAgICA8QmxvZ1RvcD5cbiAgICAgICAgICAgICAgICA8TGFiZWw+V09XPC9MYWJlbD5cbiAgICAgICAgICAgICAgICA8QmxvZ0ltYWdlIHNyYz17YmxvZ0ltZ30gYWx0PVwiYmxvZ1wiIC8+XG4gICAgICAgICAgICAgICAgPEJsb2dJbmZvPlxuICAgICAgICAgICAgICAgICAgPEJvZHkyPjEyIE5vdiAyMDIxPC9Cb2R5Mj5cbiAgICAgICAgICAgICAgICAgIDxDb21tZW50VGh1bWI+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuPjIxMjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgIDwvQ29tbWVudFRodW1iPlxuICAgICAgICAgICAgICAgIDwvQmxvZ0luZm8+XG4gICAgICAgICAgICAgIDwvQmxvZ1RvcD5cbiAgICAgICAgICAgICAgPEJsb2dEZXQ+XG4gICAgICAgICAgICAgICAgPEhlYWRpbmczPlxuICAgICAgICAgICAgICAgICAgR2V0IHRoZSBCYWJ5IE11cmxvYyBTYXRjaC1TaGVsbHMgVHJhbnNtb2cgd2l0aCB0aGUgUHVyY2hhc2Ugb2ZcbiAgICAgICAgICAgICAgICAgIGEgNi1Nb250aCBTdWJzY3JpcHRpb24hXG4gICAgICAgICAgICAgICAgPC9IZWFkaW5nMz5cbiAgICAgICAgICAgICAgICA8Qm9keTM+XG4gICAgICAgICAgICAgICAgICBJbnRyb2R1Y2luZyB0aGUgZWdnY2VsZW50IEJhYnkgTXVybG9jIFNhdGNoLVNoZWxscyB0cmFuc21vZyrigJRcbiAgICAgICAgICAgICAgICAgIG5vdyBhdmFpbGFibGUgdG8gYWRkIHRvIHlvdXIgY29sbGVjdGlvbiEgWW914oCZbGwgYmUgYWJsZSB0b1xuICAgICAgICAgICAgICAgICAgY2FycnkgdGhpcyBhZG9yYWJsZS4uLlxuICAgICAgICAgICAgICAgIDwvQm9keTM+XG4gICAgICAgICAgICAgIDwvQmxvZ0RldD5cbiAgICAgICAgICAgIDwvQmxvZ0NhcmQ+XG4gICAgICAgICAgICA8QmxvZ0NhcmQgbGluaz1cIi9kZXRhaWxcIj5cbiAgICAgICAgICAgICAgPEJsb2dUb3A+XG4gICAgICAgICAgICAgICAgPExhYmVsPldPVzwvTGFiZWw+XG4gICAgICAgICAgICAgICAgPEJsb2dJbWFnZSBzcmM9e2Jsb2dJbWd9IGFsdD1cImJsb2dcIiAvPlxuICAgICAgICAgICAgICAgIDxCbG9nSW5mbz5cbiAgICAgICAgICAgICAgICAgIDxCb2R5Mj4xMiBOb3YgMjAyMTwvQm9keTI+XG4gICAgICAgICAgICAgICAgICA8Q29tbWVudFRodW1iPlxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj4yMTI8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIHsvKiA8QnNDaGF0U3F1YXJlRmlsbCAvPiA8c3Bhbj4yMTI8L3NwYW4+ICovfVxuICAgICAgICAgICAgICAgICAgPC9Db21tZW50VGh1bWI+XG4gICAgICAgICAgICAgICAgPC9CbG9nSW5mbz5cbiAgICAgICAgICAgICAgPC9CbG9nVG9wPlxuICAgICAgICAgICAgICA8QmxvZ0RldD5cbiAgICAgICAgICAgICAgICA8SGVhZGluZzM+XG4gICAgICAgICAgICAgICAgICBHZXQgdGhlIEJhYnkgTXVybG9jIFNhdGNoLVNoZWxscyBUcmFuc21vZyB3aXRoIHRoZSBQdXJjaGFzZSBvZlxuICAgICAgICAgICAgICAgICAgYSA2LU1vbnRoIFN1YnNjcmlwdGlvbiFcbiAgICAgICAgICAgICAgICA8L0hlYWRpbmczPlxuICAgICAgICAgICAgICAgIDxCb2R5Mz5cbiAgICAgICAgICAgICAgICAgIEludHJvZHVjaW5nIHRoZSBlZ2djZWxlbnQgQmFieSBNdXJsb2MgU2F0Y2gtU2hlbGxzIHRyYW5zbW9nKuKAlFxuICAgICAgICAgICAgICAgICAgbm93IGF2YWlsYWJsZSB0byBhZGQgdG8geW91ciBjb2xsZWN0aW9uISBZb3XigJlsbCBiZSBhYmxlIHRvXG4gICAgICAgICAgICAgICAgICBjYXJyeSB0aGlzIGFkb3JhYmxlLi4uXG4gICAgICAgICAgICAgICAgPC9Cb2R5Mz5cbiAgICAgICAgICAgICAgPC9CbG9nRGV0PlxuICAgICAgICAgICAgPC9CbG9nQ2FyZD5cbiAgICAgICAgICA8L0Jsb2dSZWxhdGVkPlxuXG4gICAgICAgICAgPEJ1dHRvbkNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgPEJ0blByaW1hcnk+UmVhZCBNb3JlIE5ld3M8L0J0blByaW1hcnk+XG4gICAgICAgICAgPC9CdXR0b25Db250YWluZXI+XG4gICAgICAgIDwvQmxvZ0J0bT5cbiAgICAgIDwvZGl2PlxuICAgIDwvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChCbG9nRGV0YWlsKTtcblxuY29uc3QgQmxvZ0RldGFpbFdyYXAgPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogODAlO1xuICAvKiBwYWRkaW5nOiAwIDIwcHg7ICovXG4gIG1hcmdpbi10b3A6IDE0MHB4O1xuICBtYXJnaW4taW5saW5lOiBhdXRvO1xuICBcbiAgQG1lZGlhICR7ZGV2aWNlLmxhcHRvcH0ge1xuICAgIHdpZHRoOiA1MCU7XG4gIH1cblxuYDtcblxuY29uc3QgSW5mbyA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIG1hcmdpbi10b3A6IDIwcHg7XG4gIGNvbG9yOiAjNmU3Njg3O1xuICBnYXA6IDIwcHg7XG5gO1xuXG5jb25zdCBEYXRlID0gc3R5bGVkKEJvZHkzKWBgO1xuY29uc3QgQXV0aG9yID0gc3R5bGVkKEJvZHkzKWBcbiAgcGFkZGluZzogMCAyMHB4O1xuICBib3JkZXItbGVmdDogMXB4IHNvbGlkICNEMEQ1REY7XG4gIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNEMEQ1REY7XG5gO1xuXG5jb25zdCBDb21tZW50ID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZ2FwOiA1cHg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5gO1xuXG5jb25zdCBCRGV0YWlsSW1hZ2UgPSBzdHlsZWQuaW1nYFxuICBtYXJnaW46IDQwcHggMCAyMHB4IDA7XG4gIGJvcmRlci1yYWRpdXM6IDIwcHg7XG5gO1xuXG5jb25zdCBDb250ZW50ID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luLXRvcDogMjBweDtcbmA7XG5cbmNvbnN0IENvbW1lbnRzID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luOiA2MHB4IDAgNDBweCAwO1xuYDtcblxuY29uc3QgQ29tbWVudEJveCA9IHN0eWxlZC5kaXZgXG4gIG1hcmdpbi10b3A6IDIwcHg7XG4gIHBhZGRpbmc6IDIwcHggMDtcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNkMGQ1ZGY7XG5gO1xuXG5jb25zdCBOYW1lID0gc3R5bGVkKEhlYWRpbmc0KWBcbiAgbWFyZ2luLWJvdHRvbTogMjBweDtcbmA7XG5cbmNvbnN0IENvbW1lbnRBY3Rpb24gPSBzdHlsZWQuZGl2YFxuICBtYXJnaW4tdG9wOiAyMHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5gO1xuXG5jb25zdCBDb21tZW50UmVhY3QgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBnYXA6IDIwcHg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5gO1xuXG5jb25zdCBMaWtlID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZ2FwOiAxMHB4O1xuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoODkuNjdkZWcsICM1NDc5RTYgMC4yNiUsICM2QjdBRkYgOTkuNzElKTtcbi13ZWJraXQtYmFja2dyb3VuZC1jbGlwOiB0ZXh0O1xuLXdlYmtpdC10ZXh0LWZpbGwtY29sb3I6IHRyYW5zcGFyZW50O1xuYmFja2dyb3VuZC1jbGlwOiB0ZXh0O1xuYWxpZ24taXRlbXM6IGNlbnRlcjtcbmBcblxuY29uc3QgVW5saWtlID0gc3R5bGVkKExpa2UpYGBcblxuY29uc3QgT3BpbmlvbiA9IHN0eWxlZC5kaXZgXG4gIG1hcmdpbi10b3A6IDEwMHB4O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5gO1xuXG5jb25zdCBGb3JtID0gc3R5bGVkLmZvcm1gXG4gIG1hcmdpbjogNDBweCAwO1xuICB3aWR0aDogMTAwJTtcbmA7XG5cbmNvbnN0IFRvcElucHV0ID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZ2FwOiAyMHB4O1xuYDtcblxuY29uc3QgSW5wdXQgPSBzdHlsZWQuaW5wdXRgXG4gIGJhY2tncm91bmQ6ICNlYmVmZjg7XG4gIGJvcmRlci1yYWRpdXM6IDZweDtcbiAgcGFkZGluZzogMTBweDtcbiAgYm9yZGVyOiBub25lO1xuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICB3aWR0aDogLXdlYmtpdC1maWxsLWF2YWlsYWJsZTtcbmA7XG5cbmNvbnN0IE1lc3NhZ2UgPSBzdHlsZWQudGV4dGFyZWFgXG4gIGJhY2tncm91bmQ6ICNlYmVmZjg7XG4gIGJvcmRlci1yYWRpdXM6IDZweDtcbiAgcGFkZGluZzogMTBweDtcbiAgYm9yZGVyOiBub25lO1xuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICBmb250LWZhbWlseTogaW5oZXJpdDtcbiAgd2lkdGg6IC13ZWJraXQtZmlsbC1hdmFpbGFibGU7XG5gO1xuXG5jb25zdCBCbG9nQnRtID0gc3R5bGVkLnNlY3Rpb25gXG4gIG1hcmdpbi1ib3R0b206IDYwcHg7XG5cbmBcblxuY29uc3QgQmxvZ1JlbGF0ZWQgPSBzdHlsZWQuZGl2YFxuICAgIG1hcmdpbi10b3A6IDIwcHg7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBnYXA6IDkwcHg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcblxuICAgIEBtZWRpYSAke2RldmljZS5sYXB0b3B9IHtcbiAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gICAgfVxuYFxuXG5jb25zdCBCbG9nQ2FyZCA9IHN0eWxlZChMaW5rKWBcbiAgYm9yZGVyLXJhZGl1czogMjBweDtcbiAgY3Vyc29yOiBwb2ludGVyO1xuYDtcblxuY29uc3QgQmxvZ1RvcCA9IHN0eWxlZC5kaXZgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogZmxleDtcbiAgd2lkdGg6IGF1dG87XG5gO1xuXG5jb25zdCBMYWJlbCA9IHN0eWxlZChTcGVjaWFsKWBcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgaW5zZXQ6IDMwcHggYXV0byBhdXRvIDMwcHg7XG5gXG5cbmNvbnN0IEJsb2dJbWFnZSA9IHN0eWxlZC5pbWdgXG4gIGJvcmRlci1yYWRpdXM6IDIwcHg7XG4gIC8qIG1hcmdpbi10b3A6IDQwcHg7ICovXG4gIGhlaWdodDogMTAwJTtcbmA7XG5cbmNvbnN0IEJsb2dJbmZvID0gc3R5bGVkLmRpdmBcbiAgY29sb3I6ICNmZmY7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgei1pbmRleDogMjtcbiAgaW5zZXQ6IGF1dG8gMCAwIDA7XG4gIHBhZGRpbmc6IDMwcHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIG1hcmdpbi10b3A6IGF1dG87XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcblxuICAmIHNwYW4sXG4gIHAge1xuICAgIGNvbG9yOiAjZmZmO1xuICB9XG5gO1xuXG5jb25zdCBDb21tZW50VGh1bWIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBjb2x1bW4tZ2FwOiAxMHB4O1xuYDtcbmNvbnN0IEJsb2dEZXQgPSBzdHlsZWQuZGl2YFxuICBtYXJnaW4tdG9wOiAyMHB4O1xuYDsiXX0= */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const BlogBtm=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"section\", false?undefined:{target:\"e1pyb6r28\",label:\"BlogBtm\"})( false?undefined:{name:\"30tvht\",styles:\"margin-bottom:60px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const BlogRelated=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1pyb6r27\",label:\"BlogRelated\"})(\"margin-top:20px;display:flex;gap:90px;flex-direction:column;@media \",_queries__WEBPACK_IMPORTED_MODULE_13__[\"device\"].laptop,\"{flex-direction:row;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const BlogCard=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(_frontity_components_link__WEBPACK_IMPORTED_MODULE_11__[\"default\"], false?undefined:{target:\"e1pyb6r26\",label:\"BlogCard\"})( false?undefined:{name:\"6zqw5b\",styles:\"border-radius:20px;cursor:pointer\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const BlogTop=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1pyb6r25\",label:\"BlogTop\"})( false?undefined:{name:\"zkwklk\",styles:\"position:relative;display:flex;width:auto\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Label=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(_typography_special_tag__WEBPACK_IMPORTED_MODULE_12__[\"Special\"], false?undefined:{target:\"e1pyb6r24\",label:\"Label\"})( false?undefined:{name:\"7923ex\",styles:\"position:absolute;inset:30px auto auto 30px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const BlogImage=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"img\", false?undefined:{target:\"e1pyb6r23\",label:\"BlogImage\"})( false?undefined:{name:\"1677pwn\",styles:\"border-radius:20px;height:100%\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const BlogInfo=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1pyb6r22\",label:\"BlogInfo\"})( false?undefined:{name:\"r9gljl\",styles:\"color:#fff;position:absolute;z-index:2;inset:auto 0 0 0;padding:30px;display:flex;align-items:center;margin-top:auto;justify-content:space-between;& span,p{color:#fff;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const CommentThumb=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1pyb6r21\",label:\"CommentThumb\"})( false?undefined:{name:\"oeyoyo\",styles:\"display:flex;align-items:center;column-gap:10px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const BlogDet=Object(frontity__WEBPACK_IMPORTED_MODULE_0__[\"styled\"])(\"div\", false?undefined:{target:\"e1pyb6r20\",label:\"BlogDet\"})( false?undefined:{name:\"iqoq9n\",styles:\"margin-top:20px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/lb/src/components/blog/blog-detail.js\n");

/***/ }),

/***/ "./packages/lb/src/components/images/icons/chat-black.svg":
/*!****************************************************************!*\
  !*** ./packages/lb/src/components/images/icons/chat-black.svg ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (__webpack_require__.p + \"images/chat-black.svg\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9sYi9zcmMvY29tcG9uZW50cy9pbWFnZXMvaWNvbnMvY2hhdC1ibGFjay5zdmc/N2UzNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFlLG9GQUF1QiwwQkFBMEIiLCJmaWxlIjoiLi9wYWNrYWdlcy9sYi9zcmMvY29tcG9uZW50cy9pbWFnZXMvaWNvbnMvY2hhdC1ibGFjay5zdmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1hZ2VzL2NoYXQtYmxhY2suc3ZnXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./packages/lb/src/components/images/icons/chat-black.svg\n");

/***/ })

})